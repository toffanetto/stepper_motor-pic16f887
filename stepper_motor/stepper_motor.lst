

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Jul 20 16:58:20 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Version 1.45
    44                           ; Generated 16/11/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F887 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0008                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  000E                     	;# 
    93  000F                     	;# 
    94  0010                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0014                     	;# 
    99  0015                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  001D                     	;# 
   110  001E                     	;# 
   111  001F                     	;# 
   112  0081                     	;# 
   113  0085                     	;# 
   114  0086                     	;# 
   115  0087                     	;# 
   116  0088                     	;# 
   117  0089                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  008F                     	;# 
   122  0090                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0093                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0097                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009E                     	;# 
   139  009F                     	;# 
   140  0105                     	;# 
   141  0107                     	;# 
   142  0108                     	;# 
   143  0109                     	;# 
   144  010C                     	;# 
   145  010C                     	;# 
   146  010D                     	;# 
   147  010E                     	;# 
   148  010F                     	;# 
   149  0185                     	;# 
   150  0187                     	;# 
   151  0188                     	;# 
   152  0189                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  000E                     	;# 
   171  000F                     	;# 
   172  0010                     	;# 
   173  0011                     	;# 
   174  0012                     	;# 
   175  0013                     	;# 
   176  0014                     	;# 
   177  0015                     	;# 
   178  0015                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001B                     	;# 
   186  001C                     	;# 
   187  001D                     	;# 
   188  001E                     	;# 
   189  001F                     	;# 
   190  0081                     	;# 
   191  0085                     	;# 
   192  0086                     	;# 
   193  0087                     	;# 
   194  0088                     	;# 
   195  0089                     	;# 
   196  008C                     	;# 
   197  008D                     	;# 
   198  008E                     	;# 
   199  008F                     	;# 
   200  0090                     	;# 
   201  0091                     	;# 
   202  0092                     	;# 
   203  0093                     	;# 
   204  0093                     	;# 
   205  0093                     	;# 
   206  0094                     	;# 
   207  0095                     	;# 
   208  0096                     	;# 
   209  0097                     	;# 
   210  0098                     	;# 
   211  0099                     	;# 
   212  009A                     	;# 
   213  009B                     	;# 
   214  009C                     	;# 
   215  009D                     	;# 
   216  009E                     	;# 
   217  009F                     	;# 
   218  0105                     	;# 
   219  0107                     	;# 
   220  0108                     	;# 
   221  0109                     	;# 
   222  010C                     	;# 
   223  010C                     	;# 
   224  010D                     	;# 
   225  010E                     	;# 
   226  010F                     	;# 
   227  0185                     	;# 
   228  0187                     	;# 
   229  0188                     	;# 
   230  0189                     	;# 
   231  018C                     	;# 
   232  018D                     	;# 
   233  0000                     	;# 
   234  0001                     	;# 
   235  0002                     	;# 
   236  0003                     	;# 
   237  0004                     	;# 
   238  0005                     	;# 
   239  0006                     	;# 
   240  0007                     	;# 
   241  0008                     	;# 
   242  0009                     	;# 
   243  000A                     	;# 
   244  000B                     	;# 
   245  000C                     	;# 
   246  000D                     	;# 
   247  000E                     	;# 
   248  000E                     	;# 
   249  000F                     	;# 
   250  0010                     	;# 
   251  0011                     	;# 
   252  0012                     	;# 
   253  0013                     	;# 
   254  0014                     	;# 
   255  0015                     	;# 
   256  0015                     	;# 
   257  0016                     	;# 
   258  0017                     	;# 
   259  0018                     	;# 
   260  0019                     	;# 
   261  001A                     	;# 
   262  001B                     	;# 
   263  001B                     	;# 
   264  001C                     	;# 
   265  001D                     	;# 
   266  001E                     	;# 
   267  001F                     	;# 
   268  0081                     	;# 
   269  0085                     	;# 
   270  0086                     	;# 
   271  0087                     	;# 
   272  0088                     	;# 
   273  0089                     	;# 
   274  008C                     	;# 
   275  008D                     	;# 
   276  008E                     	;# 
   277  008F                     	;# 
   278  0090                     	;# 
   279  0091                     	;# 
   280  0092                     	;# 
   281  0093                     	;# 
   282  0093                     	;# 
   283  0093                     	;# 
   284  0094                     	;# 
   285  0095                     	;# 
   286  0096                     	;# 
   287  0097                     	;# 
   288  0098                     	;# 
   289  0099                     	;# 
   290  009A                     	;# 
   291  009B                     	;# 
   292  009C                     	;# 
   293  009D                     	;# 
   294  009E                     	;# 
   295  009F                     	;# 
   296  0105                     	;# 
   297  0107                     	;# 
   298  0108                     	;# 
   299  0109                     	;# 
   300  010C                     	;# 
   301  010C                     	;# 
   302  010D                     	;# 
   303  010E                     	;# 
   304  010F                     	;# 
   305  0185                     	;# 
   306  0187                     	;# 
   307  0188                     	;# 
   308  0189                     	;# 
   309  018C                     	;# 
   310  018D                     	;# 
   311                           
   312                           	psect	idataBANK0
   313  0DF5                     __pidataBANK0:	
   314                           
   315                           ;initializer for _LCD_Controle
   316  0DF5  340C               	retlw	12
   317                           
   318                           ;initializer for _LCD_Entrada
   319  0DF6  3403               	retlw	3
   320                           
   321                           ;initializer for _LCD_PORT
   322  0DF7  3406               	retlw	6
   323  0DF8  3400               	retlw	0
   324                           
   325                           	psect	idataBANK1
   326  0DF3                     __pidataBANK1:	
   327                           
   328                           ;initializer for _LCD_TRIS
   329  0DF3  3486               	retlw	134
   330  0DF4  3400               	retlw	0
   331  0008                     _PORTDbits	set	8
   332  0003                     _STATUSbits	set	3
   333  0012                     _T2CON	set	18
   334  000C                     _PIR1bits	set	12
   335  000B                     _INTCONbits	set	11
   336  0008                     _PORTD	set	8
   337  0006                     _PORTB	set	6
   338  008C                     _PIE1bits	set	140
   339  0088                     _TRISD	set	136
   340  0086                     _TRISB	set	134
   341  0092                     _PR2	set	146
   342  0189                     _ANSELH	set	393
   343                           
   344                           	psect	strings
   345  0800                     __pstrings:	
   346  0800                     stringtab:	
   347  0800                     __stringtab:	
   348                           
   349                           ;	String table - string pointers are 1 byte each
   350  0800  1BFF               	btfsc	btemp+1,7
   351  0801  280A               	ljmp	stringcode
   352  0802  1383               	bcf	3,7
   353  0803  187F               	btfsc	btemp+1,0
   354  0804  1783               	bsf	3,7
   355  0805  0800               	movf	0,w
   356  0806  0A84               	incf	4,f
   357  0807  1903               	skipnz
   358  0808  0AFF               	incf	btemp+1,f
   359  0809  0008               	return
   360  080A                     stringcode:	
   361  080A                     stringdir:	
   362  080A  3008               	movlw	high stringdir
   363  080B  008A               	movwf	10
   364  080C  0804               	movf	4,w
   365  080D  0A84               	incf	4,f
   366  080E  0782               	addwf	2,f
   367  080F                     __stringbase:	
   368  080F  3400               	retlw	0
   369  0810                     __end_of__stringtab:	
   370  0810                     STR_3:	
   371  0810  3456               	retlw	86	;'V'
   372  0811  3465               	retlw	101	;'e'
   373  0812  346C               	retlw	108	;'l'
   374  0813  343A               	retlw	58	;':'
   375  0814  3400               	retlw	0
   376  0815                     STR_2:	
   377  0815  3450               	retlw	80	;'P'
   378  0816  3441               	retlw	65	;'A'
   379  0817  343A               	retlw	58	;':'
   380  0818  3400               	retlw	0
   381  0819                     STR_1:	
   382  0819  3450               	retlw	80	;'P'
   383  081A  3446               	retlw	70	;'F'
   384  081B  343A               	retlw	58	;':'
   385  081C  3400               	retlw	0
   386                           
   387                           ; #config settings
   388  0000                     
   389                           	psect	cinit
   390  0015                     start_initialization:	
   391  0015                     __initialization:	
   392                           
   393                           ; Initialize objects allocated to BANK1
   394  0015  1683               	bsf	3,5	;RP0=1, select bank1
   395  0016  1303               	bcf	3,6	;RP1=0, select bank1
   396  0017  120A  158A  25F3  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   397  001C  00AA               	movwf	__pdataBANK1& (0+127)
   398  001D  120A  158A  25F4  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   399  0022  00AB               	movwf	(__pdataBANK1+1)& (0+127)
   400                           
   401                           ; Initialize objects allocated to BANK0
   402  0023  1283               	bcf	3,5	;RP0=0, select bank0
   403  0024  1303               	bcf	3,6	;RP1=0, select bank0
   404  0025  120A  158A  25F5  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   405  002A  00E4               	movwf	__pdataBANK0& (0+127)
   406  002B  120A  158A  25F6  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   407  0030  00E5               	movwf	(__pdataBANK0+1)& (0+127)
   408  0031  120A  158A  25F7  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   409  0036  00E6               	movwf	(__pdataBANK0+2)& (0+127)
   410  0037  120A  158A  25F8   	fcall	__pidataBANK0+3	;fetch initializer
   411  003A  00E7               	movwf	(__pdataBANK0+3)& (0+127)
   412                           
   413                           ; Clear objects allocated to BANK1
   414  003B  1683               	bsf	3,5	;RP0=1, select bank1
   415  003C  1303               	bcf	3,6	;RP1=0, select bank1
   416  003D  01A8               	clrf	__pbssBANK1& (0+127)
   417  003E  01A9               	clrf	(__pbssBANK1+1)& (0+127)
   418                           
   419                           ; Clear objects allocated to BANK0
   420  003F  1283               	bcf	3,5	;RP0=0, select bank0
   421  0040  1303               	bcf	3,6	;RP1=0, select bank0
   422  0041  01DA               	clrf	__pbssBANK0& (0+127)
   423  0042  01DB               	clrf	(__pbssBANK0+1)& (0+127)
   424  0043  01DC               	clrf	(__pbssBANK0+2)& (0+127)
   425  0044  01DD               	clrf	(__pbssBANK0+3)& (0+127)
   426  0045  01DE               	clrf	(__pbssBANK0+4)& (0+127)
   427  0046  01DF               	clrf	(__pbssBANK0+5)& (0+127)
   428  0047  01E0               	clrf	(__pbssBANK0+6)& (0+127)
   429  0048  01E1               	clrf	(__pbssBANK0+7)& (0+127)
   430  0049  01E2               	clrf	(__pbssBANK0+8)& (0+127)
   431  004A  01E3               	clrf	(__pbssBANK0+9)& (0+127)
   432  004B                     end_of_initialization:	
   433                           ;End of C runtime variable initialization code
   434                           
   435  004B                     __end_of__initialization:	
   436  004B  0183               	clrf	3
   437  004C  120A  118A  284F   	ljmp	_main	;jump to C main() function
   438                           
   439                           	psect	bssBANK0
   440  005A                     __pbssBANK0:	
   441  005A                     _error:	
   442  005A                     	ds	2
   443  005C                     _position:	
   444  005C                     	ds	2
   445  005E                     _setpoint:	
   446  005E                     	ds	2
   447  0060                     _speed_ramp:	
   448  0060                     	ds	1
   449  0061                     _phase:	
   450  0061                     	ds	1
   451  0062                     _c_int_value:	
   452  0062                     	ds	2
   453                           
   454                           	psect	dataBANK0
   455  0064                     __pdataBANK0:	
   456  0064                     _LCD_Controle:	
   457  0064                     	ds	1
   458  0065                     _LCD_Entrada:	
   459  0065                     	ds	1
   460  0066                     _LCD_PORT:	
   461  0066                     	ds	2
   462                           
   463                           	psect	bssBANK1
   464  00A8                     __pbssBANK1:	
   465  00A8                     _speed:	
   466  00A8                     	ds	2
   467                           
   468                           	psect	dataBANK1
   469  00AA                     __pdataBANK1:	
   470  00AA                     _LCD_TRIS:	
   471  00AA                     	ds	2
   472                           
   473                           	psect	cstackBANK1
   474  00A0                     __pcstackBANK1:	
   475  00A0                     int2char@int_value0:	
   476                           
   477                           ; 2 bytes @ 0x0
   478  00A0                     	ds	2
   479  00A2                     int2char@int_value1:	
   480                           
   481                           ; 2 bytes @ 0x2
   482  00A2                     	ds	2
   483  00A4                     int2char@int_value2:	
   484                           
   485                           ; 2 bytes @ 0x4
   486  00A4                     	ds	2
   487  00A6                     ??_main:	
   488                           
   489                           ; 1 bytes @ 0x6
   490  00A6                     	ds	2
   491                           
   492                           	psect	cstackCOMMON
   493  0070                     __pcstackCOMMON:	
   494  0070                     ?_setupDisplay:	
   495  0070                     ?_LCD_SendNb:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0070                     ?_setupStepper:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0070                     ?_calculaErro:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0070                     ?_calculaVelocidade:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0070                     ?_ISR:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0070                     ?_setup:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  0070                     ?_main:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0070                     ?_abs:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0070                     abs@a:	
   520                           ; 2 bytes @ 0x0
   521                           
   522                           
   523                           ; 2 bytes @ 0x0
   524  0070                     	ds	2
   525  0072                     ??_abs:	
   526                           
   527                           ; 1 bytes @ 0x2
   528  0072                     	ds	2
   529  0074                     ??_calculaErro:	
   530                           
   531                           ; 1 bytes @ 0x4
   532  0074                     	ds	2
   533  0076                     ??_ISR:	
   534                           
   535                           ; 1 bytes @ 0x6
   536  0076                     	ds	7
   537                           
   538                           	psect	cstackBANK0
   539  0020                     __pcstackBANK0:	
   540  0020                     _ISR$250:	
   541                           
   542                           ; 2 bytes @ 0x0
   543  0020                     	ds	2
   544  0022                     _ISR$251:	
   545                           
   546                           ; 2 bytes @ 0x2
   547  0022                     	ds	2
   548  0024                     _ISR$252:	
   549                           
   550                           ; 2 bytes @ 0x4
   551  0024                     	ds	2
   552  0026                     _ISR$253:	
   553                           
   554                           ; 2 bytes @ 0x6
   555  0026                     	ds	2
   556  0028                     ??_LCD_SendNb:	
   557  0028                     ??_setupStepper:	
   558                           ; 1 bytes @ 0x8
   559                           
   560  0028                     ?_getVelocidade:	
   561                           ; 1 bytes @ 0x8
   562                           
   563  0028                     ?___awdiv:	
   564                           ; 2 bytes @ 0x8
   565                           
   566  0028                     ?___lwdiv:	
   567                           ; 2 bytes @ 0x8
   568                           
   569  0028                     ?___ftpack:	
   570                           ; 2 bytes @ 0x8
   571                           
   572  0028                     ___awdiv@divisor:	
   573                           ; 3 bytes @ 0x8
   574                           
   575  0028                     ___lwdiv@divisor:	
   576                           ; 2 bytes @ 0x8
   577                           
   578  0028                     ___ftpack@arg:	
   579                           ; 2 bytes @ 0x8
   580                           
   581                           
   582                           ; 3 bytes @ 0x8
   583  0028                     	ds	2
   584  002A                     ??_getVelocidade:	
   585  002A                     ___awdiv@dividend:	
   586                           ; 1 bytes @ 0xA
   587                           
   588  002A                     ___lwdiv@dividend:	
   589                           ; 2 bytes @ 0xA
   590                           
   591                           
   592                           ; 2 bytes @ 0xA
   593  002A                     	ds	1
   594  002B                     ___ftpack@exp:	
   595                           
   596                           ; 1 bytes @ 0xB
   597  002B                     	ds	1
   598  002C                     ??___awdiv:	
   599  002C                     ??___lwdiv:	
   600                           ; 1 bytes @ 0xC
   601                           
   602  002C                     ___ftpack@sign:	
   603                           ; 1 bytes @ 0xC
   604                           
   605  002C                     _LCD_SendNb$307:	
   606                           ; 1 bytes @ 0xC
   607                           
   608                           
   609                           ; 2 bytes @ 0xC
   610  002C                     	ds	1
   611  002D                     ??___ftpack:	
   612  002D                     ___awdiv@counter:	
   613                           ; 1 bytes @ 0xD
   614                           
   615  002D                     ___lwdiv@counter:	
   616                           ; 1 bytes @ 0xD
   617                           
   618                           
   619                           ; 1 bytes @ 0xD
   620  002D                     	ds	1
   621  002E                     ___awdiv@sign:	
   622  002E                     _LCD_SendNb$308:	
   623                           ; 1 bytes @ 0xE
   624                           
   625  002E                     ___lwdiv@quotient:	
   626                           ; 2 bytes @ 0xE
   627                           
   628                           
   629                           ; 2 bytes @ 0xE
   630  002E                     	ds	1
   631  002F                     ___awdiv@quotient:	
   632                           
   633                           ; 2 bytes @ 0xF
   634  002F                     	ds	1
   635  0030                     ?___lwtoft:	
   636  0030                     _LCD_SendNb$309:	
   637                           ; 3 bytes @ 0x10
   638                           
   639  0030                     ___lwtoft@c:	
   640                           ; 2 bytes @ 0x10
   641                           
   642                           
   643                           ; 2 bytes @ 0x10
   644  0030                     	ds	1
   645  0031                     ?___wmul:	
   646  0031                     ___wmul@multiplier:	
   647                           ; 2 bytes @ 0x11
   648                           
   649                           
   650                           ; 2 bytes @ 0x11
   651  0031                     	ds	1
   652  0032                     _LCD_SendNb$310:	
   653                           
   654                           ; 2 bytes @ 0x12
   655  0032                     	ds	1
   656  0033                     ??___lwtoft:	
   657  0033                     ___wmul@multiplicand:	
   658                           ; 1 bytes @ 0x13
   659                           
   660                           
   661                           ; 2 bytes @ 0x13
   662  0033                     	ds	1
   663  0034                     ?___ftdiv:	
   664  0034                     ?___ftmul:	
   665                           ; 3 bytes @ 0x14
   666                           
   667  0034                     LCD_SendNb@NB:	
   668                           ; 3 bytes @ 0x14
   669                           
   670  0034                     ___ftdiv@f2:	
   671                           ; 1 bytes @ 0x14
   672                           
   673  0034                     ___ftmul@f1:	
   674                           ; 3 bytes @ 0x14
   675                           
   676                           
   677                           ; 3 bytes @ 0x14
   678  0034                     	ds	1
   679  0035                     ?_LCD_SendByte:	
   680  0035                     ??___wmul:	
   681                           ; 1 bytes @ 0x15
   682                           
   683  0035                     LCD_SendByte@byte:	
   684                           ; 1 bytes @ 0x15
   685                           
   686  0035                     ___wmul@product:	
   687                           ; 1 bytes @ 0x15
   688                           
   689                           
   690                           ; 2 bytes @ 0x15
   691  0035                     	ds	1
   692  0036                     ??_LCD_SendByte:	
   693                           
   694                           ; 1 bytes @ 0x16
   695  0036                     	ds	1
   696  0037                     ??_calculaVelocidade:	
   697  0037                     ___ftdiv@f1:	
   698                           ; 1 bytes @ 0x17
   699                           
   700  0037                     ___ftmul@f2:	
   701                           ; 3 bytes @ 0x17
   702                           
   703                           
   704                           ; 3 bytes @ 0x17
   705  0037                     	ds	2
   706  0039                     _calculaVelocidade$745:	
   707                           
   708                           ; 2 bytes @ 0x19
   709  0039                     	ds	1
   710  003A                     ??___ftdiv:	
   711  003A                     ??___ftmul:	
   712                           ; 1 bytes @ 0x1A
   713                           
   714  003A                     LCD_SendByte@reg:	
   715                           ; 1 bytes @ 0x1A
   716                           
   717                           
   718                           ; 1 bytes @ 0x1A
   719  003A                     	ds	1
   720  003B                     _LCD_SendByte$314:	
   721                           
   722                           ; 2 bytes @ 0x1B
   723  003B                     	ds	2
   724  003D                     ??_setupDisplay:	
   725  003D                     ?_setCursor:	
   726                           ; 1 bytes @ 0x1D
   727                           
   728  003D                     setCursor@coluna:	
   729                           ; 1 bytes @ 0x1D
   730                           
   731                           
   732                           ; 1 bytes @ 0x1D
   733  003D                     	ds	1
   734  003E                     ??_setCursor:	
   735  003E                     ___ftdiv@cntr:	
   736                           ; 1 bytes @ 0x1E
   737                           
   738  003E                     ___ftmul@exp:	
   739                           ; 1 bytes @ 0x1E
   740                           
   741                           
   742                           ; 1 bytes @ 0x1E
   743  003E                     	ds	1
   744  003F                     setCursor@linha:	
   745  003F                     ___ftdiv@f3:	
   746                           ; 1 bytes @ 0x1F
   747                           
   748  003F                     ___ftmul@f3_as_product:	
   749                           ; 3 bytes @ 0x1F
   750                           
   751                           
   752                           ; 3 bytes @ 0x1F
   753  003F                     	ds	1
   754  0040                     setCursor@aux:	
   755                           
   756                           ; 1 bytes @ 0x20
   757  0040                     	ds	1
   758  0041                     ?_LCD_sendString:	
   759  0041                     LCD_sendString@string:	
   760                           ; 1 bytes @ 0x21
   761                           
   762                           
   763                           ; 2 bytes @ 0x21
   764  0041                     	ds	1
   765  0042                     ___ftdiv@exp:	
   766  0042                     ___ftmul@cntr:	
   767                           ; 1 bytes @ 0x22
   768                           
   769                           
   770                           ; 1 bytes @ 0x22
   771  0042                     	ds	1
   772  0043                     LCD_sendString@linha:	
   773  0043                     ___ftdiv@sign:	
   774                           ; 1 bytes @ 0x23
   775                           
   776  0043                     ___ftmul@sign:	
   777                           ; 1 bytes @ 0x23
   778                           
   779                           
   780                           ; 1 bytes @ 0x23
   781  0043                     	ds	1
   782  0044                     ?___fttol:	
   783  0044                     LCD_sendString@coluna:	
   784                           ; 4 bytes @ 0x24
   785                           
   786  0044                     ___fttol@f1:	
   787                           ; 1 bytes @ 0x24
   788                           
   789                           
   790                           ; 3 bytes @ 0x24
   791  0044                     	ds	1
   792  0045                     ??_LCD_sendString:	
   793                           
   794                           ; 1 bytes @ 0x25
   795  0045                     	ds	1
   796  0046                     LCD_sendString@col:	
   797                           
   798                           ; 1 bytes @ 0x26
   799  0046                     	ds	1
   800  0047                     LCD_sendString@i:	
   801                           
   802                           ; 1 bytes @ 0x27
   803  0047                     	ds	1
   804  0048                     ??___fttol:	
   805  0048                     LCD_sendString@i_330:	
   806                           ; 1 bytes @ 0x28
   807                           
   808                           
   809                           ; 1 bytes @ 0x28
   810  0048                     	ds	4
   811  004C                     ___fttol@sign1:	
   812                           
   813                           ; 1 bytes @ 0x2C
   814  004C                     	ds	1
   815  004D                     ___fttol@lval:	
   816                           
   817                           ; 4 bytes @ 0x2D
   818  004D                     	ds	4
   819  0051                     ___fttol@exp1:	
   820                           
   821                           ; 1 bytes @ 0x31
   822  0051                     	ds	1
   823  0052                     ?_setPosicaoAtual:	
   824  0052                     ?_setPosicaoDesejada:	
   825                           ; 1 bytes @ 0x32
   826                           
   827  0052                     ?_getPosicaoAtual:	
   828                           ; 1 bytes @ 0x32
   829                           
   830  0052                     setPosicaoAtual@posicao_atual:	
   831                           ; 2 bytes @ 0x32
   832                           
   833  0052                     setPosicaoDesejada@posicao_desejada:	
   834                           ; 2 bytes @ 0x32
   835                           
   836                           
   837                           ; 2 bytes @ 0x32
   838  0052                     	ds	2
   839  0054                     ?_int2char:	
   840  0054                     ??_setPosicaoAtual:	
   841                           ; 1 bytes @ 0x34
   842                           
   843  0054                     ??_getPosicaoAtual:	
   844                           ; 1 bytes @ 0x34
   845                           
   846  0054                     ??_setPosicaoDesejada:	
   847                           ; 1 bytes @ 0x34
   848                           
   849  0054                     ??_setup:	
   850                           ; 1 bytes @ 0x34
   851                           
   852  0054                     int2char@int_value:	
   853                           ; 1 bytes @ 0x34
   854                           
   855                           
   856                           ; 2 bytes @ 0x34
   857  0054                     	ds	2
   858  0056                     ??_int2char:	
   859                           
   860                           ; 1 bytes @ 0x36
   861  0056                     	ds	4
   862                           
   863                           	psect	maintext
   864  004F                     __pmaintext:	
   865 ;;
   866 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   867 ;;
   868 ;; *************** function _main *****************
   869 ;; Defined at:
   870 ;;		line 62 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor-pic16f887\stepper_motor\
      +main.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;		None
   873 ;; Auto vars:     Size  Location     Type
   874 ;;		None
   875 ;; Return value:  Size  Location     Type
   876 ;;                  1    wreg      void 
   877 ;; Registers used:
   878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   879 ;; Tracked objects:
   880 ;;		On entry : B00/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   884 ;;      Params:         0       0       0       0       0
   885 ;;      Locals:         0       0       0       0       0
   886 ;;      Temps:          0       0       2       0       0
   887 ;;      Totals:         0       0       2       0       0
   888 ;;Total ram usage:        2 bytes
   889 ;; Hardware stack levels required when called:    7
   890 ;; This function calls:
   891 ;;		_LCD_sendString
   892 ;;		___ftmul
   893 ;;		___fttol
   894 ;;		___lwtoft
   895 ;;		_calculaVelocidade
   896 ;;		_getPosicaoAtual
   897 ;;		_getVelocidade
   898 ;;		_int2char
   899 ;;		_setPosicaoDesejada
   900 ;;		_setup
   901 ;; This function is called by:
   902 ;;		Startup code after reset
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906                           
   907                           ;psect for function _main
   908  004F                     _main:	
   909                           
   910                           ;main.c: 64: setup();
   911                           
   912                           ;incstack = 0
   913                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   914  004F  120A  158A  2614  120A  118A  	fcall	_setup
   915  0054                     l1825:	
   916                           ;main.c: 66: while(1){
   917                           
   918                           
   919                           ;main.c: 68: if(PORTDbits.RD4==1)
   920  0054  1283               	bcf	3,5	;RP0=0, select bank0
   921  0055  1303               	bcf	3,6	;RP1=0, select bank0
   922  0056  1E08               	btfss	8,4	;volatile
   923  0057  2860               	goto	l1829
   924                           
   925                           ;main.c: 69: setPosicaoDesejada(0);
   926  0058  3000               	movlw	0
   927  0059  00D2               	movwf	setPosicaoDesejada@posicao_desejada
   928  005A  00D3               	movwf	setPosicaoDesejada@posicao_desejada+1
   929  005B  120A  158A  26C3  120A  118A  	fcall	_setPosicaoDesejada
   930  0060                     l1829:	
   931                           
   932                           ;main.c: 70: if(PORTDbits.RD5==1)
   933  0060  1283               	bcf	3,5	;RP0=0, select bank0
   934  0061  1303               	bcf	3,6	;RP1=0, select bank0
   935  0062  1E88               	btfss	8,5	;volatile
   936  0063  286D               	goto	l1833
   937                           
   938                           ;main.c: 71: setPosicaoDesejada(90);
   939  0064  305A               	movlw	90
   940  0065  00D2               	movwf	setPosicaoDesejada@posicao_desejada
   941  0066  3000               	movlw	0
   942  0067  00D3               	movwf	setPosicaoDesejada@posicao_desejada+1
   943  0068  120A  158A  26C3  120A  118A  	fcall	_setPosicaoDesejada
   944  006D                     l1833:	
   945                           
   946                           ;main.c: 72: if(PORTDbits.RD6==1)
   947  006D  1283               	bcf	3,5	;RP0=0, select bank0
   948  006E  1303               	bcf	3,6	;RP1=0, select bank0
   949  006F  1F08               	btfss	8,6	;volatile
   950  0070  287A               	goto	l144
   951                           
   952                           ;main.c: 73: setPosicaoDesejada(180);
   953  0071  30B4               	movlw	180
   954  0072  00D2               	movwf	setPosicaoDesejada@posicao_desejada
   955  0073  3000               	movlw	0
   956  0074  00D3               	movwf	setPosicaoDesejada@posicao_desejada+1
   957  0075  120A  158A  26C3  120A  118A  	fcall	_setPosicaoDesejada
   958  007A                     l144:	
   959                           
   960                           ;main.c: 75: calculaVelocidade();
   961  007A  120A  158A  2761  120A  118A  	fcall	_calculaVelocidade
   962                           
   963                           ;main.c: 77: LCD_sendString("PF:", 1, 1);
   964  007F  300A               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   965  0080  1283               	bcf	3,5	;RP0=0, select bank0
   966  0081  1303               	bcf	3,6	;RP1=0, select bank0
   967  0082  00C1               	movwf	LCD_sendString@string
   968  0083  3080               	movlw	128
   969  0084  00C2               	movwf	LCD_sendString@string+1
   970  0085  01C3               	clrf	LCD_sendString@linha
   971  0086  0AC3               	incf	LCD_sendString@linha,f
   972  0087  01C4               	clrf	LCD_sendString@coluna
   973  0088  0AC4               	incf	LCD_sendString@coluna,f
   974  0089  120A  118A  26F0  120A  118A  	fcall	_LCD_sendString
   975                           
   976                           ;main.c: 78: int2char(setpoint*(5.625/32));
   977  008E  1283               	bcf	3,5	;RP0=0, select bank0
   978  008F  1303               	bcf	3,6	;RP1=0, select bank0
   979  0090  085F               	movf	_setpoint+1,w
   980  0091  00B1               	movwf	___lwtoft@c+1
   981  0092  085E               	movf	_setpoint,w
   982  0093  00B0               	movwf	___lwtoft@c
   983  0094  120A  158A  263D  120A  118A  	fcall	___lwtoft
   984  0099  1283               	bcf	3,5	;RP0=0, select bank0
   985  009A  1303               	bcf	3,6	;RP1=0, select bank0
   986  009B  0830               	movf	?___lwtoft,w
   987  009C  00B7               	movwf	___ftmul@f2
   988  009D  0831               	movf	?___lwtoft+1,w
   989  009E  00B8               	movwf	___ftmul@f2+1
   990  009F  0832               	movf	?___lwtoft+2,w
   991  00A0  00B9               	movwf	___ftmul@f2+2
   992  00A1  3000               	movlw	0
   993  00A2  00B4               	movwf	___ftmul@f1
   994  00A3  3034               	movlw	52
   995  00A4  00B5               	movwf	___ftmul@f1+1
   996  00A5  303E               	movlw	62
   997  00A6  00B6               	movwf	___ftmul@f1+2
   998  00A7  120A  118A  2335  120A  118A  	fcall	___ftmul
   999  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  1000  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  1001  00AE  0834               	movf	?___ftmul,w
  1002  00AF  00C4               	movwf	___fttol@f1
  1003  00B0  0835               	movf	?___ftmul+1,w
  1004  00B1  00C5               	movwf	___fttol@f1+1
  1005  00B2  0836               	movf	?___ftmul+2,w
  1006  00B3  00C6               	movwf	___fttol@f1+2
  1007  00B4  120A  118A  2581  120A  118A  	fcall	___fttol
  1008  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  1009  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  1010  00BB  0845               	movf	?___fttol+1,w
  1011  00BC  00D5               	movwf	int2char@int_value+1
  1012  00BD  0844               	movf	?___fttol,w
  1013  00BE  00D4               	movwf	int2char@int_value
  1014  00BF  120A  118A  2408  120A  118A  	fcall	_int2char
  1015                           
  1016                           ;main.c: 79: LCD_sendString(c_int_value, 1, 4);
  1017  00C4  3062               	movlw	(low (_c_int_value| 0))& (0+255)
  1018  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  1019  00C6  1303               	bcf	3,6	;RP1=0, select bank0
  1020  00C7  00C1               	movwf	LCD_sendString@string
  1021  00C8  3000               	movlw	0
  1022  00C9  00C2               	movwf	LCD_sendString@string+1
  1023  00CA  01C3               	clrf	LCD_sendString@linha
  1024  00CB  0AC3               	incf	LCD_sendString@linha,f
  1025  00CC  3004               	movlw	4
  1026  00CD  1683               	bsf	3,5	;RP0=1, select bank1
  1027  00CE  1303               	bcf	3,6	;RP1=0, select bank1
  1028  00CF  00A6               	movwf	??_main^(0+128)
  1029  00D0  0826               	movf	??_main^(0+128),w
  1030  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  1031  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  1032  00D3  00C4               	movwf	LCD_sendString@coluna
  1033  00D4  120A  118A  26F0  120A  118A  	fcall	_LCD_sendString
  1034                           
  1035                           ;main.c: 80: LCD_sendString("PA:", 1, 9);
  1036  00D9  3006               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1037  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  1038  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  1039  00DC  00C1               	movwf	LCD_sendString@string
  1040  00DD  3080               	movlw	128
  1041  00DE  00C2               	movwf	LCD_sendString@string+1
  1042  00DF  01C3               	clrf	LCD_sendString@linha
  1043  00E0  0AC3               	incf	LCD_sendString@linha,f
  1044  00E1  3009               	movlw	9
  1045  00E2  1683               	bsf	3,5	;RP0=1, select bank1
  1046  00E3  1303               	bcf	3,6	;RP1=0, select bank1
  1047  00E4  00A6               	movwf	??_main^(0+128)
  1048  00E5  0826               	movf	??_main^(0+128),w
  1049  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  1050  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  1051  00E8  00C4               	movwf	LCD_sendString@coluna
  1052  00E9  120A  118A  26F0  120A  118A  	fcall	_LCD_sendString
  1053                           
  1054                           ;main.c: 81: int2char(getPosicaoAtual());
  1055  00EE  120A  158A  2693  120A  118A  	fcall	_getPosicaoAtual
  1056  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1057  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1058  00F5  0853               	movf	?_getPosicaoAtual+1,w
  1059  00F6  00D5               	movwf	int2char@int_value+1
  1060  00F7  0852               	movf	?_getPosicaoAtual,w
  1061  00F8  00D4               	movwf	int2char@int_value
  1062  00F9  120A  118A  2408  120A  118A  	fcall	_int2char
  1063                           
  1064                           ;main.c: 82: LCD_sendString(c_int_value, 1,12);
  1065  00FE  3062               	movlw	(low (_c_int_value| 0))& (0+255)
  1066  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  1067  0100  1303               	bcf	3,6	;RP1=0, select bank0
  1068  0101  00C1               	movwf	LCD_sendString@string
  1069  0102  3000               	movlw	0
  1070  0103  00C2               	movwf	LCD_sendString@string+1
  1071  0104  01C3               	clrf	LCD_sendString@linha
  1072  0105  0AC3               	incf	LCD_sendString@linha,f
  1073  0106  300C               	movlw	12
  1074  0107  1683               	bsf	3,5	;RP0=1, select bank1
  1075  0108  1303               	bcf	3,6	;RP1=0, select bank1
  1076  0109  00A6               	movwf	??_main^(0+128)
  1077  010A  0826               	movf	??_main^(0+128),w
  1078  010B  1283               	bcf	3,5	;RP0=0, select bank0
  1079  010C  1303               	bcf	3,6	;RP1=0, select bank0
  1080  010D  00C4               	movwf	LCD_sendString@coluna
  1081  010E  120A  118A  26F0  120A  118A  	fcall	_LCD_sendString
  1082                           
  1083                           ;main.c: 83: LCD_sendString("Vel:", 2, 6);
  1084  0113  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1085  0114  1283               	bcf	3,5	;RP0=0, select bank0
  1086  0115  1303               	bcf	3,6	;RP1=0, select bank0
  1087  0116  00C1               	movwf	LCD_sendString@string
  1088  0117  3080               	movlw	128
  1089  0118  00C2               	movwf	LCD_sendString@string+1
  1090  0119  3002               	movlw	2
  1091  011A  1683               	bsf	3,5	;RP0=1, select bank1
  1092  011B  1303               	bcf	3,6	;RP1=0, select bank1
  1093  011C  00A6               	movwf	??_main^(0+128)
  1094  011D  0826               	movf	??_main^(0+128),w
  1095  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1096  011F  1303               	bcf	3,6	;RP1=0, select bank0
  1097  0120  00C3               	movwf	LCD_sendString@linha
  1098  0121  3006               	movlw	6
  1099  0122  1683               	bsf	3,5	;RP0=1, select bank1
  1100  0123  1303               	bcf	3,6	;RP1=0, select bank1
  1101  0124  00A7               	movwf	(??_main+1)^(0+128)
  1102  0125  0827               	movf	(??_main+1)^(0+128),w
  1103  0126  1283               	bcf	3,5	;RP0=0, select bank0
  1104  0127  1303               	bcf	3,6	;RP1=0, select bank0
  1105  0128  00C4               	movwf	LCD_sendString@coluna
  1106  0129  120A  118A  26F0  120A  118A  	fcall	_LCD_sendString
  1107                           
  1108                           ;main.c: 84: int2char(getVelocidade());
  1109  012E  120A  158A  25F9  120A  118A  	fcall	_getVelocidade
  1110  0133  1283               	bcf	3,5	;RP0=0, select bank0
  1111  0134  1303               	bcf	3,6	;RP1=0, select bank0
  1112  0135  0829               	movf	?_getVelocidade+1,w
  1113  0136  00D5               	movwf	int2char@int_value+1
  1114  0137  0828               	movf	?_getVelocidade,w
  1115  0138  00D4               	movwf	int2char@int_value
  1116  0139  120A  118A  2408  120A  118A  	fcall	_int2char
  1117                           
  1118                           ;main.c: 85: LCD_sendString(c_int_value,2,10);
  1119  013E  3062               	movlw	(low (_c_int_value| 0))& (0+255)
  1120  013F  1283               	bcf	3,5	;RP0=0, select bank0
  1121  0140  1303               	bcf	3,6	;RP1=0, select bank0
  1122  0141  00C1               	movwf	LCD_sendString@string
  1123  0142  3000               	movlw	0
  1124  0143  00C2               	movwf	LCD_sendString@string+1
  1125  0144  3002               	movlw	2
  1126  0145  1683               	bsf	3,5	;RP0=1, select bank1
  1127  0146  1303               	bcf	3,6	;RP1=0, select bank1
  1128  0147  00A6               	movwf	??_main^(0+128)
  1129  0148  0826               	movf	??_main^(0+128),w
  1130  0149  1283               	bcf	3,5	;RP0=0, select bank0
  1131  014A  1303               	bcf	3,6	;RP1=0, select bank0
  1132  014B  00C3               	movwf	LCD_sendString@linha
  1133  014C  300A               	movlw	10
  1134  014D  1683               	bsf	3,5	;RP0=1, select bank1
  1135  014E  1303               	bcf	3,6	;RP1=0, select bank1
  1136  014F  00A7               	movwf	(??_main+1)^(0+128)
  1137  0150  0827               	movf	(??_main+1)^(0+128),w
  1138  0151  1283               	bcf	3,5	;RP0=0, select bank0
  1139  0152  1303               	bcf	3,6	;RP1=0, select bank0
  1140  0153  00C4               	movwf	LCD_sendString@coluna
  1141  0154  120A  118A  26F0  120A  118A  	fcall	_LCD_sendString
  1142  0159  2854               	goto	l1825
  1143  015A                     __end_of_main:	
  1144                           
  1145                           	psect	text1
  1146  0E14                     __ptext1:	
  1147 ;; *************** function _setup *****************
  1148 ;; Defined at:
  1149 ;;		line 53 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor-pic16f887\stepper_motor\
      +main.c"
  1150 ;; Parameters:    Size  Location     Type
  1151 ;;		None
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;		None
  1154 ;; Return value:  Size  Location     Type
  1155 ;;                  1    wreg      void 
  1156 ;; Registers used:
  1157 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1163 ;;      Params:         0       0       0       0       0
  1164 ;;      Locals:         0       0       0       0       0
  1165 ;;      Temps:          0       0       0       0       0
  1166 ;;      Totals:         0       0       0       0       0
  1167 ;;Total ram usage:        0 bytes
  1168 ;; Hardware stack levels used:    1
  1169 ;; Hardware stack levels required when called:    6
  1170 ;; This function calls:
  1171 ;;		_setPosicaoAtual
  1172 ;;		_setupDisplay
  1173 ;;		_setupStepper
  1174 ;; This function is called by:
  1175 ;;		_main
  1176 ;; This function uses a non-reentrant model
  1177 ;;
  1178                           
  1179                           
  1180                           ;psect for function _setup
  1181  0E14                     _setup:	
  1182                           
  1183                           ;main.c: 55: setupDisplay();
  1184                           
  1185                           ;incstack = 0
  1186                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1187  0E14  120A  118A  260F  120A  158A  	fcall	_setupDisplay
  1188                           
  1189                           ;main.c: 57: setupStepper();
  1190  0E19  120A  158A  2627  120A  158A  	fcall	_setupStepper
  1191                           
  1192                           ;main.c: 58: setPosicaoAtual(0);
  1193  0E1E  3000               	movlw	0
  1194  0E1F  1283               	bcf	3,5	;RP0=0, select bank0
  1195  0E20  1303               	bcf	3,6	;RP1=0, select bank0
  1196  0E21  00D2               	movwf	setPosicaoAtual@posicao_atual
  1197  0E22  00D3               	movwf	setPosicaoAtual@posicao_atual+1
  1198  0E23  120A  158A  26F3   	fcall	_setPosicaoAtual
  1199  0E26  0008               	return
  1200  0E27                     __end_of_setup:	
  1201                           
  1202                           	psect	text2
  1203  0E27                     __ptext2:	
  1204 ;; *************** function _setupStepper *****************
  1205 ;; Defined at:
  1206 ;;		line 6 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor-pic16f887\stepper_motor\s
      +tepper.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;		None
  1209 ;; Auto vars:     Size  Location     Type
  1210 ;;		None
  1211 ;; Return value:  Size  Location     Type
  1212 ;;                  1    wreg      void 
  1213 ;; Registers used:
  1214 ;;		wreg, status,2
  1215 ;; Tracked objects:
  1216 ;;		On entry : 0/0
  1217 ;;		On exit  : 0/0
  1218 ;;		Unchanged: 0/0
  1219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1220 ;;      Params:         0       0       0       0       0
  1221 ;;      Locals:         0       0       0       0       0
  1222 ;;      Temps:          0       0       0       0       0
  1223 ;;      Totals:         0       0       0       0       0
  1224 ;;Total ram usage:        0 bytes
  1225 ;; Hardware stack levels used:    1
  1226 ;; Hardware stack levels required when called:    3
  1227 ;; This function calls:
  1228 ;;		Nothing
  1229 ;; This function is called by:
  1230 ;;		_setup
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           
  1235                           ;psect for function _setupStepper
  1236  0E27                     _setupStepper:	
  1237                           
  1238                           ;stepper.c: 8: TRISD = 0b11110000;
  1239                           
  1240                           ;incstack = 0
  1241                           ; Regs used in _setupStepper: [wreg+status,2]
  1242  0E27  30F0               	movlw	240
  1243  0E28  1683               	bsf	3,5	;RP0=1, select bank1
  1244  0E29  1303               	bcf	3,6	;RP1=0, select bank1
  1245  0E2A  0088               	movwf	8	;volatile
  1246                           
  1247                           ;stepper.c: 9: PORTD = 0;
  1248  0E2B  1283               	bcf	3,5	;RP0=0, select bank0
  1249  0E2C  1303               	bcf	3,6	;RP1=0, select bank0
  1250  0E2D  0188               	clrf	8	;volatile
  1251                           
  1252                           ;stepper.c: 11: INTCONbits.GIE = 1;
  1253  0E2E  178B               	bsf	11,7	;volatile
  1254                           
  1255                           ;stepper.c: 12: INTCONbits.PEIE = 1;
  1256  0E2F  170B               	bsf	11,6	;volatile
  1257                           
  1258                           ;stepper.c: 14: PIE1bits.TMR2IE = 1;
  1259  0E30  1683               	bsf	3,5	;RP0=1, select bank1
  1260  0E31  1303               	bcf	3,6	;RP1=0, select bank1
  1261  0E32  148C               	bsf	12,1	;volatile
  1262                           
  1263                           ;stepper.c: 15: PIR1bits.TMR2IF = 0;
  1264  0E33  1283               	bcf	3,5	;RP0=0, select bank0
  1265  0E34  1303               	bcf	3,6	;RP1=0, select bank0
  1266  0E35  108C               	bcf	12,1	;volatile
  1267                           
  1268                           ;stepper.c: 16: T2CON = 0b01111110;
  1269  0E36  307E               	movlw	126
  1270  0E37  0092               	movwf	18	;volatile
  1271                           
  1272                           ;stepper.c: 17: PR2=255;
  1273  0E38  30FF               	movlw	255
  1274  0E39  1683               	bsf	3,5	;RP0=1, select bank1
  1275  0E3A  1303               	bcf	3,6	;RP1=0, select bank1
  1276  0E3B  0092               	movwf	18	;volatile
  1277  0E3C  0008               	return
  1278  0E3D                     __end_of_setupStepper:	
  1279                           
  1280                           	psect	text3
  1281  060F                     __ptext3:	
  1282 ;; *************** function _setupDisplay *****************
  1283 ;; Defined at:
  1284 ;;		line 25 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor-pic16f887\stepper_motor\
      +lcd.c"
  1285 ;; Parameters:    Size  Location     Type
  1286 ;;		None
  1287 ;; Auto vars:     Size  Location     Type
  1288 ;;		None
  1289 ;; Return value:  Size  Location     Type
  1290 ;;                  1    wreg      void 
  1291 ;; Registers used:
  1292 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1293 ;; Tracked objects:
  1294 ;;		On entry : 0/0
  1295 ;;		On exit  : 0/0
  1296 ;;		Unchanged: 0/0
  1297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1298 ;;      Params:         0       0       0       0       0
  1299 ;;      Locals:         0       0       0       0       0
  1300 ;;      Temps:          0       2       0       0       0
  1301 ;;      Totals:         0       2       0       0       0
  1302 ;;Total ram usage:        2 bytes
  1303 ;; Hardware stack levels used:    1
  1304 ;; Hardware stack levels required when called:    5
  1305 ;; This function calls:
  1306 ;;		_LCD_SendByte
  1307 ;;		_LCD_SendNb
  1308 ;; This function is called by:
  1309 ;;		_setup
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312                           
  1313                           
  1314                           ;psect for function _setupDisplay
  1315  060F                     _setupDisplay:	
  1316                           
  1317                           ;lcd.c: 27: PORTB = 0x00;
  1318                           
  1319                           ;incstack = 0
  1320                           ; Regs used in _setupDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1321  060F  1283               	bcf	3,5	;RP0=0, select bank0
  1322  0610  1303               	bcf	3,6	;RP1=0, select bank0
  1323  0611  0186               	clrf	6	;volatile
  1324                           
  1325                           ;lcd.c: 28: TRISB = 0x00;
  1326  0612  1683               	bsf	3,5	;RP0=1, select bank1
  1327  0613  1303               	bcf	3,6	;RP1=0, select bank1
  1328  0614  0186               	clrf	6	;volatile
  1329                           
  1330                           ;lcd.c: 29: ANSELH = 0x00;
  1331  0615  1683               	bsf	3,5	;RP0=1, select bank3
  1332  0616  1703               	bsf	3,6	;RP1=1, select bank3
  1333  0617  0189               	clrf	9	;volatile
  1334                           
  1335                           ;lcd.c: 30: *LCD_TRIS = 0x00;
  1336  0618  1683               	bsf	3,5	;RP0=1, select bank1
  1337  0619  1303               	bcf	3,6	;RP1=0, select bank1
  1338  061A  082A               	movf	_LCD_TRIS^(0+128),w
  1339  061B  0084               	movwf	4
  1340  061C  1783               	bsf	3,7
  1341  061D  1C2B               	btfss	(_LCD_TRIS+1)^(0+128),0
  1342  061E  1383               	bcf	3,7
  1343  061F  0180               	clrf	0
  1344  0620  0A84               	incf	4,f
  1345  0621  0180               	clrf	0
  1346                           
  1347                           ;lcd.c: 31: *LCD_PORT = 0x00;
  1348  0622  1283               	bcf	3,5	;RP0=0, select bank0
  1349  0623  1303               	bcf	3,6	;RP1=0, select bank0
  1350  0624  0866               	movf	_LCD_PORT,w
  1351  0625  0084               	movwf	4
  1352  0626  1783               	bsf	3,7
  1353  0627  1C67               	btfss	_LCD_PORT+1,0
  1354  0628  1383               	bcf	3,7
  1355  0629  0180               	clrf	0
  1356  062A  0A84               	incf	4,f
  1357  062B  0180               	clrf	0
  1358                           
  1359                           ;lcd.c: 32: _delay((unsigned long)((50)*(4000000/4000.0)));
  1360  062C  3041               	movlw	65
  1361  062D  1283               	bcf	3,5	;RP0=0, select bank0
  1362  062E  1303               	bcf	3,6	;RP1=0, select bank0
  1363  062F  00BE               	movwf	??_setupDisplay+1
  1364  0630  30ED               	movlw	237
  1365  0631  00BD               	movwf	??_setupDisplay
  1366  0632                     u2247:	
  1367  0632  0BBD               	decfsz	??_setupDisplay,f
  1368  0633  2E32               	goto	u2247
  1369  0634  0BBE               	decfsz	??_setupDisplay+1,f
  1370  0635  2E32               	goto	u2247
  1371  0636  2E37               	nop2
  1372                           
  1373                           ;lcd.c: 35: LCD_SendNb(LCD_Entrada );
  1374  0637  1283               	bcf	3,5	;RP0=0, select bank0
  1375  0638  1303               	bcf	3,6	;RP1=0, select bank0
  1376  0639  0865               	movf	_LCD_Entrada,w
  1377  063A  120A  118A  215A  120A  118A  	fcall	_LCD_SendNb
  1378                           
  1379                           ;lcd.c: 36: LCD_SendNb(LCD_Entrada );
  1380  063F  1283               	bcf	3,5	;RP0=0, select bank0
  1381  0640  1303               	bcf	3,6	;RP1=0, select bank0
  1382  0641  0865               	movf	_LCD_Entrada,w
  1383  0642  120A  118A  215A  120A  118A  	fcall	_LCD_SendNb
  1384                           
  1385                           ;lcd.c: 37: LCD_SendNb(LCD_Entrada );
  1386  0647  1283               	bcf	3,5	;RP0=0, select bank0
  1387  0648  1303               	bcf	3,6	;RP1=0, select bank0
  1388  0649  0865               	movf	_LCD_Entrada,w
  1389  064A  120A  118A  215A  120A  118A  	fcall	_LCD_SendNb
  1390                           
  1391                           ;lcd.c: 38: LCD_SendNb(0x02);
  1392  064F  3002               	movlw	2
  1393  0650  120A  118A  215A  120A  118A  	fcall	_LCD_SendNb
  1394                           
  1395                           ;lcd.c: 39: LCD_SendByte(0, 0x38);
  1396  0655  3038               	movlw	56
  1397  0656  1283               	bcf	3,5	;RP0=0, select bank0
  1398  0657  1303               	bcf	3,6	;RP1=0, select bank0
  1399  0658  00BD               	movwf	??_setupDisplay
  1400  0659  083D               	movf	??_setupDisplay,w
  1401  065A  00B5               	movwf	LCD_SendByte@byte
  1402  065B  3000               	movlw	0
  1403  065C  120A  118A  27B5  120A  118A  	fcall	_LCD_SendByte
  1404                           
  1405                           ;lcd.c: 40: LCD_SendByte(0, LCD_Controle);
  1406  0661  1283               	bcf	3,5	;RP0=0, select bank0
  1407  0662  1303               	bcf	3,6	;RP1=0, select bank0
  1408  0663  0864               	movf	_LCD_Controle,w
  1409  0664  00BD               	movwf	??_setupDisplay
  1410  0665  083D               	movf	??_setupDisplay,w
  1411  0666  00B5               	movwf	LCD_SendByte@byte
  1412  0667  3000               	movlw	0
  1413  0668  120A  118A  27B5  120A  118A  	fcall	_LCD_SendByte
  1414                           
  1415                           ;lcd.c: 41: LCD_SendByte(0, 0x01);
  1416  066D  1283               	bcf	3,5	;RP0=0, select bank0
  1417  066E  1303               	bcf	3,6	;RP1=0, select bank0
  1418  066F  01B5               	clrf	LCD_SendByte@byte
  1419  0670  0AB5               	incf	LCD_SendByte@byte,f
  1420  0671  3000               	movlw	0
  1421  0672  120A  118A  27B5  120A  118A  	fcall	_LCD_SendByte
  1422                           
  1423                           ;lcd.c: 42: LCD_SendByte(0, LCD_Entrada);
  1424  0677  1283               	bcf	3,5	;RP0=0, select bank0
  1425  0678  1303               	bcf	3,6	;RP1=0, select bank0
  1426  0679  0865               	movf	_LCD_Entrada,w
  1427  067A  00BD               	movwf	??_setupDisplay
  1428  067B  083D               	movf	??_setupDisplay,w
  1429  067C  00B5               	movwf	LCD_SendByte@byte
  1430  067D  3000               	movlw	0
  1431  067E  120A  118A  27B5   	fcall	_LCD_SendByte
  1432  0681  0008               	return
  1433  0682                     __end_of_setupDisplay:	
  1434                           
  1435                           	psect	text4
  1436  0EF3                     __ptext4:	
  1437 ;; *************** function _setPosicaoAtual *****************
  1438 ;; Defined at:
  1439 ;;		line 20 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor-pic16f887\stepper_motor\
      +stepper.c"
  1440 ;; Parameters:    Size  Location     Type
  1441 ;;  posicao_atua    2   50[BANK0 ] unsigned int 
  1442 ;; Auto vars:     Size  Location     Type
  1443 ;;		None
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  1    wreg      void 
  1446 ;; Registers used:
  1447 ;;		wreg, status,2, status,0, pclath, cstack
  1448 ;; Tracked objects:
  1449 ;;		On entry : 0/0
  1450 ;;		On exit  : 0/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1453 ;;      Params:         0       2       0       0       0
  1454 ;;      Locals:         0       0       0       0       0
  1455 ;;      Temps:          0       0       0       0       0
  1456 ;;      Totals:         0       2       0       0       0
  1457 ;;Total ram usage:        2 bytes
  1458 ;; Hardware stack levels used:    1
  1459 ;; Hardware stack levels required when called:    5
  1460 ;; This function calls:
  1461 ;;		___ftdiv
  1462 ;;		___fttol
  1463 ;;		___lwtoft
  1464 ;; This function is called by:
  1465 ;;		_setup
  1466 ;; This function uses a non-reentrant model
  1467 ;;
  1468                           
  1469                           
  1470                           ;psect for function _setPosicaoAtual
  1471  0EF3                     _setPosicaoAtual:	
  1472                           
  1473                           ;stepper.c: 21: position = posicao_atual/(5.625/32);
  1474                           
  1475                           ;incstack = 0
  1476                           ; Regs used in _setPosicaoAtual: [wreg+status,2+status,0+pclath+cstack]
  1477  0EF3  1283               	bcf	3,5	;RP0=0, select bank0
  1478  0EF4  1303               	bcf	3,6	;RP1=0, select bank0
  1479  0EF5  0853               	movf	setPosicaoAtual@posicao_atual+1,w
  1480  0EF6  00B1               	movwf	___lwtoft@c+1
  1481  0EF7  0852               	movf	setPosicaoAtual@posicao_atual,w
  1482  0EF8  00B0               	movwf	___lwtoft@c
  1483  0EF9  120A  158A  263D  120A  158A  	fcall	___lwtoft
  1484  0EFE  1283               	bcf	3,5	;RP0=0, select bank0
  1485  0EFF  1303               	bcf	3,6	;RP1=0, select bank0
  1486  0F00  0830               	movf	?___lwtoft,w
  1487  0F01  00B7               	movwf	___ftdiv@f1
  1488  0F02  0831               	movf	?___lwtoft+1,w
  1489  0F03  00B8               	movwf	___ftdiv@f1+1
  1490  0F04  0832               	movf	?___lwtoft+2,w
  1491  0F05  00B9               	movwf	___ftdiv@f1+2
  1492  0F06  3000               	movlw	0
  1493  0F07  00B4               	movwf	___ftdiv@f2
  1494  0F08  3034               	movlw	52
  1495  0F09  00B5               	movwf	___ftdiv@f2+1
  1496  0F0A  303E               	movlw	62
  1497  0F0B  00B6               	movwf	___ftdiv@f2+2
  1498  0F0C  120A  118A  24C9  120A  158A  	fcall	___ftdiv
  1499  0F11  1283               	bcf	3,5	;RP0=0, select bank0
  1500  0F12  1303               	bcf	3,6	;RP1=0, select bank0
  1501  0F13  0834               	movf	?___ftdiv,w
  1502  0F14  00C4               	movwf	___fttol@f1
  1503  0F15  0835               	movf	?___ftdiv+1,w
  1504  0F16  00C5               	movwf	___fttol@f1+1
  1505  0F17  0836               	movf	?___ftdiv+2,w
  1506  0F18  00C6               	movwf	___fttol@f1+2
  1507  0F19  120A  118A  2581   	fcall	___fttol
  1508  0F1C  1283               	bcf	3,5	;RP0=0, select bank0
  1509  0F1D  1303               	bcf	3,6	;RP1=0, select bank0
  1510  0F1E  0845               	movf	?___fttol+1,w
  1511  0F1F  00DD               	movwf	_position+1
  1512  0F20  0844               	movf	?___fttol,w
  1513  0F21  00DC               	movwf	_position
  1514  0F22  0008               	return
  1515  0F23                     __end_of_setPosicaoAtual:	
  1516                           
  1517                           	psect	text5
  1518  0EC3                     __ptext5:	
  1519 ;; *************** function _setPosicaoDesejada *****************
  1520 ;; Defined at:
  1521 ;;		line 28 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor-pic16f887\stepper_motor\
      +stepper.c"
  1522 ;; Parameters:    Size  Location     Type
  1523 ;;  posicao_dese    2   50[BANK0 ] unsigned int 
  1524 ;; Auto vars:     Size  Location     Type
  1525 ;;		None
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  1    wreg      void 
  1528 ;; Registers used:
  1529 ;;		wreg, status,2, status,0, pclath, cstack
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1535 ;;      Params:         0       2       0       0       0
  1536 ;;      Locals:         0       0       0       0       0
  1537 ;;      Temps:          0       0       0       0       0
  1538 ;;      Totals:         0       2       0       0       0
  1539 ;;Total ram usage:        2 bytes
  1540 ;; Hardware stack levels used:    1
  1541 ;; Hardware stack levels required when called:    5
  1542 ;; This function calls:
  1543 ;;		___ftdiv
  1544 ;;		___fttol
  1545 ;;		___lwtoft
  1546 ;; This function is called by:
  1547 ;;		_main
  1548 ;; This function uses a non-reentrant model
  1549 ;;
  1550                           
  1551                           
  1552                           ;psect for function _setPosicaoDesejada
  1553  0EC3                     _setPosicaoDesejada:	
  1554                           
  1555                           ;stepper.c: 29: setpoint = posicao_desejada/(5.625/32);
  1556                           
  1557                           ;incstack = 0
  1558                           ; Regs used in _setPosicaoDesejada: [wreg+status,2+status,0+pclath+cstack]
  1559  0EC3  1283               	bcf	3,5	;RP0=0, select bank0
  1560  0EC4  1303               	bcf	3,6	;RP1=0, select bank0
  1561  0EC5  0853               	movf	setPosicaoDesejada@posicao_desejada+1,w
  1562  0EC6  00B1               	movwf	___lwtoft@c+1
  1563  0EC7  0852               	movf	setPosicaoDesejada@posicao_desejada,w
  1564  0EC8  00B0               	movwf	___lwtoft@c
  1565  0EC9  120A  158A  263D  120A  158A  	fcall	___lwtoft
  1566  0ECE  1283               	bcf	3,5	;RP0=0, select bank0
  1567  0ECF  1303               	bcf	3,6	;RP1=0, select bank0
  1568  0ED0  0830               	movf	?___lwtoft,w
  1569  0ED1  00B7               	movwf	___ftdiv@f1
  1570  0ED2  0831               	movf	?___lwtoft+1,w
  1571  0ED3  00B8               	movwf	___ftdiv@f1+1
  1572  0ED4  0832               	movf	?___lwtoft+2,w
  1573  0ED5  00B9               	movwf	___ftdiv@f1+2
  1574  0ED6  3000               	movlw	0
  1575  0ED7  00B4               	movwf	___ftdiv@f2
  1576  0ED8  3034               	movlw	52
  1577  0ED9  00B5               	movwf	___ftdiv@f2+1
  1578  0EDA  303E               	movlw	62
  1579  0EDB  00B6               	movwf	___ftdiv@f2+2
  1580  0EDC  120A  118A  24C9  120A  158A  	fcall	___ftdiv
  1581  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
  1582  0EE2  1303               	bcf	3,6	;RP1=0, select bank0
  1583  0EE3  0834               	movf	?___ftdiv,w
  1584  0EE4  00C4               	movwf	___fttol@f1
  1585  0EE5  0835               	movf	?___ftdiv+1,w
  1586  0EE6  00C5               	movwf	___fttol@f1+1
  1587  0EE7  0836               	movf	?___ftdiv+2,w
  1588  0EE8  00C6               	movwf	___fttol@f1+2
  1589  0EE9  120A  118A  2581   	fcall	___fttol
  1590  0EEC  1283               	bcf	3,5	;RP0=0, select bank0
  1591  0EED  1303               	bcf	3,6	;RP1=0, select bank0
  1592  0EEE  0845               	movf	?___fttol+1,w
  1593  0EEF  00DF               	movwf	_setpoint+1
  1594  0EF0  0844               	movf	?___fttol,w
  1595  0EF1  00DE               	movwf	_setpoint
  1596  0EF2  0008               	return
  1597  0EF3                     __end_of_setPosicaoDesejada:	
  1598                           
  1599                           	psect	text6
  1600  04C9                     __ptext6:	
  1601 ;; *************** function ___ftdiv *****************
  1602 ;; Defined at:
  1603 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;  f2              3   20[BANK0 ] float 
  1606 ;;  f1              3   23[BANK0 ] float 
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;  f3              3   31[BANK0 ] float 
  1609 ;;  sign            1   35[BANK0 ] unsigned char 
  1610 ;;  exp             1   34[BANK0 ] unsigned char 
  1611 ;;  cntr            1   30[BANK0 ] unsigned char 
  1612 ;; Return value:  Size  Location     Type
  1613 ;;                  3   20[BANK0 ] float 
  1614 ;; Registers used:
  1615 ;;		wreg, status,2, status,0, pclath, cstack
  1616 ;; Tracked objects:
  1617 ;;		On entry : 0/0
  1618 ;;		On exit  : 0/0
  1619 ;;		Unchanged: 0/0
  1620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1621 ;;      Params:         0       6       0       0       0
  1622 ;;      Locals:         0       6       0       0       0
  1623 ;;      Temps:          0       4       0       0       0
  1624 ;;      Totals:         0      16       0       0       0
  1625 ;;Total ram usage:       16 bytes
  1626 ;; Hardware stack levels used:    1
  1627 ;; Hardware stack levels required when called:    4
  1628 ;; This function calls:
  1629 ;;		___ftpack
  1630 ;; This function is called by:
  1631 ;;		_setPosicaoAtual
  1632 ;;		_setPosicaoDesejada
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           
  1637                           ;psect for function ___ftdiv
  1638  04C9                     ___ftdiv:	
  1639                           
  1640                           ;incstack = 0
  1641                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1642  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  1643  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  1644  04CB  0837               	movf	___ftdiv@f1,w
  1645  04CC  00BA               	movwf	??___ftdiv
  1646  04CD  0838               	movf	___ftdiv@f1+1,w
  1647  04CE  00BB               	movwf	??___ftdiv+1
  1648  04CF  0839               	movf	___ftdiv@f1+2,w
  1649  04D0  00BC               	movwf	??___ftdiv+2
  1650  04D1  1003               	clrc
  1651  04D2  0D3B               	rlf	??___ftdiv+1,w
  1652  04D3  0D3C               	rlf	??___ftdiv+2,w
  1653  04D4  00BD               	movwf	??___ftdiv+3
  1654  04D5  083D               	movf	??___ftdiv+3,w
  1655  04D6  00C2               	movwf	___ftdiv@exp
  1656  04D7  0842               	movf	___ftdiv@exp,w
  1657  04D8  1D03               	btfss	3,2
  1658  04D9  2CE1               	goto	l1305
  1659  04DA  3000               	movlw	0
  1660  04DB  00B4               	movwf	?___ftdiv
  1661  04DC  3000               	movlw	0
  1662  04DD  00B5               	movwf	?___ftdiv+1
  1663  04DE  3000               	movlw	0
  1664  04DF  00B6               	movwf	?___ftdiv+2
  1665  04E0  0008               	return
  1666  04E1                     l1305:	
  1667  04E1  0834               	movf	___ftdiv@f2,w
  1668  04E2  00BA               	movwf	??___ftdiv
  1669  04E3  0835               	movf	___ftdiv@f2+1,w
  1670  04E4  00BB               	movwf	??___ftdiv+1
  1671  04E5  0836               	movf	___ftdiv@f2+2,w
  1672  04E6  00BC               	movwf	??___ftdiv+2
  1673  04E7  1003               	clrc
  1674  04E8  0D3B               	rlf	??___ftdiv+1,w
  1675  04E9  0D3C               	rlf	??___ftdiv+2,w
  1676  04EA  00BD               	movwf	??___ftdiv+3
  1677  04EB  083D               	movf	??___ftdiv+3,w
  1678  04EC  00C3               	movwf	___ftdiv@sign
  1679  04ED  0843               	movf	___ftdiv@sign,w
  1680  04EE  1D03               	btfss	3,2
  1681  04EF  2CF7               	goto	l1311
  1682  04F0  3000               	movlw	0
  1683  04F1  00B4               	movwf	?___ftdiv
  1684  04F2  3000               	movlw	0
  1685  04F3  00B5               	movwf	?___ftdiv+1
  1686  04F4  3000               	movlw	0
  1687  04F5  00B6               	movwf	?___ftdiv+2
  1688  04F6  0008               	return
  1689  04F7                     l1311:	
  1690  04F7  3000               	movlw	0
  1691  04F8  00BF               	movwf	___ftdiv@f3
  1692  04F9  3000               	movlw	0
  1693  04FA  00C0               	movwf	___ftdiv@f3+1
  1694  04FB  3000               	movlw	0
  1695  04FC  00C1               	movwf	___ftdiv@f3+2
  1696  04FD  3089               	movlw	137
  1697  04FE  0743               	addwf	___ftdiv@sign,w
  1698  04FF  00BA               	movwf	??___ftdiv
  1699  0500  083A               	movf	??___ftdiv,w
  1700  0501  02C2               	subwf	___ftdiv@exp,f
  1701  0502  0837               	movf	___ftdiv@f1,w
  1702  0503  00BA               	movwf	??___ftdiv
  1703  0504  0838               	movf	___ftdiv@f1+1,w
  1704  0505  00BB               	movwf	??___ftdiv+1
  1705  0506  0839               	movf	___ftdiv@f1+2,w
  1706  0507  00BC               	movwf	??___ftdiv+2
  1707  0508  3010               	movlw	16
  1708  0509                     u1285:	
  1709  0509  1003               	clrc
  1710  050A  0CBC               	rrf	??___ftdiv+2,f
  1711  050B  0CBB               	rrf	??___ftdiv+1,f
  1712  050C  0CBA               	rrf	??___ftdiv,f
  1713  050D  3EFF               	addlw	-1
  1714  050E  1D03               	skipz
  1715  050F  2D09               	goto	u1285
  1716  0510  083A               	movf	??___ftdiv,w
  1717  0511  00BD               	movwf	??___ftdiv+3
  1718  0512  083D               	movf	??___ftdiv+3,w
  1719  0513  00C3               	movwf	___ftdiv@sign
  1720  0514  0834               	movf	___ftdiv@f2,w
  1721  0515  00BA               	movwf	??___ftdiv
  1722  0516  0835               	movf	___ftdiv@f2+1,w
  1723  0517  00BB               	movwf	??___ftdiv+1
  1724  0518  0836               	movf	___ftdiv@f2+2,w
  1725  0519  00BC               	movwf	??___ftdiv+2
  1726  051A  3010               	movlw	16
  1727  051B                     u1295:	
  1728  051B  1003               	clrc
  1729  051C  0CBC               	rrf	??___ftdiv+2,f
  1730  051D  0CBB               	rrf	??___ftdiv+1,f
  1731  051E  0CBA               	rrf	??___ftdiv,f
  1732  051F  3EFF               	addlw	-1
  1733  0520  1D03               	skipz
  1734  0521  2D1B               	goto	u1295
  1735  0522  083A               	movf	??___ftdiv,w
  1736  0523  00BD               	movwf	??___ftdiv+3
  1737  0524  083D               	movf	??___ftdiv+3,w
  1738  0525  06C3               	xorwf	___ftdiv@sign,f
  1739  0526  3080               	movlw	128
  1740  0527  00BA               	movwf	??___ftdiv
  1741  0528  083A               	movf	??___ftdiv,w
  1742  0529  05C3               	andwf	___ftdiv@sign,f
  1743  052A  17B8               	bsf	___ftdiv@f1+1,7
  1744  052B  30FF               	movlw	255
  1745  052C  05B7               	andwf	___ftdiv@f1,f
  1746  052D  30FF               	movlw	255
  1747  052E  05B8               	andwf	___ftdiv@f1+1,f
  1748  052F  3000               	movlw	0
  1749  0530  05B9               	andwf	___ftdiv@f1+2,f
  1750  0531  17B5               	bsf	___ftdiv@f2+1,7
  1751  0532  30FF               	movlw	255
  1752  0533  05B4               	andwf	___ftdiv@f2,f
  1753  0534  30FF               	movlw	255
  1754  0535  05B5               	andwf	___ftdiv@f2+1,f
  1755  0536  3000               	movlw	0
  1756  0537  05B6               	andwf	___ftdiv@f2+2,f
  1757  0538  3018               	movlw	24
  1758  0539  00BA               	movwf	??___ftdiv
  1759  053A  083A               	movf	??___ftdiv,w
  1760  053B  00BE               	movwf	___ftdiv@cntr
  1761  053C                     l1325:	
  1762  053C  3001               	movlw	1
  1763  053D                     u1305:	
  1764  053D  1003               	clrc
  1765  053E  0DBF               	rlf	___ftdiv@f3,f
  1766  053F  0DC0               	rlf	___ftdiv@f3+1,f
  1767  0540  0DC1               	rlf	___ftdiv@f3+2,f
  1768  0541  3EFF               	addlw	-1
  1769  0542  1D03               	skipz
  1770  0543  2D3D               	goto	u1305
  1771  0544  0836               	movf	___ftdiv@f2+2,w
  1772  0545  0239               	subwf	___ftdiv@f1+2,w
  1773  0546  1D03               	skipz
  1774  0547  2D4E               	goto	u1315
  1775  0548  0835               	movf	___ftdiv@f2+1,w
  1776  0549  0238               	subwf	___ftdiv@f1+1,w
  1777  054A  1D03               	skipz
  1778  054B  2D4E               	goto	u1315
  1779  054C  0834               	movf	___ftdiv@f2,w
  1780  054D  0237               	subwf	___ftdiv@f1,w
  1781  054E                     u1315:	
  1782  054E  1C03               	skipc
  1783  054F  2D5B               	goto	l1333
  1784  0550  0834               	movf	___ftdiv@f2,w
  1785  0551  02B7               	subwf	___ftdiv@f1,f
  1786  0552  0835               	movf	___ftdiv@f2+1,w
  1787  0553  1C03               	skipc
  1788  0554  0F35               	incfsz	___ftdiv@f2+1,w
  1789  0555  02B8               	subwf	___ftdiv@f1+1,f
  1790  0556  0836               	movf	___ftdiv@f2+2,w
  1791  0557  1C03               	skipc
  1792  0558  0A36               	incf	___ftdiv@f2+2,w
  1793  0559  02B9               	subwf	___ftdiv@f1+2,f
  1794  055A  143F               	bsf	___ftdiv@f3,0
  1795  055B                     l1333:	
  1796  055B  3001               	movlw	1
  1797  055C                     u1325:	
  1798  055C  1003               	clrc
  1799  055D  0DB7               	rlf	___ftdiv@f1,f
  1800  055E  0DB8               	rlf	___ftdiv@f1+1,f
  1801  055F  0DB9               	rlf	___ftdiv@f1+2,f
  1802  0560  3EFF               	addlw	-1
  1803  0561  1D03               	skipz
  1804  0562  2D5C               	goto	u1325
  1805  0563  3001               	movlw	1
  1806  0564  02BE               	subwf	___ftdiv@cntr,f
  1807  0565  1D03               	btfss	3,2
  1808  0566  2D3C               	goto	l1325
  1809  0567  083F               	movf	___ftdiv@f3,w
  1810  0568  00A8               	movwf	___ftpack@arg
  1811  0569  0840               	movf	___ftdiv@f3+1,w
  1812  056A  00A9               	movwf	___ftpack@arg+1
  1813  056B  0841               	movf	___ftdiv@f3+2,w
  1814  056C  00AA               	movwf	___ftpack@arg+2
  1815  056D  0842               	movf	___ftdiv@exp,w
  1816  056E  00BA               	movwf	??___ftdiv
  1817  056F  083A               	movf	??___ftdiv,w
  1818  0570  00AB               	movwf	___ftpack@exp
  1819  0571  0843               	movf	___ftdiv@sign,w
  1820  0572  00BB               	movwf	??___ftdiv+1
  1821  0573  083B               	movf	??___ftdiv+1,w
  1822  0574  00AC               	movwf	___ftpack@sign
  1823  0575  120A  118A  2682   	fcall	___ftpack
  1824  0578  1283               	bcf	3,5	;RP0=0, select bank0
  1825  0579  1303               	bcf	3,6	;RP1=0, select bank0
  1826  057A  0828               	movf	?___ftpack,w
  1827  057B  00B4               	movwf	?___ftdiv
  1828  057C  0829               	movf	?___ftpack+1,w
  1829  057D  00B5               	movwf	?___ftdiv+1
  1830  057E  082A               	movf	?___ftpack+2,w
  1831  057F  00B6               	movwf	?___ftdiv+2
  1832  0580  0008               	return
  1833  0581                     __end_of___ftdiv:	
  1834                           
  1835                           	psect	text7
  1836  0408                     __ptext7:	
  1837 ;; *************** function _int2char *****************
  1838 ;; Defined at:
  1839 ;;		line 111 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor-pic16f887\stepper_motor
      +\lcd.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;  int_value       2   52[BANK0 ] unsigned int 
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;  int_value2      2    4[BANK1 ] unsigned int 
  1844 ;;  int_value1      2    2[BANK1 ] unsigned int 
  1845 ;;  int_value0      2    0[BANK1 ] unsigned int 
  1846 ;; Return value:  Size  Location     Type
  1847 ;;                  1    wreg      void 
  1848 ;; Registers used:
  1849 ;;		wreg, status,2, status,0, pclath, cstack
  1850 ;; Tracked objects:
  1851 ;;		On entry : 0/0
  1852 ;;		On exit  : 0/0
  1853 ;;		Unchanged: 0/0
  1854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1855 ;;      Params:         0       2       0       0       0
  1856 ;;      Locals:         0       0       6       0       0
  1857 ;;      Temps:          0       4       0       0       0
  1858 ;;      Totals:         0       6       6       0       0
  1859 ;;Total ram usage:       12 bytes
  1860 ;; Hardware stack levels used:    1
  1861 ;; Hardware stack levels required when called:    4
  1862 ;; This function calls:
  1863 ;;		___lwdiv
  1864 ;;		___wmul
  1865 ;; This function is called by:
  1866 ;;		_main
  1867 ;; This function uses a non-reentrant model
  1868 ;;
  1869                           
  1870                           
  1871                           ;psect for function _int2char
  1872  0408                     _int2char:	
  1873                           
  1874                           ;lcd.c: 112: uint16_t int_value0 = 0;
  1875                           
  1876                           ;incstack = 0
  1877                           ; Regs used in _int2char: [wreg+status,2+status,0+pclath+cstack]
  1878  0408  1683               	bsf	3,5	;RP0=1, select bank1
  1879  0409  1303               	bcf	3,6	;RP1=0, select bank1
  1880  040A  01A0               	clrf	int2char@int_value0^(0+128)
  1881  040B  01A1               	clrf	(int2char@int_value0+1)^(0+128)
  1882                           
  1883                           ;lcd.c: 113: uint16_t int_value1 = 0;
  1884  040C  01A2               	clrf	int2char@int_value1^(0+128)
  1885  040D  01A3               	clrf	(int2char@int_value1+1)^(0+128)
  1886                           
  1887                           ;lcd.c: 114: uint16_t int_value2 = 0;
  1888  040E  01A4               	clrf	int2char@int_value2^(0+128)
  1889  040F  01A5               	clrf	(int2char@int_value2+1)^(0+128)
  1890                           
  1891                           ;lcd.c: 116: int_value2 = int_value/100;
  1892  0410  3064               	movlw	100
  1893  0411  1283               	bcf	3,5	;RP0=0, select bank0
  1894  0412  1303               	bcf	3,6	;RP1=0, select bank0
  1895  0413  00A8               	movwf	___lwdiv@divisor
  1896  0414  3000               	movlw	0
  1897  0415  00A9               	movwf	___lwdiv@divisor+1
  1898  0416  0855               	movf	int2char@int_value+1,w
  1899  0417  00AB               	movwf	___lwdiv@dividend+1
  1900  0418  0854               	movf	int2char@int_value,w
  1901  0419  00AA               	movwf	___lwdiv@dividend
  1902  041A  120A  158A  2723  120A  118A  	fcall	___lwdiv
  1903  041F  1283               	bcf	3,5	;RP0=0, select bank0
  1904  0420  1303               	bcf	3,6	;RP1=0, select bank0
  1905  0421  0829               	movf	?___lwdiv+1,w
  1906  0422  1683               	bsf	3,5	;RP0=1, select bank1
  1907  0423  1303               	bcf	3,6	;RP1=0, select bank1
  1908  0424  00A5               	movwf	(int2char@int_value2+1)^(0+128)
  1909  0425  1283               	bcf	3,5	;RP0=0, select bank0
  1910  0426  1303               	bcf	3,6	;RP1=0, select bank0
  1911  0427  0828               	movf	?___lwdiv,w
  1912  0428  1683               	bsf	3,5	;RP0=1, select bank1
  1913  0429  1303               	bcf	3,6	;RP1=0, select bank1
  1914  042A  00A4               	movwf	int2char@int_value2^(0+128)
  1915                           
  1916                           ;lcd.c: 117: int_value1 = int_value/10 - int_value2*10;
  1917  042B  0825               	movf	(int2char@int_value2+1)^(0+128),w
  1918  042C  1283               	bcf	3,5	;RP0=0, select bank0
  1919  042D  1303               	bcf	3,6	;RP1=0, select bank0
  1920  042E  00B2               	movwf	___wmul@multiplier+1
  1921  042F  1683               	bsf	3,5	;RP0=1, select bank1
  1922  0430  1303               	bcf	3,6	;RP1=0, select bank1
  1923  0431  0824               	movf	int2char@int_value2^(0+128),w
  1924  0432  1283               	bcf	3,5	;RP0=0, select bank0
  1925  0433  1303               	bcf	3,6	;RP1=0, select bank0
  1926  0434  00B1               	movwf	___wmul@multiplier
  1927  0435  300A               	movlw	10
  1928  0436  00B3               	movwf	___wmul@multiplicand
  1929  0437  3000               	movlw	0
  1930  0438  00B4               	movwf	___wmul@multiplicand+1
  1931  0439  120A  158A  2670  120A  118A  	fcall	___wmul
  1932  043E  1283               	bcf	3,5	;RP0=0, select bank0
  1933  043F  1303               	bcf	3,6	;RP1=0, select bank0
  1934  0440  0931               	comf	?___wmul,w
  1935  0441  00D6               	movwf	??_int2char
  1936  0442  0932               	comf	?___wmul+1,w
  1937  0443  00D7               	movwf	??_int2char+1
  1938  0444  0AD6               	incf	??_int2char,f
  1939  0445  1903               	skipnz
  1940  0446  0AD7               	incf	??_int2char+1,f
  1941  0447  300A               	movlw	10
  1942  0448  00A8               	movwf	___lwdiv@divisor
  1943  0449  3000               	movlw	0
  1944  044A  00A9               	movwf	___lwdiv@divisor+1
  1945  044B  0855               	movf	int2char@int_value+1,w
  1946  044C  00AB               	movwf	___lwdiv@dividend+1
  1947  044D  0854               	movf	int2char@int_value,w
  1948  044E  00AA               	movwf	___lwdiv@dividend
  1949  044F  120A  158A  2723  120A  118A  	fcall	___lwdiv
  1950  0454  1283               	bcf	3,5	;RP0=0, select bank0
  1951  0455  1303               	bcf	3,6	;RP1=0, select bank0
  1952  0456  0856               	movf	??_int2char,w
  1953  0457  0728               	addwf	?___lwdiv,w
  1954  0458  1683               	bsf	3,5	;RP0=1, select bank1
  1955  0459  1303               	bcf	3,6	;RP1=0, select bank1
  1956  045A  00A2               	movwf	int2char@int_value1^(0+128)
  1957  045B  1283               	bcf	3,5	;RP0=0, select bank0
  1958  045C  1303               	bcf	3,6	;RP1=0, select bank0
  1959  045D  0857               	movf	??_int2char+1,w
  1960  045E  1803               	skipnc
  1961  045F  0A57               	incf	??_int2char+1,w
  1962  0460  0729               	addwf	?___lwdiv+1,w
  1963  0461  1683               	bsf	3,5	;RP0=1, select bank1
  1964  0462  1303               	bcf	3,6	;RP1=0, select bank1
  1965  0463  00A3               	movwf	(int2char@int_value1+1)^(0+128)
  1966                           
  1967                           ;lcd.c: 118: int_value0 = int_value - int_value2*100 - int_value1*10;
  1968  0464  0825               	movf	(int2char@int_value2+1)^(0+128),w
  1969  0465  1283               	bcf	3,5	;RP0=0, select bank0
  1970  0466  1303               	bcf	3,6	;RP1=0, select bank0
  1971  0467  00B2               	movwf	___wmul@multiplier+1
  1972  0468  1683               	bsf	3,5	;RP0=1, select bank1
  1973  0469  1303               	bcf	3,6	;RP1=0, select bank1
  1974  046A  0824               	movf	int2char@int_value2^(0+128),w
  1975  046B  1283               	bcf	3,5	;RP0=0, select bank0
  1976  046C  1303               	bcf	3,6	;RP1=0, select bank0
  1977  046D  00B1               	movwf	___wmul@multiplier
  1978  046E  3064               	movlw	100
  1979  046F  00B3               	movwf	___wmul@multiplicand
  1980  0470  3000               	movlw	0
  1981  0471  00B4               	movwf	___wmul@multiplicand+1
  1982  0472  120A  158A  2670  120A  118A  	fcall	___wmul
  1983  0477  1283               	bcf	3,5	;RP0=0, select bank0
  1984  0478  1303               	bcf	3,6	;RP1=0, select bank0
  1985  0479  0831               	movf	?___wmul,w
  1986  047A  00D6               	movwf	??_int2char
  1987  047B  0832               	movf	?___wmul+1,w
  1988  047C  00D7               	movwf	??_int2char+1
  1989  047D  1683               	bsf	3,5	;RP0=1, select bank1
  1990  047E  1303               	bcf	3,6	;RP1=0, select bank1
  1991  047F  0823               	movf	(int2char@int_value1+1)^(0+128),w
  1992  0480  1283               	bcf	3,5	;RP0=0, select bank0
  1993  0481  1303               	bcf	3,6	;RP1=0, select bank0
  1994  0482  00B2               	movwf	___wmul@multiplier+1
  1995  0483  1683               	bsf	3,5	;RP0=1, select bank1
  1996  0484  1303               	bcf	3,6	;RP1=0, select bank1
  1997  0485  0822               	movf	int2char@int_value1^(0+128),w
  1998  0486  1283               	bcf	3,5	;RP0=0, select bank0
  1999  0487  1303               	bcf	3,6	;RP1=0, select bank0
  2000  0488  00B1               	movwf	___wmul@multiplier
  2001  0489  300A               	movlw	10
  2002  048A  00B3               	movwf	___wmul@multiplicand
  2003  048B  3000               	movlw	0
  2004  048C  00B4               	movwf	___wmul@multiplicand+1
  2005  048D  120A  158A  2670  120A  118A  	fcall	___wmul
  2006  0492  1283               	bcf	3,5	;RP0=0, select bank0
  2007  0493  1303               	bcf	3,6	;RP1=0, select bank0
  2008  0494  0831               	movf	?___wmul,w
  2009  0495  0756               	addwf	??_int2char,w
  2010  0496  00D8               	movwf	??_int2char+2
  2011  0497  0832               	movf	?___wmul+1,w
  2012  0498  1803               	skipnc
  2013  0499  0A32               	incf	?___wmul+1,w
  2014  049A  0757               	addwf	??_int2char+1,w
  2015  049B  00D9               	movwf	??_int2char+3
  2016  049C  09D8               	comf	??_int2char+2,f
  2017  049D  09D9               	comf	??_int2char+3,f
  2018  049E  0AD8               	incf	??_int2char+2,f
  2019  049F  1903               	skipnz
  2020  04A0  0AD9               	incf	??_int2char+3,f
  2021  04A1  0854               	movf	int2char@int_value,w
  2022  04A2  0758               	addwf	??_int2char+2,w
  2023  04A3  1683               	bsf	3,5	;RP0=1, select bank1
  2024  04A4  1303               	bcf	3,6	;RP1=0, select bank1
  2025  04A5  00A0               	movwf	int2char@int_value0^(0+128)
  2026  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  2027  04A7  1303               	bcf	3,6	;RP1=0, select bank0
  2028  04A8  0855               	movf	int2char@int_value+1,w
  2029  04A9  1803               	skipnc
  2030  04AA  0A55               	incf	int2char@int_value+1,w
  2031  04AB  0759               	addwf	??_int2char+3,w
  2032  04AC  1683               	bsf	3,5	;RP0=1, select bank1
  2033  04AD  1303               	bcf	3,6	;RP1=0, select bank1
  2034  04AE  00A1               	movwf	(int2char@int_value0+1)^(0+128)
  2035                           
  2036                           ;lcd.c: 120: c_int_value[2] = int_value0 + 48;
  2037  04AF  0820               	movf	int2char@int_value0^(0+128),w
  2038  04B0  3E30               	addlw	48
  2039  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  2040  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  2041  04B3  00D6               	movwf	??_int2char
  2042  04B4  0856               	movf	??_int2char,w
  2043  04B5  00E4               	movwf	_c_int_value+2
  2044                           
  2045                           ;lcd.c: 121: c_int_value[1] = int_value1 + 48;
  2046  04B6  1683               	bsf	3,5	;RP0=1, select bank1
  2047  04B7  1303               	bcf	3,6	;RP1=0, select bank1
  2048  04B8  0822               	movf	int2char@int_value1^(0+128),w
  2049  04B9  3E30               	addlw	48
  2050  04BA  1283               	bcf	3,5	;RP0=0, select bank0
  2051  04BB  1303               	bcf	3,6	;RP1=0, select bank0
  2052  04BC  00D6               	movwf	??_int2char
  2053  04BD  0856               	movf	??_int2char,w
  2054  04BE  00E3               	movwf	_c_int_value+1
  2055                           
  2056                           ;lcd.c: 122: c_int_value[0] = int_value2 + 48;
  2057  04BF  1683               	bsf	3,5	;RP0=1, select bank1
  2058  04C0  1303               	bcf	3,6	;RP1=0, select bank1
  2059  04C1  0824               	movf	int2char@int_value2^(0+128),w
  2060  04C2  3E30               	addlw	48
  2061  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  2062  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  2063  04C5  00D6               	movwf	??_int2char
  2064  04C6  0856               	movf	??_int2char,w
  2065  04C7  00E2               	movwf	_c_int_value
  2066  04C8  0008               	return
  2067  04C9                     __end_of_int2char:	
  2068                           
  2069                           	psect	text8
  2070  0F23                     __ptext8:	
  2071 ;; *************** function ___lwdiv *****************
  2072 ;; Defined at:
  2073 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;  divisor         2    8[BANK0 ] unsigned int 
  2076 ;;  dividend        2   10[BANK0 ] unsigned int 
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;  quotient        2   14[BANK0 ] unsigned int 
  2079 ;;  counter         1   13[BANK0 ] unsigned char 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  2    8[BANK0 ] unsigned int 
  2082 ;; Registers used:
  2083 ;;		wreg, status,2, status,0
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2089 ;;      Params:         0       4       0       0       0
  2090 ;;      Locals:         0       3       0       0       0
  2091 ;;      Temps:          0       1       0       0       0
  2092 ;;      Totals:         0       8       0       0       0
  2093 ;;Total ram usage:        8 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:    3
  2096 ;; This function calls:
  2097 ;;		Nothing
  2098 ;; This function is called by:
  2099 ;;		_int2char
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           
  2104                           ;psect for function ___lwdiv
  2105  0F23                     ___lwdiv:	
  2106                           
  2107                           ;incstack = 0
  2108                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2109  0F23  1283               	bcf	3,5	;RP0=0, select bank0
  2110  0F24  1303               	bcf	3,6	;RP1=0, select bank0
  2111  0F25  01AE               	clrf	___lwdiv@quotient
  2112  0F26  01AF               	clrf	___lwdiv@quotient+1
  2113  0F27  0828               	movf	___lwdiv@divisor,w
  2114  0F28  0429               	iorwf	___lwdiv@divisor+1,w
  2115  0F29  1903               	btfsc	3,2
  2116  0F2A  2F5C               	goto	l1799
  2117  0F2B  01AD               	clrf	___lwdiv@counter
  2118  0F2C  0AAD               	incf	___lwdiv@counter,f
  2119  0F2D                     l1787:	
  2120  0F2D  1BA9               	btfsc	___lwdiv@divisor+1,7
  2121  0F2E  2F3B               	goto	l1789
  2122  0F2F  3001               	movlw	1
  2123  0F30                     u2145:	
  2124  0F30  1003               	clrc
  2125  0F31  0DA8               	rlf	___lwdiv@divisor,f
  2126  0F32  0DA9               	rlf	___lwdiv@divisor+1,f
  2127  0F33  3EFF               	addlw	-1
  2128  0F34  1D03               	skipz
  2129  0F35  2F30               	goto	u2145
  2130  0F36  3001               	movlw	1
  2131  0F37  00AC               	movwf	??___lwdiv
  2132  0F38  082C               	movf	??___lwdiv,w
  2133  0F39  07AD               	addwf	___lwdiv@counter,f
  2134  0F3A  2F2D               	goto	l1787
  2135  0F3B                     l1789:	
  2136  0F3B  3001               	movlw	1
  2137  0F3C                     u2165:	
  2138  0F3C  1003               	clrc
  2139  0F3D  0DAE               	rlf	___lwdiv@quotient,f
  2140  0F3E  0DAF               	rlf	___lwdiv@quotient+1,f
  2141  0F3F  3EFF               	addlw	-1
  2142  0F40  1D03               	skipz
  2143  0F41  2F3C               	goto	u2165
  2144  0F42  0829               	movf	___lwdiv@divisor+1,w
  2145  0F43  022B               	subwf	___lwdiv@dividend+1,w
  2146  0F44  1D03               	skipz
  2147  0F45  2F48               	goto	u2175
  2148  0F46  0828               	movf	___lwdiv@divisor,w
  2149  0F47  022A               	subwf	___lwdiv@dividend,w
  2150  0F48                     u2175:	
  2151  0F48  1C03               	skipc
  2152  0F49  2F51               	goto	l1795
  2153  0F4A  0828               	movf	___lwdiv@divisor,w
  2154  0F4B  02AA               	subwf	___lwdiv@dividend,f
  2155  0F4C  0829               	movf	___lwdiv@divisor+1,w
  2156  0F4D  1C03               	skipc
  2157  0F4E  03AB               	decf	___lwdiv@dividend+1,f
  2158  0F4F  02AB               	subwf	___lwdiv@dividend+1,f
  2159  0F50  142E               	bsf	___lwdiv@quotient,0
  2160  0F51                     l1795:	
  2161  0F51  3001               	movlw	1
  2162  0F52                     u2185:	
  2163  0F52  1003               	clrc
  2164  0F53  0CA9               	rrf	___lwdiv@divisor+1,f
  2165  0F54  0CA8               	rrf	___lwdiv@divisor,f
  2166  0F55  3EFF               	addlw	-1
  2167  0F56  1D03               	skipz
  2168  0F57  2F52               	goto	u2185
  2169  0F58  3001               	movlw	1
  2170  0F59  02AD               	subwf	___lwdiv@counter,f
  2171  0F5A  1D03               	btfss	3,2
  2172  0F5B  2F3B               	goto	l1789
  2173  0F5C                     l1799:	
  2174  0F5C  082F               	movf	___lwdiv@quotient+1,w
  2175  0F5D  00A9               	movwf	?___lwdiv+1
  2176  0F5E  082E               	movf	___lwdiv@quotient,w
  2177  0F5F  00A8               	movwf	?___lwdiv
  2178  0F60  0008               	return
  2179  0F61                     __end_of___lwdiv:	
  2180                           
  2181                           	psect	text9
  2182  0DF9                     __ptext9:	
  2183 ;; *************** function _getVelocidade *****************
  2184 ;; Defined at:
  2185 ;;		line 42 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor-pic16f887\stepper_motor\
      +stepper.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;		None
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  2    8[BANK0 ] unsigned int 
  2192 ;; Registers used:
  2193 ;;		wreg
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2199 ;;      Params:         0       2       0       0       0
  2200 ;;      Locals:         0       0       0       0       0
  2201 ;;      Temps:          0       0       0       0       0
  2202 ;;      Totals:         0       2       0       0       0
  2203 ;;Total ram usage:        2 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    3
  2206 ;; This function calls:
  2207 ;;		Nothing
  2208 ;; This function is called by:
  2209 ;;		_main
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           
  2214                           ;psect for function _getVelocidade
  2215  0DF9                     _getVelocidade:	
  2216                           
  2217                           ;stepper.c: 43: return speed;
  2218                           
  2219                           ;incstack = 0
  2220                           ; Regs used in _getVelocidade: [wreg]
  2221  0DF9  1683               	bsf	3,5	;RP0=1, select bank1
  2222  0DFA  1303               	bcf	3,6	;RP1=0, select bank1
  2223  0DFB  0829               	movf	(_speed+1)^(0+128),w
  2224  0DFC  1283               	bcf	3,5	;RP0=0, select bank0
  2225  0DFD  1303               	bcf	3,6	;RP1=0, select bank0
  2226  0DFE  00A9               	movwf	?_getVelocidade+1
  2227  0DFF  1683               	bsf	3,5	;RP0=1, select bank1
  2228  0E00  1303               	bcf	3,6	;RP1=0, select bank1
  2229  0E01  0828               	movf	_speed^(0+128),w
  2230  0E02  1283               	bcf	3,5	;RP0=0, select bank0
  2231  0E03  1303               	bcf	3,6	;RP1=0, select bank0
  2232  0E04  00A8               	movwf	?_getVelocidade
  2233  0E05  0008               	return
  2234  0E06                     __end_of_getVelocidade:	
  2235                           
  2236                           	psect	text10
  2237  0E93                     __ptext10:	
  2238 ;; *************** function _getPosicaoAtual *****************
  2239 ;; Defined at:
  2240 ;;		line 24 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor-pic16f887\stepper_motor\
      +stepper.c"
  2241 ;; Parameters:    Size  Location     Type
  2242 ;;		None
  2243 ;; Auto vars:     Size  Location     Type
  2244 ;;		None
  2245 ;; Return value:  Size  Location     Type
  2246 ;;                  2   50[BANK0 ] unsigned int 
  2247 ;; Registers used:
  2248 ;;		wreg, status,2, status,0, pclath, cstack
  2249 ;; Tracked objects:
  2250 ;;		On entry : 0/0
  2251 ;;		On exit  : 0/0
  2252 ;;		Unchanged: 0/0
  2253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2254 ;;      Params:         0       2       0       0       0
  2255 ;;      Locals:         0       0       0       0       0
  2256 ;;      Temps:          0       0       0       0       0
  2257 ;;      Totals:         0       2       0       0       0
  2258 ;;Total ram usage:        2 bytes
  2259 ;; Hardware stack levels used:    1
  2260 ;; Hardware stack levels required when called:    5
  2261 ;; This function calls:
  2262 ;;		___ftmul
  2263 ;;		___fttol
  2264 ;;		___lwtoft
  2265 ;; This function is called by:
  2266 ;;		_main
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270                           
  2271                           ;psect for function _getPosicaoAtual
  2272  0E93                     _getPosicaoAtual:	
  2273                           
  2274                           ;stepper.c: 25: return position*(5.625/32);
  2275                           
  2276                           ;incstack = 0
  2277                           ; Regs used in _getPosicaoAtual: [wreg+status,2+status,0+pclath+cstack]
  2278  0E93  1283               	bcf	3,5	;RP0=0, select bank0
  2279  0E94  1303               	bcf	3,6	;RP1=0, select bank0
  2280  0E95  085D               	movf	_position+1,w
  2281  0E96  00B1               	movwf	___lwtoft@c+1
  2282  0E97  085C               	movf	_position,w
  2283  0E98  00B0               	movwf	___lwtoft@c
  2284  0E99  120A  158A  263D  120A  158A  	fcall	___lwtoft
  2285  0E9E  1283               	bcf	3,5	;RP0=0, select bank0
  2286  0E9F  1303               	bcf	3,6	;RP1=0, select bank0
  2287  0EA0  0830               	movf	?___lwtoft,w
  2288  0EA1  00B7               	movwf	___ftmul@f2
  2289  0EA2  0831               	movf	?___lwtoft+1,w
  2290  0EA3  00B8               	movwf	___ftmul@f2+1
  2291  0EA4  0832               	movf	?___lwtoft+2,w
  2292  0EA5  00B9               	movwf	___ftmul@f2+2
  2293  0EA6  3000               	movlw	0
  2294  0EA7  00B4               	movwf	___ftmul@f1
  2295  0EA8  3034               	movlw	52
  2296  0EA9  00B5               	movwf	___ftmul@f1+1
  2297  0EAA  303E               	movlw	62
  2298  0EAB  00B6               	movwf	___ftmul@f1+2
  2299  0EAC  120A  118A  2335  120A  158A  	fcall	___ftmul
  2300  0EB1  1283               	bcf	3,5	;RP0=0, select bank0
  2301  0EB2  1303               	bcf	3,6	;RP1=0, select bank0
  2302  0EB3  0834               	movf	?___ftmul,w
  2303  0EB4  00C4               	movwf	___fttol@f1
  2304  0EB5  0835               	movf	?___ftmul+1,w
  2305  0EB6  00C5               	movwf	___fttol@f1+1
  2306  0EB7  0836               	movf	?___ftmul+2,w
  2307  0EB8  00C6               	movwf	___fttol@f1+2
  2308  0EB9  120A  118A  2581   	fcall	___fttol
  2309  0EBC  1283               	bcf	3,5	;RP0=0, select bank0
  2310  0EBD  1303               	bcf	3,6	;RP1=0, select bank0
  2311  0EBE  0845               	movf	?___fttol+1,w
  2312  0EBF  00D3               	movwf	?_getPosicaoAtual+1
  2313  0EC0  0844               	movf	?___fttol,w
  2314  0EC1  00D2               	movwf	?_getPosicaoAtual
  2315  0EC2  0008               	return
  2316  0EC3                     __end_of_getPosicaoAtual:	
  2317                           
  2318                           	psect	text11
  2319  0E3D                     __ptext11:	
  2320 ;; *************** function ___lwtoft *****************
  2321 ;; Defined at:
  2322 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;  c               2   16[BANK0 ] unsigned int 
  2325 ;; Auto vars:     Size  Location     Type
  2326 ;;		None
  2327 ;; Return value:  Size  Location     Type
  2328 ;;                  3   16[BANK0 ] float 
  2329 ;; Registers used:
  2330 ;;		wreg, status,2, status,0, pclath, cstack
  2331 ;; Tracked objects:
  2332 ;;		On entry : 0/0
  2333 ;;		On exit  : 0/0
  2334 ;;		Unchanged: 0/0
  2335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2336 ;;      Params:         0       3       0       0       0
  2337 ;;      Locals:         0       0       0       0       0
  2338 ;;      Temps:          0       1       0       0       0
  2339 ;;      Totals:         0       4       0       0       0
  2340 ;;Total ram usage:        4 bytes
  2341 ;; Hardware stack levels used:    1
  2342 ;; Hardware stack levels required when called:    4
  2343 ;; This function calls:
  2344 ;;		___ftpack
  2345 ;; This function is called by:
  2346 ;;		_setPosicaoAtual
  2347 ;;		_getPosicaoAtual
  2348 ;;		_setPosicaoDesejada
  2349 ;;		_main
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           
  2354                           ;psect for function ___lwtoft
  2355  0E3D                     ___lwtoft:	
  2356                           
  2357                           ;incstack = 0
  2358                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2359  0E3D  1283               	bcf	3,5	;RP0=0, select bank0
  2360  0E3E  1303               	bcf	3,6	;RP1=0, select bank0
  2361  0E3F  0830               	movf	___lwtoft@c,w
  2362  0E40  00A8               	movwf	___ftpack@arg
  2363  0E41  0831               	movf	___lwtoft@c+1,w
  2364  0E42  00A9               	movwf	___ftpack@arg+1
  2365  0E43  01AA               	clrf	___ftpack@arg+2
  2366  0E44  308E               	movlw	142
  2367  0E45  00B3               	movwf	??___lwtoft
  2368  0E46  0833               	movf	??___lwtoft,w
  2369  0E47  00AB               	movwf	___ftpack@exp
  2370  0E48  01AC               	clrf	___ftpack@sign
  2371  0E49  120A  118A  2682   	fcall	___ftpack
  2372  0E4C  1283               	bcf	3,5	;RP0=0, select bank0
  2373  0E4D  1303               	bcf	3,6	;RP1=0, select bank0
  2374  0E4E  0828               	movf	?___ftpack,w
  2375  0E4F  00B0               	movwf	?___lwtoft
  2376  0E50  0829               	movf	?___ftpack+1,w
  2377  0E51  00B1               	movwf	?___lwtoft+1
  2378  0E52  082A               	movf	?___ftpack+2,w
  2379  0E53  00B2               	movwf	?___lwtoft+2
  2380  0E54  0008               	return
  2381  0E55                     __end_of___lwtoft:	
  2382                           
  2383                           	psect	text12
  2384  0581                     __ptext12:	
  2385 ;; *************** function ___fttol *****************
  2386 ;; Defined at:
  2387 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;  f1              3   36[BANK0 ] float 
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;  lval            4   45[BANK0 ] unsigned long 
  2392 ;;  exp1            1   49[BANK0 ] unsigned char 
  2393 ;;  sign1           1   44[BANK0 ] unsigned char 
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  4   36[BANK0 ] long 
  2396 ;; Registers used:
  2397 ;;		wreg, status,2, status,0
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2403 ;;      Params:         0       4       0       0       0
  2404 ;;      Locals:         0       6       0       0       0
  2405 ;;      Temps:          0       4       0       0       0
  2406 ;;      Totals:         0      14       0       0       0
  2407 ;;Total ram usage:       14 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    3
  2410 ;; This function calls:
  2411 ;;		Nothing
  2412 ;; This function is called by:
  2413 ;;		_setPosicaoAtual
  2414 ;;		_getPosicaoAtual
  2415 ;;		_setPosicaoDesejada
  2416 ;;		_main
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           
  2421                           ;psect for function ___fttol
  2422  0581                     ___fttol:	
  2423                           
  2424                           ;incstack = 0
  2425                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2426  0581  1283               	bcf	3,5	;RP0=0, select bank0
  2427  0582  1303               	bcf	3,6	;RP1=0, select bank0
  2428  0583  0844               	movf	___fttol@f1,w
  2429  0584  00C8               	movwf	??___fttol
  2430  0585  0845               	movf	___fttol@f1+1,w
  2431  0586  00C9               	movwf	??___fttol+1
  2432  0587  0846               	movf	___fttol@f1+2,w
  2433  0588  00CA               	movwf	??___fttol+2
  2434  0589  1003               	clrc
  2435  058A  0D49               	rlf	??___fttol+1,w
  2436  058B  0D4A               	rlf	??___fttol+2,w
  2437  058C  00CB               	movwf	??___fttol+3
  2438  058D  084B               	movf	??___fttol+3,w
  2439  058E  00D1               	movwf	___fttol@exp1
  2440  058F  0851               	movf	___fttol@exp1,w
  2441  0590  1D03               	btfss	3,2
  2442  0591  2D9B               	goto	l1347
  2443  0592  3000               	movlw	0
  2444  0593  00C7               	movwf	?___fttol+3
  2445  0594  3000               	movlw	0
  2446  0595  00C6               	movwf	?___fttol+2
  2447  0596  3000               	movlw	0
  2448  0597  00C5               	movwf	?___fttol+1
  2449  0598  3000               	movlw	0
  2450  0599  00C4               	movwf	?___fttol
  2451  059A  0008               	return
  2452  059B                     l1347:	
  2453  059B  0844               	movf	___fttol@f1,w
  2454  059C  00C8               	movwf	??___fttol
  2455  059D  0845               	movf	___fttol@f1+1,w
  2456  059E  00C9               	movwf	??___fttol+1
  2457  059F  0846               	movf	___fttol@f1+2,w
  2458  05A0  00CA               	movwf	??___fttol+2
  2459  05A1  3017               	movlw	23
  2460  05A2                     u1355:	
  2461  05A2  1003               	clrc
  2462  05A3  0CCA               	rrf	??___fttol+2,f
  2463  05A4  0CC9               	rrf	??___fttol+1,f
  2464  05A5  0CC8               	rrf	??___fttol,f
  2465  05A6  3EFF               	addlw	-1
  2466  05A7  1D03               	skipz
  2467  05A8  2DA2               	goto	u1355
  2468  05A9  0848               	movf	??___fttol,w
  2469  05AA  00CB               	movwf	??___fttol+3
  2470  05AB  084B               	movf	??___fttol+3,w
  2471  05AC  00CC               	movwf	___fttol@sign1
  2472  05AD  17C5               	bsf	___fttol@f1+1,7
  2473  05AE  30FF               	movlw	255
  2474  05AF  05C4               	andwf	___fttol@f1,f
  2475  05B0  30FF               	movlw	255
  2476  05B1  05C5               	andwf	___fttol@f1+1,f
  2477  05B2  3000               	movlw	0
  2478  05B3  05C6               	andwf	___fttol@f1+2,f
  2479  05B4  0844               	movf	___fttol@f1,w
  2480  05B5  00CD               	movwf	___fttol@lval
  2481  05B6  0845               	movf	___fttol@f1+1,w
  2482  05B7  00CE               	movwf	___fttol@lval+1
  2483  05B8  0846               	movf	___fttol@f1+2,w
  2484  05B9  00CF               	movwf	___fttol@lval+2
  2485  05BA  01D0               	clrf	___fttol@lval+3
  2486  05BB  308E               	movlw	142
  2487  05BC  02D1               	subwf	___fttol@exp1,f
  2488  05BD  1FD1               	btfss	___fttol@exp1,7
  2489  05BE  2DDD               	goto	l1367
  2490  05BF  0851               	movf	___fttol@exp1,w
  2491  05C0  3A80               	xorlw	128
  2492  05C1  3E8F               	addlw	143
  2493  05C2  1803               	skipnc
  2494  05C3  2DCD               	goto	l1365
  2495  05C4  3000               	movlw	0
  2496  05C5  00C7               	movwf	?___fttol+3
  2497  05C6  3000               	movlw	0
  2498  05C7  00C6               	movwf	?___fttol+2
  2499  05C8  3000               	movlw	0
  2500  05C9  00C5               	movwf	?___fttol+1
  2501  05CA  3000               	movlw	0
  2502  05CB  00C4               	movwf	?___fttol
  2503  05CC  0008               	return
  2504  05CD                     l1365:	
  2505  05CD  3001               	movlw	1
  2506  05CE                     u1385:	
  2507  05CE  1003               	clrc
  2508  05CF  0CD0               	rrf	___fttol@lval+3,f
  2509  05D0  0CCF               	rrf	___fttol@lval+2,f
  2510  05D1  0CCE               	rrf	___fttol@lval+1,f
  2511  05D2  0CCD               	rrf	___fttol@lval,f
  2512  05D3  3EFF               	addlw	-1
  2513  05D4  1D03               	skipz
  2514  05D5  2DCE               	goto	u1385
  2515  05D6  3001               	movlw	1
  2516  05D7  00C8               	movwf	??___fttol
  2517  05D8  0848               	movf	??___fttol,w
  2518  05D9  07D1               	addwf	___fttol@exp1,f
  2519  05DA  1903               	btfsc	3,2
  2520  05DB  2DF8               	goto	l1375
  2521  05DC  2DCD               	goto	l1365
  2522  05DD                     l1367:	
  2523  05DD  3018               	movlw	24
  2524  05DE  0251               	subwf	___fttol@exp1,w
  2525  05DF  1C03               	skipc
  2526  05E0  2DF5               	goto	l563
  2527  05E1  3000               	movlw	0
  2528  05E2  00C7               	movwf	?___fttol+3
  2529  05E3  3000               	movlw	0
  2530  05E4  00C6               	movwf	?___fttol+2
  2531  05E5  3000               	movlw	0
  2532  05E6  00C5               	movwf	?___fttol+1
  2533  05E7  3000               	movlw	0
  2534  05E8  00C4               	movwf	?___fttol
  2535  05E9  0008               	return
  2536  05EA                     l1373:	
  2537  05EA  3001               	movlw	1
  2538  05EB  00C8               	movwf	??___fttol
  2539  05EC                     u1415:	
  2540  05EC  1003               	clrc
  2541  05ED  0DCD               	rlf	___fttol@lval,f
  2542  05EE  0DCE               	rlf	___fttol@lval+1,f
  2543  05EF  0DCF               	rlf	___fttol@lval+2,f
  2544  05F0  0DD0               	rlf	___fttol@lval+3,f
  2545  05F1  0BC8               	decfsz	??___fttol,f
  2546  05F2  2DEC               	goto	u1415
  2547  05F3  3001               	movlw	1
  2548  05F4  02D1               	subwf	___fttol@exp1,f
  2549  05F5                     l563:	
  2550  05F5  0851               	movf	___fttol@exp1,w
  2551  05F6  1D03               	btfss	3,2
  2552  05F7  2DEA               	goto	l1373
  2553  05F8                     l1375:	
  2554  05F8  084C               	movf	___fttol@sign1,w
  2555  05F9  1903               	btfsc	3,2
  2556  05FA  2E06               	goto	l1379
  2557  05FB  09CD               	comf	___fttol@lval,f
  2558  05FC  09CE               	comf	___fttol@lval+1,f
  2559  05FD  09CF               	comf	___fttol@lval+2,f
  2560  05FE  09D0               	comf	___fttol@lval+3,f
  2561  05FF  0ACD               	incf	___fttol@lval,f
  2562  0600  1903               	skipnz
  2563  0601  0ACE               	incf	___fttol@lval+1,f
  2564  0602  1903               	skipnz
  2565  0603  0ACF               	incf	___fttol@lval+2,f
  2566  0604  1903               	skipnz
  2567  0605  0AD0               	incf	___fttol@lval+3,f
  2568  0606                     l1379:	
  2569  0606  0850               	movf	___fttol@lval+3,w
  2570  0607  00C7               	movwf	?___fttol+3
  2571  0608  084F               	movf	___fttol@lval+2,w
  2572  0609  00C6               	movwf	?___fttol+2
  2573  060A  084E               	movf	___fttol@lval+1,w
  2574  060B  00C5               	movwf	?___fttol+1
  2575  060C  084D               	movf	___fttol@lval,w
  2576  060D  00C4               	movwf	?___fttol
  2577  060E  0008               	return
  2578  060F                     __end_of___fttol:	
  2579                           
  2580                           	psect	text13
  2581  0335                     __ptext13:	
  2582 ;; *************** function ___ftmul *****************
  2583 ;; Defined at:
  2584 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;  f1              3   20[BANK0 ] float 
  2587 ;;  f2              3   23[BANK0 ] float 
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;  f3_as_produc    3   31[BANK0 ] unsigned um
  2590 ;;  sign            1   35[BANK0 ] unsigned char 
  2591 ;;  cntr            1   34[BANK0 ] unsigned char 
  2592 ;;  exp             1   30[BANK0 ] unsigned char 
  2593 ;; Return value:  Size  Location     Type
  2594 ;;                  3   20[BANK0 ] float 
  2595 ;; Registers used:
  2596 ;;		wreg, status,2, status,0, pclath, cstack
  2597 ;; Tracked objects:
  2598 ;;		On entry : 0/0
  2599 ;;		On exit  : 0/0
  2600 ;;		Unchanged: 0/0
  2601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2602 ;;      Params:         0       6       0       0       0
  2603 ;;      Locals:         0       6       0       0       0
  2604 ;;      Temps:          0       4       0       0       0
  2605 ;;      Totals:         0      16       0       0       0
  2606 ;;Total ram usage:       16 bytes
  2607 ;; Hardware stack levels used:    1
  2608 ;; Hardware stack levels required when called:    4
  2609 ;; This function calls:
  2610 ;;		___ftpack
  2611 ;; This function is called by:
  2612 ;;		_getPosicaoAtual
  2613 ;;		_main
  2614 ;; This function uses a non-reentrant model
  2615 ;;
  2616                           
  2617                           
  2618                           ;psect for function ___ftmul
  2619  0335                     ___ftmul:	
  2620                           
  2621                           ;incstack = 0
  2622                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  2623  0335  1283               	bcf	3,5	;RP0=0, select bank0
  2624  0336  1303               	bcf	3,6	;RP1=0, select bank0
  2625  0337  0834               	movf	___ftmul@f1,w
  2626  0338  00BA               	movwf	??___ftmul
  2627  0339  0835               	movf	___ftmul@f1+1,w
  2628  033A  00BB               	movwf	??___ftmul+1
  2629  033B  0836               	movf	___ftmul@f1+2,w
  2630  033C  00BC               	movwf	??___ftmul+2
  2631  033D  1003               	clrc
  2632  033E  0D3B               	rlf	??___ftmul+1,w
  2633  033F  0D3C               	rlf	??___ftmul+2,w
  2634  0340  00BD               	movwf	??___ftmul+3
  2635  0341  083D               	movf	??___ftmul+3,w
  2636  0342  00BE               	movwf	___ftmul@exp
  2637  0343  083E               	movf	___ftmul@exp,w
  2638  0344  1D03               	btfss	3,2
  2639  0345  2B4D               	goto	l1509
  2640  0346  3000               	movlw	0
  2641  0347  00B4               	movwf	?___ftmul
  2642  0348  3000               	movlw	0
  2643  0349  00B5               	movwf	?___ftmul+1
  2644  034A  3000               	movlw	0
  2645  034B  00B6               	movwf	?___ftmul+2
  2646  034C  0008               	return
  2647  034D                     l1509:	
  2648  034D  0837               	movf	___ftmul@f2,w
  2649  034E  00BA               	movwf	??___ftmul
  2650  034F  0838               	movf	___ftmul@f2+1,w
  2651  0350  00BB               	movwf	??___ftmul+1
  2652  0351  0839               	movf	___ftmul@f2+2,w
  2653  0352  00BC               	movwf	??___ftmul+2
  2654  0353  1003               	clrc
  2655  0354  0D3B               	rlf	??___ftmul+1,w
  2656  0355  0D3C               	rlf	??___ftmul+2,w
  2657  0356  00BD               	movwf	??___ftmul+3
  2658  0357  083D               	movf	??___ftmul+3,w
  2659  0358  00C3               	movwf	___ftmul@sign
  2660  0359  0843               	movf	___ftmul@sign,w
  2661  035A  1D03               	btfss	3,2
  2662  035B  2B63               	goto	l1515
  2663  035C  3000               	movlw	0
  2664  035D  00B4               	movwf	?___ftmul
  2665  035E  3000               	movlw	0
  2666  035F  00B5               	movwf	?___ftmul+1
  2667  0360  3000               	movlw	0
  2668  0361  00B6               	movwf	?___ftmul+2
  2669  0362  0008               	return
  2670  0363                     l1515:	
  2671  0363  0843               	movf	___ftmul@sign,w
  2672  0364  3E7B               	addlw	123
  2673  0365  00BA               	movwf	??___ftmul
  2674  0366  083A               	movf	??___ftmul,w
  2675  0367  07BE               	addwf	___ftmul@exp,f
  2676  0368  0834               	movf	___ftmul@f1,w
  2677  0369  00BA               	movwf	??___ftmul
  2678  036A  0835               	movf	___ftmul@f1+1,w
  2679  036B  00BB               	movwf	??___ftmul+1
  2680  036C  0836               	movf	___ftmul@f1+2,w
  2681  036D  00BC               	movwf	??___ftmul+2
  2682  036E  3010               	movlw	16
  2683  036F                     u1625:	
  2684  036F  1003               	clrc
  2685  0370  0CBC               	rrf	??___ftmul+2,f
  2686  0371  0CBB               	rrf	??___ftmul+1,f
  2687  0372  0CBA               	rrf	??___ftmul,f
  2688  0373  3EFF               	addlw	-1
  2689  0374  1D03               	skipz
  2690  0375  2B6F               	goto	u1625
  2691  0376  083A               	movf	??___ftmul,w
  2692  0377  00BD               	movwf	??___ftmul+3
  2693  0378  083D               	movf	??___ftmul+3,w
  2694  0379  00C3               	movwf	___ftmul@sign
  2695  037A  0837               	movf	___ftmul@f2,w
  2696  037B  00BA               	movwf	??___ftmul
  2697  037C  0838               	movf	___ftmul@f2+1,w
  2698  037D  00BB               	movwf	??___ftmul+1
  2699  037E  0839               	movf	___ftmul@f2+2,w
  2700  037F  00BC               	movwf	??___ftmul+2
  2701  0380  3010               	movlw	16
  2702  0381                     u1635:	
  2703  0381  1003               	clrc
  2704  0382  0CBC               	rrf	??___ftmul+2,f
  2705  0383  0CBB               	rrf	??___ftmul+1,f
  2706  0384  0CBA               	rrf	??___ftmul,f
  2707  0385  3EFF               	addlw	-1
  2708  0386  1D03               	skipz
  2709  0387  2B81               	goto	u1635
  2710  0388  083A               	movf	??___ftmul,w
  2711  0389  00BD               	movwf	??___ftmul+3
  2712  038A  083D               	movf	??___ftmul+3,w
  2713  038B  06C3               	xorwf	___ftmul@sign,f
  2714  038C  3080               	movlw	128
  2715  038D  00BA               	movwf	??___ftmul
  2716  038E  083A               	movf	??___ftmul,w
  2717  038F  05C3               	andwf	___ftmul@sign,f
  2718  0390  17B5               	bsf	___ftmul@f1+1,7
  2719  0391  17B8               	bsf	___ftmul@f2+1,7
  2720  0392  30FF               	movlw	255
  2721  0393  05B7               	andwf	___ftmul@f2,f
  2722  0394  30FF               	movlw	255
  2723  0395  05B8               	andwf	___ftmul@f2+1,f
  2724  0396  3000               	movlw	0
  2725  0397  05B9               	andwf	___ftmul@f2+2,f
  2726  0398  3000               	movlw	0
  2727  0399  00BF               	movwf	___ftmul@f3_as_product
  2728  039A  3000               	movlw	0
  2729  039B  00C0               	movwf	___ftmul@f3_as_product+1
  2730  039C  3000               	movlw	0
  2731  039D  00C1               	movwf	___ftmul@f3_as_product+2
  2732  039E  3007               	movlw	7
  2733  039F  00BA               	movwf	??___ftmul
  2734  03A0  083A               	movf	??___ftmul,w
  2735  03A1  00C2               	movwf	___ftmul@cntr
  2736  03A2                     l1527:	
  2737  03A2  1C34               	btfss	___ftmul@f1,0
  2738  03A3  2BB2               	goto	l1531
  2739  03A4  0837               	movf	___ftmul@f2,w
  2740  03A5  07BF               	addwf	___ftmul@f3_as_product,f
  2741  03A6  0838               	movf	___ftmul@f2+1,w
  2742  03A7  1103               	clrz
  2743  03A8  1803               	skipnc
  2744  03A9  0A38               	incf	___ftmul@f2+1,w
  2745  03AA  1D03               	btfss	3,2
  2746  03AB  07C0               	addwf	___ftmul@f3_as_product+1,f
  2747  03AC  0839               	movf	___ftmul@f2+2,w
  2748  03AD  1103               	clrz
  2749  03AE  1803               	skipnc
  2750  03AF  0A39               	incf	___ftmul@f2+2,w
  2751  03B0  1D03               	btfss	3,2
  2752  03B1  07C1               	addwf	___ftmul@f3_as_product+2,f
  2753  03B2                     l1531:	
  2754  03B2  3001               	movlw	1
  2755  03B3                     u1665:	
  2756  03B3  1003               	clrc
  2757  03B4  0CB6               	rrf	___ftmul@f1+2,f
  2758  03B5  0CB5               	rrf	___ftmul@f1+1,f
  2759  03B6  0CB4               	rrf	___ftmul@f1,f
  2760  03B7  3EFF               	addlw	-1
  2761  03B8  1D03               	skipz
  2762  03B9  2BB3               	goto	u1665
  2763  03BA  3001               	movlw	1
  2764  03BB                     u1675:	
  2765  03BB  1003               	clrc
  2766  03BC  0DB7               	rlf	___ftmul@f2,f
  2767  03BD  0DB8               	rlf	___ftmul@f2+1,f
  2768  03BE  0DB9               	rlf	___ftmul@f2+2,f
  2769  03BF  3EFF               	addlw	-1
  2770  03C0  1D03               	skipz
  2771  03C1  2BBB               	goto	u1675
  2772  03C2  3001               	movlw	1
  2773  03C3  02C2               	subwf	___ftmul@cntr,f
  2774  03C4  1D03               	btfss	3,2
  2775  03C5  2BA2               	goto	l1527
  2776  03C6  3009               	movlw	9
  2777  03C7  00BA               	movwf	??___ftmul
  2778  03C8  083A               	movf	??___ftmul,w
  2779  03C9  00C2               	movwf	___ftmul@cntr
  2780  03CA                     l1539:	
  2781  03CA  1C34               	btfss	___ftmul@f1,0
  2782  03CB  2BDA               	goto	l1543
  2783  03CC  0837               	movf	___ftmul@f2,w
  2784  03CD  07BF               	addwf	___ftmul@f3_as_product,f
  2785  03CE  0838               	movf	___ftmul@f2+1,w
  2786  03CF  1103               	clrz
  2787  03D0  1803               	skipnc
  2788  03D1  0A38               	incf	___ftmul@f2+1,w
  2789  03D2  1D03               	btfss	3,2
  2790  03D3  07C0               	addwf	___ftmul@f3_as_product+1,f
  2791  03D4  0839               	movf	___ftmul@f2+2,w
  2792  03D5  1103               	clrz
  2793  03D6  1803               	skipnc
  2794  03D7  0A39               	incf	___ftmul@f2+2,w
  2795  03D8  1D03               	btfss	3,2
  2796  03D9  07C1               	addwf	___ftmul@f3_as_product+2,f
  2797  03DA                     l1543:	
  2798  03DA  3001               	movlw	1
  2799  03DB                     u1715:	
  2800  03DB  1003               	clrc
  2801  03DC  0CB6               	rrf	___ftmul@f1+2,f
  2802  03DD  0CB5               	rrf	___ftmul@f1+1,f
  2803  03DE  0CB4               	rrf	___ftmul@f1,f
  2804  03DF  3EFF               	addlw	-1
  2805  03E0  1D03               	skipz
  2806  03E1  2BDB               	goto	u1715
  2807  03E2  3001               	movlw	1
  2808  03E3                     u1725:	
  2809  03E3  1003               	clrc
  2810  03E4  0CC1               	rrf	___ftmul@f3_as_product+2,f
  2811  03E5  0CC0               	rrf	___ftmul@f3_as_product+1,f
  2812  03E6  0CBF               	rrf	___ftmul@f3_as_product,f
  2813  03E7  3EFF               	addlw	-1
  2814  03E8  1D03               	skipz
  2815  03E9  2BE3               	goto	u1725
  2816  03EA  3001               	movlw	1
  2817  03EB  02C2               	subwf	___ftmul@cntr,f
  2818  03EC  1D03               	btfss	3,2
  2819  03ED  2BCA               	goto	l1539
  2820  03EE  083F               	movf	___ftmul@f3_as_product,w
  2821  03EF  00A8               	movwf	___ftpack@arg
  2822  03F0  0840               	movf	___ftmul@f3_as_product+1,w
  2823  03F1  00A9               	movwf	___ftpack@arg+1
  2824  03F2  0841               	movf	___ftmul@f3_as_product+2,w
  2825  03F3  00AA               	movwf	___ftpack@arg+2
  2826  03F4  083E               	movf	___ftmul@exp,w
  2827  03F5  00BA               	movwf	??___ftmul
  2828  03F6  083A               	movf	??___ftmul,w
  2829  03F7  00AB               	movwf	___ftpack@exp
  2830  03F8  0843               	movf	___ftmul@sign,w
  2831  03F9  00BB               	movwf	??___ftmul+1
  2832  03FA  083B               	movf	??___ftmul+1,w
  2833  03FB  00AC               	movwf	___ftpack@sign
  2834  03FC  120A  118A  2682   	fcall	___ftpack
  2835  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  2836  0400  1303               	bcf	3,6	;RP1=0, select bank0
  2837  0401  0828               	movf	?___ftpack,w
  2838  0402  00B4               	movwf	?___ftmul
  2839  0403  0829               	movf	?___ftpack+1,w
  2840  0404  00B5               	movwf	?___ftmul+1
  2841  0405  082A               	movf	?___ftpack+2,w
  2842  0406  00B6               	movwf	?___ftmul+2
  2843  0407  0008               	return
  2844  0408                     __end_of___ftmul:	
  2845                           
  2846                           	psect	text14
  2847  0682                     __ptext14:	
  2848 ;; *************** function ___ftpack *****************
  2849 ;; Defined at:
  2850 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  2851 ;; Parameters:    Size  Location     Type
  2852 ;;  arg             3    8[BANK0 ] unsigned um
  2853 ;;  exp             1   11[BANK0 ] unsigned char 
  2854 ;;  sign            1   12[BANK0 ] unsigned char 
  2855 ;; Auto vars:     Size  Location     Type
  2856 ;;		None
  2857 ;; Return value:  Size  Location     Type
  2858 ;;                  3    8[BANK0 ] float 
  2859 ;; Registers used:
  2860 ;;		wreg, status,2, status,0
  2861 ;; Tracked objects:
  2862 ;;		On entry : 0/0
  2863 ;;		On exit  : 0/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2866 ;;      Params:         0       5       0       0       0
  2867 ;;      Locals:         0       0       0       0       0
  2868 ;;      Temps:          0       3       0       0       0
  2869 ;;      Totals:         0       8       0       0       0
  2870 ;;Total ram usage:        8 bytes
  2871 ;; Hardware stack levels used:    1
  2872 ;; Hardware stack levels required when called:    3
  2873 ;; This function calls:
  2874 ;;		Nothing
  2875 ;; This function is called by:
  2876 ;;		___ftdiv
  2877 ;;		___ftmul
  2878 ;;		___lwtoft
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           
  2883                           ;psect for function ___ftpack
  2884  0682                     ___ftpack:	
  2885                           
  2886                           ;incstack = 0
  2887                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2888  0682  1283               	bcf	3,5	;RP0=0, select bank0
  2889  0683  1303               	bcf	3,6	;RP1=0, select bank0
  2890  0684  082B               	movf	___ftpack@exp,w
  2891  0685  1903               	btfsc	3,2
  2892  0686  2E8C               	goto	l1261
  2893  0687  082A               	movf	___ftpack@arg+2,w
  2894  0688  0429               	iorwf	___ftpack@arg+1,w
  2895  0689  0428               	iorwf	___ftpack@arg,w
  2896  068A  1D03               	skipz
  2897  068B  2E9F               	goto	l1267
  2898  068C                     l1261:	
  2899  068C  3000               	movlw	0
  2900  068D  00A8               	movwf	?___ftpack
  2901  068E  3000               	movlw	0
  2902  068F  00A9               	movwf	?___ftpack+1
  2903  0690  3000               	movlw	0
  2904  0691  00AA               	movwf	?___ftpack+2
  2905  0692  0008               	return
  2906  0693                     l1265:	
  2907  0693  3001               	movlw	1
  2908  0694  00AD               	movwf	??___ftpack
  2909  0695  082D               	movf	??___ftpack,w
  2910  0696  07AB               	addwf	___ftpack@exp,f
  2911  0697  3001               	movlw	1
  2912  0698                     u1145:	
  2913  0698  1003               	clrc
  2914  0699  0CAA               	rrf	___ftpack@arg+2,f
  2915  069A  0CA9               	rrf	___ftpack@arg+1,f
  2916  069B  0CA8               	rrf	___ftpack@arg,f
  2917  069C  3EFF               	addlw	-1
  2918  069D  1D03               	skipz
  2919  069E  2E98               	goto	u1145
  2920  069F                     l1267:	
  2921  069F  30FE               	movlw	254
  2922  06A0  052A               	andwf	___ftpack@arg+2,w
  2923  06A1  1903               	btfsc	3,2
  2924  06A2  2EBA               	goto	l472
  2925  06A3  2E93               	goto	l1265
  2926  06A4                     l1269:	
  2927  06A4  3001               	movlw	1
  2928  06A5  00AD               	movwf	??___ftpack
  2929  06A6  082D               	movf	??___ftpack,w
  2930  06A7  07AB               	addwf	___ftpack@exp,f
  2931  06A8  3001               	movlw	1
  2932  06A9  07A8               	addwf	___ftpack@arg,f
  2933  06AA  3000               	movlw	0
  2934  06AB  1803               	skipnc
  2935  06AC  3001               	movlw	1
  2936  06AD  07A9               	addwf	___ftpack@arg+1,f
  2937  06AE  3000               	movlw	0
  2938  06AF  1803               	skipnc
  2939  06B0  3001               	movlw	1
  2940  06B1  07AA               	addwf	___ftpack@arg+2,f
  2941  06B2  3001               	movlw	1
  2942  06B3                     u1165:	
  2943  06B3  1003               	clrc
  2944  06B4  0CAA               	rrf	___ftpack@arg+2,f
  2945  06B5  0CA9               	rrf	___ftpack@arg+1,f
  2946  06B6  0CA8               	rrf	___ftpack@arg,f
  2947  06B7  3EFF               	addlw	-1
  2948  06B8  1D03               	skipz
  2949  06B9  2EB3               	goto	u1165
  2950  06BA                     l472:	
  2951  06BA  30FF               	movlw	255
  2952  06BB  052A               	andwf	___ftpack@arg+2,w
  2953  06BC  1903               	btfsc	3,2
  2954  06BD  2EC9               	goto	l1277
  2955  06BE  2EA4               	goto	l1269
  2956  06BF                     l1275:	
  2957  06BF  3001               	movlw	1
  2958  06C0  02AB               	subwf	___ftpack@exp,f
  2959  06C1  3001               	movlw	1
  2960  06C2                     u1185:	
  2961  06C2  1003               	clrc
  2962  06C3  0DA8               	rlf	___ftpack@arg,f
  2963  06C4  0DA9               	rlf	___ftpack@arg+1,f
  2964  06C5  0DAA               	rlf	___ftpack@arg+2,f
  2965  06C6  3EFF               	addlw	-1
  2966  06C7  1D03               	skipz
  2967  06C8  2EC2               	goto	u1185
  2968  06C9                     l1277:	
  2969  06C9  1BA9               	btfsc	___ftpack@arg+1,7
  2970  06CA  2ECF               	goto	l479
  2971  06CB  3002               	movlw	2
  2972  06CC  022B               	subwf	___ftpack@exp,w
  2973  06CD  1803               	skipnc
  2974  06CE  2EBF               	goto	l1275
  2975  06CF                     l479:	
  2976  06CF  182B               	btfsc	___ftpack@exp,0
  2977  06D0  2ED7               	goto	l480
  2978  06D1  30FF               	movlw	255
  2979  06D2  05A8               	andwf	___ftpack@arg,f
  2980  06D3  307F               	movlw	127
  2981  06D4  05A9               	andwf	___ftpack@arg+1,f
  2982  06D5  30FF               	movlw	255
  2983  06D6  05AA               	andwf	___ftpack@arg+2,f
  2984  06D7                     l480:	
  2985  06D7  1003               	clrc
  2986  06D8  0CAB               	rrf	___ftpack@exp,f
  2987  06D9  082B               	movf	___ftpack@exp,w
  2988  06DA  00AD               	movwf	??___ftpack
  2989  06DB  01AE               	clrf	??___ftpack+1
  2990  06DC  01AF               	clrf	??___ftpack+2
  2991  06DD  3010               	movlw	16
  2992  06DE                     u1225:	
  2993  06DE  1003               	clrc
  2994  06DF  0DAD               	rlf	??___ftpack,f
  2995  06E0  0DAE               	rlf	??___ftpack+1,f
  2996  06E1  0DAF               	rlf	??___ftpack+2,f
  2997  06E2  3EFF               	addlw	-1
  2998  06E3  1D03               	skipz
  2999  06E4  2EDE               	goto	u1225
  3000  06E5  082D               	movf	??___ftpack,w
  3001  06E6  04A8               	iorwf	___ftpack@arg,f
  3002  06E7  082E               	movf	??___ftpack+1,w
  3003  06E8  04A9               	iorwf	___ftpack@arg+1,f
  3004  06E9  082F               	movf	??___ftpack+2,w
  3005  06EA  04AA               	iorwf	___ftpack@arg+2,f
  3006  06EB  082C               	movf	___ftpack@sign,w
  3007  06EC  1903               	btfsc	3,2
  3008  06ED  0008               	return
  3009  06EE  17AA               	bsf	___ftpack@arg+2,7
  3010  06EF  0008               	return
  3011  06F0                     __end_of___ftpack:	
  3012                           
  3013                           	psect	text15
  3014  0F61                     __ptext15:	
  3015 ;; *************** function _calculaVelocidade *****************
  3016 ;; Defined at:
  3017 ;;		line 46 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor-pic16f887\stepper_motor\
      +stepper.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;		None
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;		None
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  1    wreg      void 
  3024 ;; Registers used:
  3025 ;;		wreg, status,2, status,0, pclath, cstack
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3031 ;;      Params:         0       0       0       0       0
  3032 ;;      Locals:         0       2       0       0       0
  3033 ;;      Temps:          0       2       0       0       0
  3034 ;;      Totals:         0       4       0       0       0
  3035 ;;Total ram usage:        4 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:    4
  3038 ;; This function calls:
  3039 ;;		___awdiv
  3040 ;;		___wmul
  3041 ;; This function is called by:
  3042 ;;		_main
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           
  3047                           ;psect for function _calculaVelocidade
  3048  0F61                     _calculaVelocidade:	
  3049                           
  3050                           ;stepper.c: 47: speed = (error == 0) ? 0 : (4314/PR2)*100/81;
  3051                           
  3052                           ;incstack = 0
  3053                           ; Regs used in _calculaVelocidade: [wreg+status,2+status,0+pclath+cstack]
  3054  0F61  1283               	bcf	3,5	;RP0=0, select bank0
  3055  0F62  1303               	bcf	3,6	;RP1=0, select bank0
  3056  0F63  085A               	movf	_error,w
  3057  0F64  045B               	iorwf	_error+1,w
  3058  0F65  1903               	btfsc	3,2
  3059  0F66  2FA8               	goto	l1807
  3060  0F67  1683               	bsf	3,5	;RP0=1, select bank1
  3061  0F68  1303               	bcf	3,6	;RP1=0, select bank1
  3062  0F69  0812               	movf	18,w	;volatile
  3063  0F6A  1283               	bcf	3,5	;RP0=0, select bank0
  3064  0F6B  1303               	bcf	3,6	;RP1=0, select bank0
  3065  0F6C  00B7               	movwf	??_calculaVelocidade
  3066  0F6D  01B8               	clrf	??_calculaVelocidade+1
  3067  0F6E  0837               	movf	??_calculaVelocidade,w
  3068  0F6F  00A8               	movwf	___awdiv@divisor
  3069  0F70  0838               	movf	??_calculaVelocidade+1,w
  3070  0F71  00A9               	movwf	___awdiv@divisor+1
  3071  0F72  30DA               	movlw	218
  3072  0F73  00AA               	movwf	___awdiv@dividend
  3073  0F74  3010               	movlw	16
  3074  0F75  00AB               	movwf	___awdiv@dividend+1
  3075  0F76  120A  118A  275A  120A  158A  	fcall	___awdiv
  3076  0F7B  1283               	bcf	3,5	;RP0=0, select bank0
  3077  0F7C  1303               	bcf	3,6	;RP1=0, select bank0
  3078  0F7D  0829               	movf	?___awdiv+1,w
  3079  0F7E  00B2               	movwf	___wmul@multiplier+1
  3080  0F7F  0828               	movf	?___awdiv,w
  3081  0F80  00B1               	movwf	___wmul@multiplier
  3082  0F81  3064               	movlw	100
  3083  0F82  00B3               	movwf	___wmul@multiplicand
  3084  0F83  3000               	movlw	0
  3085  0F84  00B4               	movwf	___wmul@multiplicand+1
  3086  0F85  120A  158A  2670  120A  158A  	fcall	___wmul
  3087  0F8A  1283               	bcf	3,5	;RP0=0, select bank0
  3088  0F8B  1303               	bcf	3,6	;RP1=0, select bank0
  3089  0F8C  0832               	movf	?___wmul+1,w
  3090  0F8D  00BA               	movwf	_calculaVelocidade$745+1
  3091  0F8E  0831               	movf	?___wmul,w
  3092  0F8F  00B9               	movwf	_calculaVelocidade$745
  3093  0F90  3051               	movlw	81
  3094  0F91  00A8               	movwf	___awdiv@divisor
  3095  0F92  3000               	movlw	0
  3096  0F93  00A9               	movwf	___awdiv@divisor+1
  3097  0F94  083A               	movf	_calculaVelocidade$745+1,w
  3098  0F95  00AB               	movwf	___awdiv@dividend+1
  3099  0F96  0839               	movf	_calculaVelocidade$745,w
  3100  0F97  00AA               	movwf	___awdiv@dividend
  3101  0F98  120A  118A  275A   	fcall	___awdiv
  3102  0F9B  1283               	bcf	3,5	;RP0=0, select bank0
  3103  0F9C  1303               	bcf	3,6	;RP1=0, select bank0
  3104  0F9D  0829               	movf	?___awdiv+1,w
  3105  0F9E  1683               	bsf	3,5	;RP0=1, select bank1
  3106  0F9F  1303               	bcf	3,6	;RP1=0, select bank1
  3107  0FA0  00A9               	movwf	(_speed+1)^(0+128)
  3108  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  3109  0FA2  1303               	bcf	3,6	;RP1=0, select bank0
  3110  0FA3  0828               	movf	?___awdiv,w
  3111  0FA4  1683               	bsf	3,5	;RP0=1, select bank1
  3112  0FA5  1303               	bcf	3,6	;RP1=0, select bank1
  3113  0FA6  00A8               	movwf	_speed^(0+128)
  3114  0FA7  0008               	return
  3115  0FA8                     l1807:	
  3116  0FA8  1683               	bsf	3,5	;RP0=1, select bank1
  3117  0FA9  1303               	bcf	3,6	;RP1=0, select bank1
  3118  0FAA  01A8               	clrf	_speed^(0+128)
  3119  0FAB  01A9               	clrf	(_speed+1)^(0+128)
  3120  0FAC  0008               	return
  3121  0FAD                     __end_of_calculaVelocidade:	
  3122                           
  3123                           	psect	text16
  3124  0E70                     __ptext16:	
  3125 ;; *************** function ___wmul *****************
  3126 ;; Defined at:
  3127 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;  multiplier      2   17[BANK0 ] unsigned int 
  3130 ;;  multiplicand    2   19[BANK0 ] unsigned int 
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;  product         2   21[BANK0 ] unsigned int 
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  2   17[BANK0 ] unsigned int 
  3135 ;; Registers used:
  3136 ;;		wreg, status,2, status,0
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3142 ;;      Params:         0       4       0       0       0
  3143 ;;      Locals:         0       2       0       0       0
  3144 ;;      Temps:          0       0       0       0       0
  3145 ;;      Totals:         0       6       0       0       0
  3146 ;;Total ram usage:        6 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:    3
  3149 ;; This function calls:
  3150 ;;		Nothing
  3151 ;; This function is called by:
  3152 ;;		_calculaVelocidade
  3153 ;;		_int2char
  3154 ;; This function uses a non-reentrant model
  3155 ;;
  3156                           
  3157                           
  3158                           ;psect for function ___wmul
  3159  0E70                     ___wmul:	
  3160                           
  3161                           ;incstack = 0
  3162                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3163  0E70  1283               	bcf	3,5	;RP0=0, select bank0
  3164  0E71  1303               	bcf	3,6	;RP1=0, select bank0
  3165  0E72  01B5               	clrf	___wmul@product
  3166  0E73  01B6               	clrf	___wmul@product+1
  3167  0E74                     l1765:	
  3168  0E74  1C31               	btfss	___wmul@multiplier,0
  3169  0E75  2E7C               	goto	l307
  3170  0E76  0833               	movf	___wmul@multiplicand,w
  3171  0E77  07B5               	addwf	___wmul@product,f
  3172  0E78  1803               	skipnc
  3173  0E79  0AB6               	incf	___wmul@product+1,f
  3174  0E7A  0834               	movf	___wmul@multiplicand+1,w
  3175  0E7B  07B6               	addwf	___wmul@product+1,f
  3176  0E7C                     l307:	
  3177  0E7C  3001               	movlw	1
  3178  0E7D                     u2105:	
  3179  0E7D  1003               	clrc
  3180  0E7E  0DB3               	rlf	___wmul@multiplicand,f
  3181  0E7F  0DB4               	rlf	___wmul@multiplicand+1,f
  3182  0E80  3EFF               	addlw	-1
  3183  0E81  1D03               	skipz
  3184  0E82  2E7D               	goto	u2105
  3185  0E83  3001               	movlw	1
  3186  0E84                     u2115:	
  3187  0E84  1003               	clrc
  3188  0E85  0CB2               	rrf	___wmul@multiplier+1,f
  3189  0E86  0CB1               	rrf	___wmul@multiplier,f
  3190  0E87  3EFF               	addlw	-1
  3191  0E88  1D03               	skipz
  3192  0E89  2E84               	goto	u2115
  3193  0E8A  0831               	movf	___wmul@multiplier,w
  3194  0E8B  0432               	iorwf	___wmul@multiplier+1,w
  3195  0E8C  1D03               	btfss	3,2
  3196  0E8D  2E74               	goto	l1765
  3197  0E8E  0836               	movf	___wmul@product+1,w
  3198  0E8F  00B2               	movwf	?___wmul+1
  3199  0E90  0835               	movf	___wmul@product,w
  3200  0E91  00B1               	movwf	?___wmul
  3201  0E92  0008               	return
  3202  0E93                     __end_of___wmul:	
  3203                           
  3204                           	psect	text17
  3205  075A                     __ptext17:	
  3206 ;; *************** function ___awdiv *****************
  3207 ;; Defined at:
  3208 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;  divisor         2    8[BANK0 ] int 
  3211 ;;  dividend        2   10[BANK0 ] int 
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;  quotient        2   15[BANK0 ] int 
  3214 ;;  sign            1   14[BANK0 ] unsigned char 
  3215 ;;  counter         1   13[BANK0 ] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  2    8[BANK0 ] int 
  3218 ;; Registers used:
  3219 ;;		wreg, status,2, status,0
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3225 ;;      Params:         0       4       0       0       0
  3226 ;;      Locals:         0       4       0       0       0
  3227 ;;      Temps:          0       1       0       0       0
  3228 ;;      Totals:         0       9       0       0       0
  3229 ;;Total ram usage:        9 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    3
  3232 ;; This function calls:
  3233 ;;		Nothing
  3234 ;; This function is called by:
  3235 ;;		_calculaVelocidade
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           
  3240                           ;psect for function ___awdiv
  3241  075A                     ___awdiv:	
  3242                           
  3243                           ;incstack = 0
  3244                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3245  075A  1283               	bcf	3,5	;RP0=0, select bank0
  3246  075B  1303               	bcf	3,6	;RP1=0, select bank0
  3247  075C  01AE               	clrf	___awdiv@sign
  3248  075D  1FA9               	btfss	___awdiv@divisor+1,7
  3249  075E  2F66               	goto	l1467
  3250  075F  09A8               	comf	___awdiv@divisor,f
  3251  0760  09A9               	comf	___awdiv@divisor+1,f
  3252  0761  0AA8               	incf	___awdiv@divisor,f
  3253  0762  1903               	skipnz
  3254  0763  0AA9               	incf	___awdiv@divisor+1,f
  3255  0764  01AE               	clrf	___awdiv@sign
  3256  0765  0AAE               	incf	___awdiv@sign,f
  3257  0766                     l1467:	
  3258  0766  1FAB               	btfss	___awdiv@dividend+1,7
  3259  0767  2F71               	goto	l1473
  3260  0768  09AA               	comf	___awdiv@dividend,f
  3261  0769  09AB               	comf	___awdiv@dividend+1,f
  3262  076A  0AAA               	incf	___awdiv@dividend,f
  3263  076B  1903               	skipnz
  3264  076C  0AAB               	incf	___awdiv@dividend+1,f
  3265  076D  3001               	movlw	1
  3266  076E  00AC               	movwf	??___awdiv
  3267  076F  082C               	movf	??___awdiv,w
  3268  0770  06AE               	xorwf	___awdiv@sign,f
  3269  0771                     l1473:	
  3270  0771  01AF               	clrf	___awdiv@quotient
  3271  0772  01B0               	clrf	___awdiv@quotient+1
  3272  0773  0828               	movf	___awdiv@divisor,w
  3273  0774  0429               	iorwf	___awdiv@divisor+1,w
  3274  0775  1903               	btfsc	3,2
  3275  0776  2FA8               	goto	l1495
  3276  0777  01AD               	clrf	___awdiv@counter
  3277  0778  0AAD               	incf	___awdiv@counter,f
  3278  0779                     l1483:	
  3279  0779  1BA9               	btfsc	___awdiv@divisor+1,7
  3280  077A  2F87               	goto	l1485
  3281  077B  3001               	movlw	1
  3282  077C                     u1535:	
  3283  077C  1003               	clrc
  3284  077D  0DA8               	rlf	___awdiv@divisor,f
  3285  077E  0DA9               	rlf	___awdiv@divisor+1,f
  3286  077F  3EFF               	addlw	-1
  3287  0780  1D03               	skipz
  3288  0781  2F7C               	goto	u1535
  3289  0782  3001               	movlw	1
  3290  0783  00AC               	movwf	??___awdiv
  3291  0784  082C               	movf	??___awdiv,w
  3292  0785  07AD               	addwf	___awdiv@counter,f
  3293  0786  2F79               	goto	l1483
  3294  0787                     l1485:	
  3295  0787  3001               	movlw	1
  3296  0788                     u1555:	
  3297  0788  1003               	clrc
  3298  0789  0DAF               	rlf	___awdiv@quotient,f
  3299  078A  0DB0               	rlf	___awdiv@quotient+1,f
  3300  078B  3EFF               	addlw	-1
  3301  078C  1D03               	skipz
  3302  078D  2F88               	goto	u1555
  3303  078E  0829               	movf	___awdiv@divisor+1,w
  3304  078F  022B               	subwf	___awdiv@dividend+1,w
  3305  0790  1D03               	skipz
  3306  0791  2F94               	goto	u1565
  3307  0792  0828               	movf	___awdiv@divisor,w
  3308  0793  022A               	subwf	___awdiv@dividend,w
  3309  0794                     u1565:	
  3310  0794  1C03               	skipc
  3311  0795  2F9D               	goto	l1491
  3312  0796  0828               	movf	___awdiv@divisor,w
  3313  0797  02AA               	subwf	___awdiv@dividend,f
  3314  0798  0829               	movf	___awdiv@divisor+1,w
  3315  0799  1C03               	skipc
  3316  079A  03AB               	decf	___awdiv@dividend+1,f
  3317  079B  02AB               	subwf	___awdiv@dividend+1,f
  3318  079C  142F               	bsf	___awdiv@quotient,0
  3319  079D                     l1491:	
  3320  079D  3001               	movlw	1
  3321  079E                     u1575:	
  3322  079E  1003               	clrc
  3323  079F  0CA9               	rrf	___awdiv@divisor+1,f
  3324  07A0  0CA8               	rrf	___awdiv@divisor,f
  3325  07A1  3EFF               	addlw	-1
  3326  07A2  1D03               	skipz
  3327  07A3  2F9E               	goto	u1575
  3328  07A4  3001               	movlw	1
  3329  07A5  02AD               	subwf	___awdiv@counter,f
  3330  07A6  1D03               	btfss	3,2
  3331  07A7  2F87               	goto	l1485
  3332  07A8                     l1495:	
  3333  07A8  082E               	movf	___awdiv@sign,w
  3334  07A9  1903               	btfsc	3,2
  3335  07AA  2FB0               	goto	l1499
  3336  07AB  09AF               	comf	___awdiv@quotient,f
  3337  07AC  09B0               	comf	___awdiv@quotient+1,f
  3338  07AD  0AAF               	incf	___awdiv@quotient,f
  3339  07AE  1903               	skipnz
  3340  07AF  0AB0               	incf	___awdiv@quotient+1,f
  3341  07B0                     l1499:	
  3342  07B0  0830               	movf	___awdiv@quotient+1,w
  3343  07B1  00A9               	movwf	?___awdiv+1
  3344  07B2  082F               	movf	___awdiv@quotient,w
  3345  07B3  00A8               	movwf	?___awdiv
  3346  07B4  0008               	return
  3347  07B5                     __end_of___awdiv:	
  3348                           
  3349                           	psect	text18
  3350  06F0                     __ptext18:	
  3351 ;; *************** function _LCD_sendString *****************
  3352 ;; Defined at:
  3353 ;;		line 92 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor-pic16f887\stepper_motor\
      +lcd.c"
  3354 ;; Parameters:    Size  Location     Type
  3355 ;;  string          2   33[BANK0 ] PTR unsigned char 
  3356 ;;		 -> STR_3(5), STR_2(4), c_int_value(2), STR_1(4), 
  3357 ;;  linha           1   35[BANK0 ] unsigned char 
  3358 ;;  coluna          1   36[BANK0 ] unsigned char 
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;  i               1   39[BANK0 ] unsigned char 
  3361 ;;  i               1   40[BANK0 ] unsigned char 
  3362 ;;  col             1   38[BANK0 ] unsigned char 
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  1    wreg      void 
  3365 ;; Registers used:
  3366 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3372 ;;      Params:         0       4       0       0       0
  3373 ;;      Locals:         0       3       0       0       0
  3374 ;;      Temps:          0       1       0       0       0
  3375 ;;      Totals:         0       8       0       0       0
  3376 ;;Total ram usage:        8 bytes
  3377 ;; Hardware stack levels used:    1
  3378 ;; Hardware stack levels required when called:    6
  3379 ;; This function calls:
  3380 ;;		_LCD_SendByte
  3381 ;;		_setCursor
  3382 ;; This function is called by:
  3383 ;;		_main
  3384 ;; This function uses a non-reentrant model
  3385 ;;
  3386                           
  3387                           
  3388                           ;psect for function _LCD_sendString
  3389  06F0                     _LCD_sendString:	
  3390                           
  3391                           ;lcd.c: 94: if(coluna == 0){
  3392                           
  3393                           ;incstack = 0
  3394                           ; Regs used in _LCD_sendString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3395  06F0  1283               	bcf	3,5	;RP0=0, select bank0
  3396  06F1  1303               	bcf	3,6	;RP1=0, select bank0
  3397  06F2  0844               	movf	LCD_sendString@coluna,w
  3398  06F3  1D03               	btfss	3,2
  3399  06F4  2F1C               	goto	l1635
  3400                           
  3401                           ;lcd.c: 95: for(uint8_t i = 0; i < 17; i++, coluna++){
  3402  06F5  01C7               	clrf	LCD_sendString@i
  3403  06F6  3011               	movlw	17
  3404  06F7  0247               	subwf	LCD_sendString@i,w
  3405  06F8  1803               	btfsc	3,0
  3406  06F9  2F15               	goto	l1631
  3407  06FA                     l1623:	
  3408                           
  3409                           ;lcd.c: 96: if(string[i] == '\0') break;
  3410  06FA  0847               	movf	LCD_sendString@i,w
  3411  06FB  0741               	addwf	LCD_sendString@string,w
  3412  06FC  0084               	movwf	4
  3413  06FD  0842               	movf	LCD_sendString@string+1,w
  3414  06FE  1803               	skipnc
  3415  06FF  0A42               	incf	LCD_sendString@string+1,w
  3416  0700  00FF               	movwf	127
  3417  0701  120A  158A  2000  120A  118A  	fcall	stringtab
  3418  0706  3A00               	xorlw	0
  3419  0707  1903               	btfsc	3,2
  3420  0708  2F15               	goto	l1631
  3421  0709  3001               	movlw	1
  3422  070A  00C5               	movwf	??_LCD_sendString
  3423  070B  0845               	movf	??_LCD_sendString,w
  3424  070C  07C7               	addwf	LCD_sendString@i,f
  3425  070D  3001               	movlw	1
  3426  070E  00C5               	movwf	??_LCD_sendString
  3427  070F  0845               	movf	??_LCD_sendString,w
  3428  0710  07C4               	addwf	LCD_sendString@coluna,f
  3429  0711  3011               	movlw	17
  3430  0712  0247               	subwf	LCD_sendString@i,w
  3431  0713  1C03               	skipc
  3432  0714  2EFA               	goto	l1623
  3433  0715                     l1631:	
  3434                           
  3435                           ;lcd.c: 97: }
  3436                           ;lcd.c: 98: uint8_t col = 18 - coluna;
  3437  0715  0344               	decf	LCD_sendString@coluna,w
  3438  0716  3AFF               	xorlw	255
  3439  0717  3E12               	addlw	18
  3440  0718  00C5               	movwf	??_LCD_sendString
  3441  0719  0845               	movf	??_LCD_sendString,w
  3442  071A  00C6               	movwf	LCD_sendString@col
  3443  071B  2F1E               	goto	L1
  3444  071C                     l1635:	
  3445                           ;lcd.c: 100: }else{
  3446                           
  3447                           ;lcd.c: 99: setCursor(linha, coluna);
  3448                           
  3449                           
  3450                           ;lcd.c: 101: setCursor(linha, coluna);
  3451  071C  1283               	bcf	3,5	;RP0=0, select bank0
  3452  071D  1303               	bcf	3,6	;RP1=0, select bank0
  3453  071E                     L1:	
  3454  071E  0844               	movf	LCD_sendString@coluna,w
  3455  071F  00C5               	movwf	??_LCD_sendString
  3456  0720  0845               	movf	??_LCD_sendString,w
  3457  0721  00BD               	movwf	setCursor@coluna
  3458  0722  0843               	movf	LCD_sendString@linha,w
  3459  0723  120A  158A  2655  120A  118A  	fcall	_setCursor
  3460                           
  3461                           ;lcd.c: 102: }
  3462                           ;lcd.c: 105: for(uint8_t i = 0; i < 17; i++){
  3463  0728  1283               	bcf	3,5	;RP0=0, select bank0
  3464  0729  1303               	bcf	3,6	;RP1=0, select bank0
  3465  072A  01C8               	clrf	LCD_sendString@i_330
  3466  072B                     L2:	
  3467  072B  3011               	movlw	17
  3468  072C  0248               	subwf	LCD_sendString@i_330,w
  3469  072D  1803               	btfsc	3,0
  3470  072E  0008               	return
  3471                           
  3472                           ;lcd.c: 106: if(string[i] == '\0') break;
  3473  072F  0848               	movf	LCD_sendString@i_330,w
  3474  0730  0741               	addwf	LCD_sendString@string,w
  3475  0731  0084               	movwf	4
  3476  0732  0842               	movf	LCD_sendString@string+1,w
  3477  0733  1803               	skipnc
  3478  0734  0A42               	incf	LCD_sendString@string+1,w
  3479  0735  00FF               	movwf	127
  3480  0736  120A  158A  2000  120A  118A  	fcall	stringtab
  3481  073B  3A00               	xorlw	0
  3482  073C  1903               	btfsc	3,2
  3483  073D  0008               	return
  3484                           
  3485                           ;lcd.c: 107: LCD_SendByte(1, string[i]);
  3486  073E  0848               	movf	LCD_sendString@i_330,w
  3487  073F  0741               	addwf	LCD_sendString@string,w
  3488  0740  0084               	movwf	4
  3489  0741  0842               	movf	LCD_sendString@string+1,w
  3490  0742  1803               	skipnc
  3491  0743  0A42               	incf	LCD_sendString@string+1,w
  3492  0744  00FF               	movwf	127
  3493  0745  120A  158A  2000  120A  118A  	fcall	stringtab
  3494  074A  00C5               	movwf	??_LCD_sendString
  3495  074B  0845               	movf	??_LCD_sendString,w
  3496  074C  00B5               	movwf	LCD_SendByte@byte
  3497  074D  3001               	movlw	1
  3498  074E  120A  118A  27B5  120A  118A  	fcall	_LCD_SendByte
  3499  0753  3001               	movlw	1
  3500  0754  1283               	bcf	3,5	;RP0=0, select bank0
  3501  0755  1303               	bcf	3,6	;RP1=0, select bank0
  3502  0756  00C5               	movwf	??_LCD_sendString
  3503  0757  0845               	movf	??_LCD_sendString,w
  3504  0758  07C8               	addwf	LCD_sendString@i_330,f
  3505  0759  2F2B               	goto	L2
  3506  075A                     __end_of_LCD_sendString:	
  3507                           
  3508                           	psect	text19
  3509  0E55                     __ptext19:	
  3510 ;; *************** function _setCursor *****************
  3511 ;; Defined at:
  3512 ;;		line 73 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor-pic16f887\stepper_motor\
      +lcd.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;  linha           1    wreg     unsigned char 
  3515 ;;  coluna          1   29[BANK0 ] unsigned char 
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  linha           1   31[BANK0 ] unsigned char 
  3518 ;;  aux             1   32[BANK0 ] unsigned char 
  3519 ;; Return value:  Size  Location     Type
  3520 ;;                  1    wreg      void 
  3521 ;; Registers used:
  3522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3528 ;;      Params:         0       1       0       0       0
  3529 ;;      Locals:         0       2       0       0       0
  3530 ;;      Temps:          0       1       0       0       0
  3531 ;;      Totals:         0       4       0       0       0
  3532 ;;Total ram usage:        4 bytes
  3533 ;; Hardware stack levels used:    1
  3534 ;; Hardware stack levels required when called:    5
  3535 ;; This function calls:
  3536 ;;		_LCD_SendByte
  3537 ;; This function is called by:
  3538 ;;		_LCD_sendString
  3539 ;;		_sendChar
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543                           
  3544                           ;psect for function _setCursor
  3545  0E55                     _setCursor:	
  3546                           
  3547                           ;incstack = 0
  3548                           ; Regs used in _setCursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3549                           ;setCursor@linha stored from wreg
  3550  0E55  1283               	bcf	3,5	;RP0=0, select bank0
  3551  0E56  1303               	bcf	3,6	;RP1=0, select bank0
  3552  0E57  00BF               	movwf	setCursor@linha
  3553                           
  3554                           ;lcd.c: 74: uint8_t aux;
  3555                           ;lcd.c: 75: if(linha == 2)
  3556  0E58  3002               	movlw	2
  3557  0E59  063F               	xorwf	setCursor@linha,w
  3558  0E5A  1D03               	btfss	3,2
  3559  0E5B  2E5E               	goto	l1439
  3560                           
  3561                           ;lcd.c: 76: aux = 0xC0;
  3562  0E5C  30C0               	movlw	192
  3563  0E5D  2E5F               	goto	L3
  3564  0E5E                     l1439:	
  3565                           
  3566                           ;lcd.c: 77: else
  3567                           ;lcd.c: 78: aux = 0x80;
  3568  0E5E  3080               	movlw	128
  3569  0E5F                     L3:	
  3570  0E5F  00BE               	movwf	??_setCursor
  3571  0E60  083E               	movf	??_setCursor,w
  3572  0E61  00C0               	movwf	setCursor@aux
  3573                           
  3574                           ;lcd.c: 80: aux += coluna - 1;
  3575  0E62  083D               	movf	setCursor@coluna,w
  3576  0E63  3EFF               	addlw	255
  3577  0E64  00BE               	movwf	??_setCursor
  3578  0E65  083E               	movf	??_setCursor,w
  3579  0E66  07C0               	addwf	setCursor@aux,f
  3580                           
  3581                           ;lcd.c: 82: LCD_SendByte(0, aux);
  3582  0E67  0840               	movf	setCursor@aux,w
  3583  0E68  00BE               	movwf	??_setCursor
  3584  0E69  083E               	movf	??_setCursor,w
  3585  0E6A  00B5               	movwf	LCD_SendByte@byte
  3586  0E6B  3000               	movlw	0
  3587  0E6C  120A  118A  27B5   	fcall	_LCD_SendByte
  3588  0E6F  0008               	return
  3589  0E70                     __end_of_setCursor:	
  3590                           
  3591                           	psect	text20
  3592  07B5                     __ptext20:	
  3593 ;; *************** function _LCD_SendByte *****************
  3594 ;; Defined at:
  3595 ;;		line 65 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor-pic16f887\stepper_motor\
      +lcd.c"
  3596 ;; Parameters:    Size  Location     Type
  3597 ;;  reg             1    wreg     unsigned char 
  3598 ;;  byte            1   21[BANK0 ] unsigned char 
  3599 ;; Auto vars:     Size  Location     Type
  3600 ;;  reg             1   26[BANK0 ] unsigned char 
  3601 ;; Return value:  Size  Location     Type
  3602 ;;                  1    wreg      void 
  3603 ;; Registers used:
  3604 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3605 ;; Tracked objects:
  3606 ;;		On entry : 0/0
  3607 ;;		On exit  : 0/0
  3608 ;;		Unchanged: 0/0
  3609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3610 ;;      Params:         0       1       0       0       0
  3611 ;;      Locals:         0       3       0       0       0
  3612 ;;      Temps:          0       4       0       0       0
  3613 ;;      Totals:         0       8       0       0       0
  3614 ;;Total ram usage:        8 bytes
  3615 ;; Hardware stack levels used:    1
  3616 ;; Hardware stack levels required when called:    4
  3617 ;; This function calls:
  3618 ;;		_LCD_SendNb
  3619 ;; This function is called by:
  3620 ;;		_setupDisplay
  3621 ;;		_setCursor
  3622 ;;		_LCD_sendString
  3623 ;;		_clearDisplay
  3624 ;;		_sendChar
  3625 ;; This function uses a non-reentrant model
  3626 ;;
  3627                           
  3628                           
  3629                           ;psect for function _LCD_SendByte
  3630  07B5                     _LCD_SendByte:	
  3631                           
  3632                           ;incstack = 0
  3633                           ; Regs used in _LCD_SendByte: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3634                           ;LCD_SendByte@reg stored from wreg
  3635  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  3636  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  3637  07B7  00BA               	movwf	LCD_SendByte@reg
  3638                           
  3639                           ;lcd.c: 67: *LCD_PORT = reg ? (*LCD_PORT | (1 << 4)) : (*LCD_PORT & ~(1 << 4));
  3640  07B8  083A               	movf	LCD_SendByte@reg,w
  3641  07B9  1D03               	btfss	3,2
  3642  07BA  2FCB               	goto	l1293
  3643  07BB  0866               	movf	_LCD_PORT,w
  3644  07BC  0084               	movwf	4
  3645  07BD  1783               	bsf	3,7
  3646  07BE  1C67               	btfss	_LCD_PORT+1,0
  3647  07BF  1383               	bcf	3,7
  3648  07C0  0800               	movf	0,w
  3649  07C1  00B6               	movwf	??_LCD_SendByte
  3650  07C2  0A84               	incf	4,f
  3651  07C3  0800               	movf	0,w
  3652  07C4  00B7               	movwf	??_LCD_SendByte+1
  3653  07C5  30EF               	movlw	239
  3654  07C6  0536               	andwf	??_LCD_SendByte,w
  3655  07C7  00B8               	movwf	??_LCD_SendByte+2
  3656  07C8  30FF               	movlw	255
  3657  07C9  0537               	andwf	??_LCD_SendByte+1,w
  3658  07CA  2FDA               	goto	L4
  3659  07CB                     l1293:	
  3660  07CB  0866               	movf	_LCD_PORT,w
  3661  07CC  0084               	movwf	4
  3662  07CD  1783               	bsf	3,7
  3663  07CE  1C67               	btfss	_LCD_PORT+1,0
  3664  07CF  1383               	bcf	3,7
  3665  07D0  0800               	movf	0,w
  3666  07D1  00B6               	movwf	??_LCD_SendByte
  3667  07D2  0A84               	incf	4,f
  3668  07D3  0800               	movf	0,w
  3669  07D4  00B7               	movwf	??_LCD_SendByte+1
  3670  07D5  3010               	movlw	16
  3671  07D6  0436               	iorwf	??_LCD_SendByte,w
  3672  07D7  00B8               	movwf	??_LCD_SendByte+2
  3673  07D8  3000               	movlw	0
  3674  07D9  0437               	iorwf	??_LCD_SendByte+1,w
  3675  07DA                     L4:	
  3676  07DA  00B9               	movwf	??_LCD_SendByte+3
  3677  07DB  0838               	movf	??_LCD_SendByte+2,w
  3678  07DC  00BB               	movwf	_LCD_SendByte$314	;volatile
  3679  07DD  0839               	movf	??_LCD_SendByte+3,w
  3680  07DE  00BC               	movwf	_LCD_SendByte$314+1	;volatile
  3681  07DF  0866               	movf	_LCD_PORT,w
  3682  07E0  0084               	movwf	4
  3683  07E1  1783               	bsf	3,7
  3684  07E2  1C67               	btfss	_LCD_PORT+1,0
  3685  07E3  1383               	bcf	3,7
  3686  07E4  083B               	movf	_LCD_SendByte$314,w	;volatile
  3687  07E5  0080               	movwf	0
  3688  07E6  0A84               	incf	4,f
  3689  07E7  083C               	movf	_LCD_SendByte$314+1,w	;volatile
  3690  07E8  0080               	movwf	0
  3691                           
  3692                           ;lcd.c: 68: LCD_SendNb(byte >> 4);
  3693  07E9  0835               	movf	LCD_SendByte@byte,w
  3694  07EA  00B6               	movwf	??_LCD_SendByte
  3695  07EB  3004               	movlw	4
  3696  07EC                     u1255:	
  3697  07EC  1003               	clrc
  3698  07ED  0CB6               	rrf	??_LCD_SendByte,f
  3699  07EE  3EFF               	addlw	-1
  3700  07EF  1D03               	skipz
  3701  07F0  2FEC               	goto	u1255
  3702  07F1  0836               	movf	??_LCD_SendByte,w
  3703  07F2  120A  118A  215A  120A  118A  	fcall	_LCD_SendNb
  3704                           
  3705                           ;lcd.c: 69: LCD_SendNb(byte & 0x0f);
  3706  07F7  1283               	bcf	3,5	;RP0=0, select bank0
  3707  07F8  1303               	bcf	3,6	;RP1=0, select bank0
  3708  07F9  0835               	movf	LCD_SendByte@byte,w
  3709  07FA  390F               	andlw	15
  3710  07FB  120A  118A  215A   	fcall	_LCD_SendNb
  3711  07FE  0008               	return
  3712  07FF                     __end_of_LCD_SendByte:	
  3713                           
  3714                           	psect	text21
  3715  015A                     __ptext21:	
  3716 ;; *************** function _LCD_SendNb *****************
  3717 ;; Defined at:
  3718 ;;		line 51 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor-pic16f887\stepper_motor\
      +lcd.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;  NB              1    wreg     unsigned char 
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;  NB              1   20[BANK0 ] unsigned char 
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  1    wreg      void 
  3725 ;; Registers used:
  3726 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3732 ;;      Params:         0       0       0       0       0
  3733 ;;      Locals:         0       9       0       0       0
  3734 ;;      Temps:          0       4       0       0       0
  3735 ;;      Totals:         0      13       0       0       0
  3736 ;;Total ram usage:       13 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:    3
  3739 ;; This function calls:
  3740 ;;		Nothing
  3741 ;; This function is called by:
  3742 ;;		_setupDisplay
  3743 ;;		_LCD_SendByte
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747                           
  3748                           ;psect for function _LCD_SendNb
  3749  015A                     _LCD_SendNb:	
  3750                           
  3751                           ;incstack = 0
  3752                           ; Regs used in _LCD_SendNb: [wreg-fsr0h+status,2+status,0]
  3753                           ;LCD_SendNb@NB stored from wreg
  3754  015A  1283               	bcf	3,5	;RP0=0, select bank0
  3755  015B  1303               	bcf	3,6	;RP1=0, select bank0
  3756  015C  00B4               	movwf	LCD_SendNb@NB
  3757                           
  3758                           ;lcd.c: 55: *LCD_PORT = (unsigned)((NB & 0b00000001) >> 0) ? (*LCD_PORT | (1 << 0)) : (*
      +                          LCD_PORT & ~(1 << 0));
  3759  015D  1834               	btfsc	LCD_SendNb@NB,0
  3760  015E  296F               	goto	l1229
  3761  015F  0866               	movf	_LCD_PORT,w
  3762  0160  0084               	movwf	4
  3763  0161  1783               	bsf	3,7
  3764  0162  1C67               	btfss	_LCD_PORT+1,0
  3765  0163  1383               	bcf	3,7
  3766  0164  0800               	movf	0,w
  3767  0165  00A8               	movwf	??_LCD_SendNb
  3768  0166  0A84               	incf	4,f
  3769  0167  0800               	movf	0,w
  3770  0168  00A9               	movwf	??_LCD_SendNb+1
  3771  0169  30FE               	movlw	254
  3772  016A  0528               	andwf	??_LCD_SendNb,w
  3773  016B  00AA               	movwf	??_LCD_SendNb+2
  3774  016C  30FF               	movlw	255
  3775  016D  0529               	andwf	??_LCD_SendNb+1,w
  3776  016E  297E               	goto	L5
  3777  016F                     l1229:	
  3778  016F  0866               	movf	_LCD_PORT,w
  3779  0170  0084               	movwf	4
  3780  0171  1783               	bsf	3,7
  3781  0172  1C67               	btfss	_LCD_PORT+1,0
  3782  0173  1383               	bcf	3,7
  3783  0174  0800               	movf	0,w
  3784  0175  00A8               	movwf	??_LCD_SendNb
  3785  0176  0A84               	incf	4,f
  3786  0177  0800               	movf	0,w
  3787  0178  00A9               	movwf	??_LCD_SendNb+1
  3788  0179  3001               	movlw	1
  3789  017A  0428               	iorwf	??_LCD_SendNb,w
  3790  017B  00AA               	movwf	??_LCD_SendNb+2
  3791  017C  3000               	movlw	0
  3792  017D  0429               	iorwf	??_LCD_SendNb+1,w
  3793  017E                     L5:	
  3794  017E  00AB               	movwf	??_LCD_SendNb+3
  3795  017F  082A               	movf	??_LCD_SendNb+2,w
  3796  0180  00AC               	movwf	_LCD_SendNb$307	;volatile
  3797  0181  082B               	movf	??_LCD_SendNb+3,w
  3798  0182  00AD               	movwf	_LCD_SendNb$307+1	;volatile
  3799  0183  0866               	movf	_LCD_PORT,w
  3800  0184  0084               	movwf	4
  3801  0185  1783               	bsf	3,7
  3802  0186  1C67               	btfss	_LCD_PORT+1,0
  3803  0187  1383               	bcf	3,7
  3804  0188  082C               	movf	_LCD_SendNb$307,w	;volatile
  3805  0189  0080               	movwf	0
  3806  018A  0A84               	incf	4,f
  3807  018B  082D               	movf	_LCD_SendNb$307+1,w	;volatile
  3808  018C  0080               	movwf	0
  3809                           
  3810                           ;lcd.c: 56: *LCD_PORT = (unsigned)((NB & 0b00000010) >> 1) ? (*LCD_PORT | (1 << 1)) : (*
      +                          LCD_PORT & ~(1 << 1));
  3811  018D  0834               	movf	LCD_SendNb@NB,w
  3812  018E  00A8               	movwf	??_LCD_SendNb
  3813  018F  3001               	movlw	1
  3814  0190                     u1065:	
  3815  0190  1003               	clrc
  3816  0191  0CA8               	rrf	??_LCD_SendNb,f
  3817  0192  3EFF               	addlw	-1
  3818  0193  1D03               	skipz
  3819  0194  2990               	goto	u1065
  3820  0195  1828               	btfsc	??_LCD_SendNb,0
  3821  0196  29A7               	goto	l1235
  3822  0197  0866               	movf	_LCD_PORT,w
  3823  0198  0084               	movwf	4
  3824  0199  1783               	bsf	3,7
  3825  019A  1C67               	btfss	_LCD_PORT+1,0
  3826  019B  1383               	bcf	3,7
  3827  019C  0800               	movf	0,w
  3828  019D  00A8               	movwf	??_LCD_SendNb
  3829  019E  0A84               	incf	4,f
  3830  019F  0800               	movf	0,w
  3831  01A0  00A9               	movwf	??_LCD_SendNb+1
  3832  01A1  30FD               	movlw	253
  3833  01A2  0528               	andwf	??_LCD_SendNb,w
  3834  01A3  00AA               	movwf	??_LCD_SendNb+2
  3835  01A4  30FF               	movlw	255
  3836  01A5  0529               	andwf	??_LCD_SendNb+1,w
  3837  01A6  29B6               	goto	L6
  3838  01A7                     l1235:	
  3839  01A7  0866               	movf	_LCD_PORT,w
  3840  01A8  0084               	movwf	4
  3841  01A9  1783               	bsf	3,7
  3842  01AA  1C67               	btfss	_LCD_PORT+1,0
  3843  01AB  1383               	bcf	3,7
  3844  01AC  0800               	movf	0,w
  3845  01AD  00A8               	movwf	??_LCD_SendNb
  3846  01AE  0A84               	incf	4,f
  3847  01AF  0800               	movf	0,w
  3848  01B0  00A9               	movwf	??_LCD_SendNb+1
  3849  01B1  3002               	movlw	2
  3850  01B2  0428               	iorwf	??_LCD_SendNb,w
  3851  01B3  00AA               	movwf	??_LCD_SendNb+2
  3852  01B4  3000               	movlw	0
  3853  01B5  0429               	iorwf	??_LCD_SendNb+1,w
  3854  01B6                     L6:	
  3855  01B6  00AB               	movwf	??_LCD_SendNb+3
  3856  01B7  082A               	movf	??_LCD_SendNb+2,w
  3857  01B8  00AE               	movwf	_LCD_SendNb$308	;volatile
  3858  01B9  082B               	movf	??_LCD_SendNb+3,w
  3859  01BA  00AF               	movwf	_LCD_SendNb$308+1	;volatile
  3860  01BB  0866               	movf	_LCD_PORT,w
  3861  01BC  0084               	movwf	4
  3862  01BD  1783               	bsf	3,7
  3863  01BE  1C67               	btfss	_LCD_PORT+1,0
  3864  01BF  1383               	bcf	3,7
  3865  01C0  082E               	movf	_LCD_SendNb$308,w	;volatile
  3866  01C1  0080               	movwf	0
  3867  01C2  0A84               	incf	4,f
  3868  01C3  082F               	movf	_LCD_SendNb$308+1,w	;volatile
  3869  01C4  0080               	movwf	0
  3870                           
  3871                           ;lcd.c: 57: *LCD_PORT = (unsigned)((NB & 0b00000100) >> 2) ? (*LCD_PORT | (1 << 2)) : (*
      +                          LCD_PORT & ~(1 << 2));
  3872  01C5  0834               	movf	LCD_SendNb@NB,w
  3873  01C6  00A8               	movwf	??_LCD_SendNb
  3874  01C7  3002               	movlw	2
  3875  01C8                     u1085:	
  3876  01C8  1003               	clrc
  3877  01C9  0CA8               	rrf	??_LCD_SendNb,f
  3878  01CA  3EFF               	addlw	-1
  3879  01CB  1D03               	skipz
  3880  01CC  29C8               	goto	u1085
  3881  01CD  1828               	btfsc	??_LCD_SendNb,0
  3882  01CE  29DF               	goto	l1241
  3883  01CF  0866               	movf	_LCD_PORT,w
  3884  01D0  0084               	movwf	4
  3885  01D1  1783               	bsf	3,7
  3886  01D2  1C67               	btfss	_LCD_PORT+1,0
  3887  01D3  1383               	bcf	3,7
  3888  01D4  0800               	movf	0,w
  3889  01D5  00A8               	movwf	??_LCD_SendNb
  3890  01D6  0A84               	incf	4,f
  3891  01D7  0800               	movf	0,w
  3892  01D8  00A9               	movwf	??_LCD_SendNb+1
  3893  01D9  30FB               	movlw	251
  3894  01DA  0528               	andwf	??_LCD_SendNb,w
  3895  01DB  00AA               	movwf	??_LCD_SendNb+2
  3896  01DC  30FF               	movlw	255
  3897  01DD  0529               	andwf	??_LCD_SendNb+1,w
  3898  01DE  29EE               	goto	L7
  3899  01DF                     l1241:	
  3900  01DF  0866               	movf	_LCD_PORT,w
  3901  01E0  0084               	movwf	4
  3902  01E1  1783               	bsf	3,7
  3903  01E2  1C67               	btfss	_LCD_PORT+1,0
  3904  01E3  1383               	bcf	3,7
  3905  01E4  0800               	movf	0,w
  3906  01E5  00A8               	movwf	??_LCD_SendNb
  3907  01E6  0A84               	incf	4,f
  3908  01E7  0800               	movf	0,w
  3909  01E8  00A9               	movwf	??_LCD_SendNb+1
  3910  01E9  3004               	movlw	4
  3911  01EA  0428               	iorwf	??_LCD_SendNb,w
  3912  01EB  00AA               	movwf	??_LCD_SendNb+2
  3913  01EC  3000               	movlw	0
  3914  01ED  0429               	iorwf	??_LCD_SendNb+1,w
  3915  01EE                     L7:	
  3916  01EE  00AB               	movwf	??_LCD_SendNb+3
  3917  01EF  082A               	movf	??_LCD_SendNb+2,w
  3918  01F0  00B0               	movwf	_LCD_SendNb$309	;volatile
  3919  01F1  082B               	movf	??_LCD_SendNb+3,w
  3920  01F2  00B1               	movwf	_LCD_SendNb$309+1	;volatile
  3921  01F3  0866               	movf	_LCD_PORT,w
  3922  01F4  0084               	movwf	4
  3923  01F5  1783               	bsf	3,7
  3924  01F6  1C67               	btfss	_LCD_PORT+1,0
  3925  01F7  1383               	bcf	3,7
  3926  01F8  0830               	movf	_LCD_SendNb$309,w	;volatile
  3927  01F9  0080               	movwf	0
  3928  01FA  0A84               	incf	4,f
  3929  01FB  0831               	movf	_LCD_SendNb$309+1,w	;volatile
  3930  01FC  0080               	movwf	0
  3931                           
  3932                           ;lcd.c: 58: *LCD_PORT = (unsigned)((NB & 0b00001000) >> 3) ? (*LCD_PORT | (1 << 3)) : (*
      +                          LCD_PORT & ~(1 << 3));
  3933  01FD  0834               	movf	LCD_SendNb@NB,w
  3934  01FE  00A8               	movwf	??_LCD_SendNb
  3935  01FF  3003               	movlw	3
  3936  0200                     u1105:	
  3937  0200  1003               	clrc
  3938  0201  0CA8               	rrf	??_LCD_SendNb,f
  3939  0202  3EFF               	addlw	-1
  3940  0203  1D03               	skipz
  3941  0204  2A00               	goto	u1105
  3942  0205  1828               	btfsc	??_LCD_SendNb,0
  3943  0206  2A17               	goto	l1247
  3944  0207  0866               	movf	_LCD_PORT,w
  3945  0208  0084               	movwf	4
  3946  0209  1783               	bsf	3,7
  3947  020A  1C67               	btfss	_LCD_PORT+1,0
  3948  020B  1383               	bcf	3,7
  3949  020C  0800               	movf	0,w
  3950  020D  00A8               	movwf	??_LCD_SendNb
  3951  020E  0A84               	incf	4,f
  3952  020F  0800               	movf	0,w
  3953  0210  00A9               	movwf	??_LCD_SendNb+1
  3954  0211  30F7               	movlw	247
  3955  0212  0528               	andwf	??_LCD_SendNb,w
  3956  0213  00AA               	movwf	??_LCD_SendNb+2
  3957  0214  30FF               	movlw	255
  3958  0215  0529               	andwf	??_LCD_SendNb+1,w
  3959  0216  2A26               	goto	L8
  3960  0217                     l1247:	
  3961  0217  0866               	movf	_LCD_PORT,w
  3962  0218  0084               	movwf	4
  3963  0219  1783               	bsf	3,7
  3964  021A  1C67               	btfss	_LCD_PORT+1,0
  3965  021B  1383               	bcf	3,7
  3966  021C  0800               	movf	0,w
  3967  021D  00A8               	movwf	??_LCD_SendNb
  3968  021E  0A84               	incf	4,f
  3969  021F  0800               	movf	0,w
  3970  0220  00A9               	movwf	??_LCD_SendNb+1
  3971  0221  3008               	movlw	8
  3972  0222  0428               	iorwf	??_LCD_SendNb,w
  3973  0223  00AA               	movwf	??_LCD_SendNb+2
  3974  0224  3000               	movlw	0
  3975  0225  0429               	iorwf	??_LCD_SendNb+1,w
  3976  0226                     L8:	
  3977  0226  00AB               	movwf	??_LCD_SendNb+3
  3978  0227  082A               	movf	??_LCD_SendNb+2,w
  3979  0228  00B2               	movwf	_LCD_SendNb$310	;volatile
  3980  0229  082B               	movf	??_LCD_SendNb+3,w
  3981  022A  00B3               	movwf	_LCD_SendNb$310+1	;volatile
  3982  022B  0866               	movf	_LCD_PORT,w
  3983  022C  0084               	movwf	4
  3984  022D  1783               	bsf	3,7
  3985  022E  1C67               	btfss	_LCD_PORT+1,0
  3986  022F  1383               	bcf	3,7
  3987  0230  0832               	movf	_LCD_SendNb$310,w	;volatile
  3988  0231  0080               	movwf	0
  3989  0232  0A84               	incf	4,f
  3990  0233  0833               	movf	_LCD_SendNb$310+1,w	;volatile
  3991  0234  0080               	movwf	0
  3992                           
  3993                           ;lcd.c: 59: *LCD_PORT |= 1 << 5;
  3994  0235  0866               	movf	_LCD_PORT,w
  3995  0236  0084               	movwf	4
  3996  0237  1783               	bsf	3,7
  3997  0238  1C67               	btfss	_LCD_PORT+1,0
  3998  0239  1383               	bcf	3,7
  3999  023A  3020               	movlw	32
  4000  023B  0480               	iorwf	0,f
  4001  023C  0A84               	incf	4,f
  4002  023D  3000               	movlw	0
  4003  023E  0480               	iorwf	0,f
  4004                           
  4005                           ;lcd.c: 60: _delay((unsigned long)((10)*(4000000/4000000.0)));
  4006  023F  3002               	movlw	2
  4007  0240  1283               	bcf	3,5	;RP0=0, select bank0
  4008  0241  1303               	bcf	3,6	;RP1=0, select bank0
  4009  0242  00A8               	movwf	??_LCD_SendNb
  4010  0243                     u2257:	
  4011  0243  0BA8               	decfsz	??_LCD_SendNb,f
  4012  0244  2A43               	goto	u2257
  4013  0245  0000               	nop
  4014                           
  4015                           ;lcd.c: 61: *LCD_PORT &= ~(1 << 5);
  4016  0246  1283               	bcf	3,5	;RP0=0, select bank0
  4017  0247  1303               	bcf	3,6	;RP1=0, select bank0
  4018  0248  0866               	movf	_LCD_PORT,w
  4019  0249  0084               	movwf	4
  4020  024A  1783               	bsf	3,7
  4021  024B  1C67               	btfss	_LCD_PORT+1,0
  4022  024C  1383               	bcf	3,7
  4023  024D  30DF               	movlw	223
  4024  024E  0580               	andwf	0,f
  4025  024F  0A84               	incf	4,f
  4026  0250  30FF               	movlw	255
  4027  0251  0580               	andwf	0,f
  4028                           
  4029                           ;lcd.c: 62: _delay((unsigned long)((50)*(4000000/4000000.0)));
  4030  0252  300F               	movlw	15
  4031  0253  1283               	bcf	3,5	;RP0=0, select bank0
  4032  0254  1303               	bcf	3,6	;RP1=0, select bank0
  4033  0255  00A8               	movwf	??_LCD_SendNb
  4034  0256                     u2267:	
  4035  0256  0BA8               	decfsz	??_LCD_SendNb,f
  4036  0257  2A56               	goto	u2267
  4037  0258  2A59               	nop2
  4038  0259  0008               	return
  4039  025A                     __end_of_LCD_SendNb:	
  4040                           
  4041                           	psect	text22
  4042  025A                     __ptext22:	
  4043 ;; *************** function _ISR *****************
  4044 ;; Defined at:
  4045 ;;		line 17 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor-pic16f887\stepper_motor\
      +main.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;		None
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;		None
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  1    wreg      void 
  4052 ;; Registers used:
  4053 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4054 ;; Tracked objects:
  4055 ;;		On entry : 0/0
  4056 ;;		On exit  : 0/0
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4059 ;;      Params:         0       0       0       0       0
  4060 ;;      Locals:         0       8       0       0       0
  4061 ;;      Temps:          7       0       0       0       0
  4062 ;;      Totals:         7       8       0       0       0
  4063 ;;Total ram usage:       15 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; Hardware stack levels required when called:    2
  4066 ;; This function calls:
  4067 ;;		_calculaErro
  4068 ;; This function is called by:
  4069 ;;		Interrupt level 1
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           
  4074                           ;psect for function _ISR
  4075  025A                     _ISR:	
  4076                           
  4077                           ;main.c: 19: if(PIR1bits.TMR2IF == 1){
  4078  025A  1C8C               	btfss	12,1	;volatile
  4079  025B  2B2A               	goto	i1l133
  4080                           
  4081                           ;main.c: 20: calculaErro();
  4082  025C  120A  158A  27AD  120A  118A  	fcall	_calculaErro
  4083                           
  4084                           ;main.c: 22: if(speed_ramp <= 100 && error !=0){
  4085  0261  3065               	movlw	101
  4086  0262  1283               	bcf	3,5	;RP0=0, select bank0
  4087  0263  1303               	bcf	3,6	;RP1=0, select bank0
  4088  0264  0260               	subwf	_speed_ramp,w
  4089  0265  1803               	skipnc
  4090  0266  2A75               	goto	i1l105
  4091  0267  085A               	movf	_error,w
  4092  0268  045B               	iorwf	_error+1,w
  4093  0269  1903               	btfsc	3,2
  4094  026A  2A75               	goto	i1l105
  4095                           
  4096                           ;main.c: 23: PR2-= 2;
  4097  026B  3002               	movlw	2
  4098  026C  1683               	bsf	3,5	;RP0=1, select bank1
  4099  026D  1303               	bcf	3,6	;RP1=0, select bank1
  4100  026E  0292               	subwf	18,f	;volatile
  4101                           
  4102                           ;main.c: 24: speed_ramp++;
  4103  026F  3001               	movlw	1
  4104  0270  00F6               	movwf	??_ISR
  4105  0271  0876               	movf	??_ISR,w
  4106  0272  1283               	bcf	3,5	;RP0=0, select bank0
  4107  0273  1303               	bcf	3,6	;RP1=0, select bank0
  4108  0274  07E0               	addwf	_speed_ramp,f
  4109  0275                     i1l105:	
  4110                           
  4111                           ;main.c: 25: }
  4112                           ;main.c: 27: if(error == 0){
  4113  0275  085A               	movf	_error,w
  4114  0276  045B               	iorwf	_error+1,w
  4115  0277  1D03               	btfss	3,2
  4116  0278  2A7E               	goto	i1l1681
  4117                           
  4118                           ;main.c: 28: speed_ramp=0;
  4119  0279  01E0               	clrf	_speed_ramp
  4120                           
  4121                           ;main.c: 29: PR2 = 255;
  4122  027A  30FF               	movlw	255
  4123  027B  1683               	bsf	3,5	;RP0=1, select bank1
  4124  027C  1303               	bcf	3,6	;RP1=0, select bank1
  4125  027D  0092               	movwf	18	;volatile
  4126  027E                     i1l1681:	
  4127                           
  4128                           ;main.c: 30: }
  4129                           ;main.c: 32: if(error > 0){
  4130  027E  1283               	bcf	3,5	;RP0=0, select bank0
  4131  027F  085B               	movf	_error+1,w
  4132  0280  3A80               	xorlw	128
  4133  0281  00FF               	movwf	127
  4134  0282  3080               	movlw	128
  4135  0283  027F               	subwf	127,w
  4136  0284  1D03               	skipz
  4137  0285  2A88               	goto	u197_25
  4138  0286  3001               	movlw	1
  4139  0287  025A               	subwf	_error,w
  4140  0288                     u197_25:	
  4141  0288  1C03               	skipc
  4142  0289  2AD6               	goto	i1l1705
  4143                           
  4144                           ;main.c: 33: STATUSbits.C = 0;
  4145  028A  1283               	bcf	3,5	;RP0=0, select bank0
  4146  028B  1303               	bcf	3,6	;RP1=0, select bank0
  4147  028C  1003               	bcf	3,0	;volatile
  4148                           
  4149                           ;main.c: 34: phase = (phase == 0) ? 1 : phase;
  4150  028D  0861               	movf	_phase,w
  4151  028E  1903               	btfsc	3,2
  4152  028F  2A97               	goto	i1l1689
  4153  0290  0861               	movf	_phase,w
  4154  0291  00F6               	movwf	??_ISR
  4155  0292  01F7               	clrf	??_ISR+1
  4156  0293  0876               	movf	??_ISR,w
  4157  0294  00A0               	movwf	_ISR$250
  4158  0295  0877               	movf	??_ISR+1,w
  4159  0296  2A9A               	goto	L9
  4160  0297                     i1l1689:	
  4161  0297  3001               	movlw	1
  4162  0298  00A0               	movwf	_ISR$250
  4163  0299  3000               	movlw	0
  4164  029A                     L9:	
  4165  029A  00A1               	movwf	_ISR$250+1
  4166  029B  0820               	movf	_ISR$250,w
  4167  029C  00F6               	movwf	??_ISR
  4168  029D  0876               	movf	??_ISR,w
  4169  029E  00E1               	movwf	_phase
  4170                           
  4171                           ;main.c: 35: phase = (phase == 8) ? phase >> 3 : phase << 1;
  4172  029F  3008               	movlw	8
  4173  02A0  0661               	xorwf	_phase,w
  4174  02A1  1903               	btfsc	3,2
  4175  02A2  2AAB               	goto	i1l1695
  4176  02A3  0861               	movf	_phase,w
  4177  02A4  00F6               	movwf	??_ISR
  4178  02A5  01F7               	clrf	??_ISR+1
  4179  02A6  1003               	clrc
  4180  02A7  0D76               	rlf	??_ISR,w
  4181  02A8  00A2               	movwf	_ISR$251
  4182  02A9  0D77               	rlf	??_ISR+1,w
  4183  02AA  2AB9               	goto	L10
  4184  02AB                     i1l1695:	
  4185  02AB  0861               	movf	_phase,w
  4186  02AC  00F6               	movwf	??_ISR
  4187  02AD  3003               	movlw	3
  4188  02AE                     u200_25:	
  4189  02AE  1003               	clrc
  4190  02AF  0CF6               	rrf	??_ISR,f
  4191  02B0  3EFF               	addlw	-1
  4192  02B1  1D03               	skipz
  4193  02B2  2AAE               	goto	u200_25
  4194  02B3  0876               	movf	??_ISR,w
  4195  02B4  00F7               	movwf	??_ISR+1
  4196  02B5  01F8               	clrf	??_ISR+2
  4197  02B6  0877               	movf	??_ISR+1,w
  4198  02B7  00A2               	movwf	_ISR$251
  4199  02B8  0878               	movf	??_ISR+2,w
  4200  02B9                     L10:	
  4201  02B9  00A3               	movwf	_ISR$251+1
  4202  02BA  0822               	movf	_ISR$251,w
  4203  02BB  00F6               	movwf	??_ISR
  4204  02BC  0876               	movf	??_ISR,w
  4205  02BD  00E1               	movwf	_phase
  4206                           
  4207                           ;main.c: 36: position = ((position + 1)== 2048) ? 0 : (position + 1);
  4208  02BE  085C               	movf	_position,w
  4209  02BF  3E01               	addlw	1
  4210  02C0  00F6               	movwf	??_ISR
  4211  02C1  085D               	movf	_position+1,w
  4212  02C2  1803               	skipnc
  4213  02C3  3E01               	addlw	1
  4214  02C4  3E00               	addlw	0
  4215  02C5  00F7               	movwf	??_ISR+1
  4216  02C6  3008               	movlw	8
  4217  02C7  0677               	xorwf	??_ISR+1,w
  4218  02C8  0476               	iorwf	??_ISR,w
  4219  02C9  1903               	btfsc	3,2
  4220  02CA  2AD4               	goto	i1l1703
  4221  02CB  085C               	movf	_position,w
  4222  02CC  3E01               	addlw	1
  4223  02CD  00DC               	movwf	_position
  4224  02CE  085D               	movf	_position+1,w
  4225  02CF  1803               	skipnc
  4226  02D0  3E01               	addlw	1
  4227  02D1  3E00               	addlw	0
  4228  02D2  00DD               	movwf	_position+1
  4229  02D3  2AD6               	goto	i1l1705
  4230  02D4                     i1l1703:	
  4231  02D4  01DC               	clrf	_position
  4232  02D5  01DD               	clrf	_position+1
  4233  02D6                     i1l1705:	
  4234                           
  4235                           ;main.c: 37: }
  4236                           ;main.c: 39: if(error < 0){
  4237  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  4238  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  4239  02D8  1FDB               	btfss	_error+1,7
  4240  02D9  2B27               	goto	i1l120
  4241                           
  4242                           ;main.c: 40: STATUSbits.C = 0;
  4243  02DA  1003               	bcf	3,0	;volatile
  4244                           
  4245                           ;main.c: 41: phase = (phase == 0) ? 8 : phase;
  4246  02DB  0861               	movf	_phase,w
  4247  02DC  1903               	btfsc	3,2
  4248  02DD  2AE5               	goto	i1l1713
  4249  02DE  0861               	movf	_phase,w
  4250  02DF  00F6               	movwf	??_ISR
  4251  02E0  01F7               	clrf	??_ISR+1
  4252  02E1  0876               	movf	??_ISR,w
  4253  02E2  00A4               	movwf	_ISR$252
  4254  02E3  0877               	movf	??_ISR+1,w
  4255  02E4  2AE8               	goto	L11
  4256  02E5                     i1l1713:	
  4257  02E5  3008               	movlw	8
  4258  02E6  00A4               	movwf	_ISR$252
  4259  02E7  3000               	movlw	0
  4260  02E8                     L11:	
  4261  02E8  00A5               	movwf	_ISR$252+1
  4262  02E9  0824               	movf	_ISR$252,w
  4263  02EA  00F6               	movwf	??_ISR
  4264  02EB  0876               	movf	??_ISR,w
  4265  02EC  00E1               	movwf	_phase
  4266                           
  4267                           ;main.c: 42: phase = (phase == 1) ? phase << 3 : phase >> 1;
  4268  02ED  0361               	decf	_phase,w
  4269  02EE  1903               	btfsc	3,2
  4270  02EF  2AFA               	goto	i1l1719
  4271  02F0  0861               	movf	_phase,w
  4272  02F1  00F6               	movwf	??_ISR
  4273  02F2  1003               	clrc
  4274  02F3  0C76               	rrf	??_ISR,w
  4275  02F4  00F7               	movwf	??_ISR+1
  4276  02F5  01F8               	clrf	??_ISR+2
  4277  02F6  0877               	movf	??_ISR+1,w
  4278  02F7  00A6               	movwf	_ISR$253
  4279  02F8  0878               	movf	??_ISR+2,w
  4280  02F9  2B09               	goto	L12
  4281  02FA                     i1l1719:	
  4282  02FA  0861               	movf	_phase,w
  4283  02FB  00F6               	movwf	??_ISR
  4284  02FC  01F7               	clrf	??_ISR+1
  4285  02FD  1003               	clrc
  4286  02FE  0DF6               	rlf	??_ISR,f
  4287  02FF  0DF7               	rlf	??_ISR+1,f
  4288  0300  1003               	clrc
  4289  0301  0DF6               	rlf	??_ISR,f
  4290  0302  0DF7               	rlf	??_ISR+1,f
  4291  0303  1003               	clrc
  4292  0304  0DF6               	rlf	??_ISR,f
  4293  0305  0DF7               	rlf	??_ISR+1,f
  4294  0306  0876               	movf	??_ISR,w
  4295  0307  00A6               	movwf	_ISR$253
  4296  0308  0877               	movf	??_ISR+1,w
  4297  0309                     L12:	
  4298  0309  00A7               	movwf	_ISR$253+1
  4299  030A  0826               	movf	_ISR$253,w
  4300  030B  00F6               	movwf	??_ISR
  4301  030C  0876               	movf	??_ISR,w
  4302  030D  00E1               	movwf	_phase
  4303                           
  4304                           ;main.c: 43: position = ((position - 1)== -1) ? 2047 : (position - 1);
  4305  030E  085C               	movf	_position,w
  4306  030F  3EFF               	addlw	255
  4307  0310  00F6               	movwf	??_ISR
  4308  0311  085D               	movf	_position+1,w
  4309  0312  1803               	skipnc
  4310  0313  3E01               	addlw	1
  4311  0314  3EFF               	addlw	255
  4312  0315  00F7               	movwf	??_ISR+1
  4313  0316  0A76               	incf	??_ISR,w
  4314  0317  1903               	btfsc	3,2
  4315  0318  0A77               	incf	??_ISR+1,w
  4316  0319  1903               	btfsc	3,2
  4317  031A  2B23               	goto	i1l1727
  4318  031B  085C               	movf	_position,w
  4319  031C  3EFF               	addlw	255
  4320  031D  00DC               	movwf	_position
  4321  031E  085D               	movf	_position+1,w
  4322  031F  1803               	skipnc
  4323  0320  3E01               	addlw	1
  4324  0321  3EFF               	addlw	255
  4325  0322  2B26               	goto	L13
  4326  0323                     i1l1727:	
  4327  0323  30FF               	movlw	255
  4328  0324  00DC               	movwf	_position
  4329  0325  3007               	movlw	7
  4330  0326                     L13:	
  4331  0326  00DD               	movwf	_position+1
  4332  0327                     i1l120:	
  4333                           
  4334                           ;main.c: 44: }
  4335                           ;main.c: 46: PORTD = phase;
  4336  0327  0861               	movf	_phase,w
  4337  0328  0088               	movwf	8	;volatile
  4338                           
  4339                           ;main.c: 48: PIR1bits.TMR2IF = 0;
  4340  0329  108C               	bcf	12,1	;volatile
  4341  032A                     i1l133:	
  4342  032A  087C               	movf	??_ISR+6,w
  4343  032B  00FF               	movwf	127
  4344  032C  087B               	movf	??_ISR+5,w
  4345  032D  008A               	movwf	10
  4346  032E  087A               	movf	??_ISR+4,w
  4347  032F  0084               	movwf	4
  4348  0330  0E79               	swapf	(??_ISR+3)^(0+-128),w
  4349  0331  0083               	movwf	3
  4350  0332  0EFE               	swapf	126,f
  4351  0333  0E7E               	swapf	126,w
  4352  0334  0009               	retfie
  4353  0335                     __end_of_ISR:	
  4354                           
  4355                           	psect	intentry
  4356  0004                     __pintentry:	
  4357                           ;incstack = 0
  4358                           ; Regs used in _ISR: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4359                           
  4360  0004                     interrupt_function:	
  4361  007E                     saved_w	set	btemp
  4362  0004  00FE               	movwf	btemp
  4363  0005  0E03               	swapf	3,w
  4364  0006  00F9               	movwf	??_ISR+3
  4365  0007  0804               	movf	4,w
  4366  0008  00FA               	movwf	??_ISR+4
  4367  0009  080A               	movf	10,w
  4368  000A  00FB               	movwf	??_ISR+5
  4369  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4370  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4371  000D  087F               	movf	btemp+1,w
  4372  000E  00FC               	movwf	??_ISR+6
  4373  000F  120A  118A  2A5A   	ljmp	_ISR
  4374                           
  4375                           	psect	text23
  4376  0FAD                     __ptext23:	
  4377 ;; *************** function _calculaErro *****************
  4378 ;; Defined at:
  4379 ;;		line 32 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor-pic16f887\stepper_motor\
      +stepper.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;		None
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;		None
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  1    wreg      void 
  4386 ;; Registers used:
  4387 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4393 ;;      Params:         0       0       0       0       0
  4394 ;;      Locals:         0       0       0       0       0
  4395 ;;      Temps:          2       0       0       0       0
  4396 ;;      Totals:         2       0       0       0       0
  4397 ;;Total ram usage:        2 bytes
  4398 ;; Hardware stack levels used:    1
  4399 ;; Hardware stack levels required when called:    1
  4400 ;; This function calls:
  4401 ;;		_abs
  4402 ;; This function is called by:
  4403 ;;		_ISR
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           
  4408                           ;psect for function _calculaErro
  4409  0FAD                     _calculaErro:	
  4410                           
  4411                           ;stepper.c: 33: error = abs(position - setpoint);
  4412                           
  4413                           ;incstack = 0
  4414                           ; Regs used in _calculaErro: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4415  0FAD  1283               	bcf	3,5	;RP0=0, select bank0
  4416  0FAE  1303               	bcf	3,6	;RP1=0, select bank0
  4417  0FAF  095E               	comf	_setpoint,w
  4418  0FB0  00F4               	movwf	??_calculaErro
  4419  0FB1  095F               	comf	_setpoint+1,w
  4420  0FB2  00F5               	movwf	??_calculaErro+1
  4421  0FB3  0AF4               	incf	??_calculaErro,f
  4422  0FB4  1903               	skipnz
  4423  0FB5  0AF5               	incf	??_calculaErro+1,f
  4424  0FB6  085C               	movf	_position,w
  4425  0FB7  0774               	addwf	??_calculaErro,w
  4426  0FB8  00F0               	movwf	abs@a
  4427  0FB9  085D               	movf	_position+1,w
  4428  0FBA  1803               	skipnc
  4429  0FBB  0A5D               	incf	_position+1,w
  4430  0FBC  0775               	addwf	??_calculaErro+1,w
  4431  0FBD  00F1               	movwf	abs@a+1
  4432  0FBE  120A  158A  2606  120A  158A  	fcall	_abs
  4433  0FC3  0871               	movf	?_abs+1,w
  4434  0FC4  1283               	bcf	3,5	;RP0=0, select bank0
  4435  0FC5  1303               	bcf	3,6	;RP1=0, select bank0
  4436  0FC6  00DB               	movwf	_error+1
  4437  0FC7  0870               	movf	?_abs,w
  4438  0FC8  00DA               	movwf	_error
  4439                           
  4440                           ;stepper.c: 35: if(setpoint > position && error > 2048)
  4441  0FC9  085F               	movf	_setpoint+1,w
  4442  0FCA  025D               	subwf	_position+1,w
  4443  0FCB  1D03               	skipz
  4444  0FCC  2FCF               	goto	u181_25
  4445  0FCD  085E               	movf	_setpoint,w
  4446  0FCE  025C               	subwf	_position,w
  4447  0FCF                     u181_25:	
  4448  0FCF  1803               	skipnc
  4449  0FD0  2FE3               	goto	i1l1593
  4450  0FD1  085B               	movf	_error+1,w
  4451  0FD2  3A80               	xorlw	128
  4452  0FD3  00FF               	movwf	127
  4453  0FD4  3088               	movlw	136
  4454  0FD5  027F               	subwf	127,w
  4455  0FD6  1D03               	skipz
  4456  0FD7  2FDA               	goto	u182_25
  4457  0FD8  3001               	movlw	1
  4458  0FD9  025A               	subwf	_error,w
  4459  0FDA                     u182_25:	
  4460  0FDA  1C03               	skipc
  4461  0FDB  2FE3               	goto	i1l1593
  4462                           
  4463                           ;stepper.c: 36: error = -error;
  4464  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  4465  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  4466  0FDE  09DA               	comf	_error,f
  4467  0FDF  09DB               	comf	_error+1,f
  4468  0FE0  0ADA               	incf	_error,f
  4469  0FE1  1903               	skipnz
  4470  0FE2  0ADB               	incf	_error+1,f
  4471  0FE3                     i1l1593:	
  4472                           
  4473                           ;stepper.c: 38: if(setpoint < position && error < 2048)
  4474  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  4475  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  4476  0FE5  085D               	movf	_position+1,w
  4477  0FE6  025F               	subwf	_setpoint+1,w
  4478  0FE7  1D03               	skipz
  4479  0FE8  2FEB               	goto	u183_25
  4480  0FE9  085C               	movf	_position,w
  4481  0FEA  025E               	subwf	_setpoint,w
  4482  0FEB                     u183_25:	
  4483  0FEB  1803               	skipnc
  4484  0FEC  0008               	return
  4485  0FED  085B               	movf	_error+1,w
  4486  0FEE  3A80               	xorlw	128
  4487  0FEF  00FF               	movwf	127
  4488  0FF0  3088               	movlw	136
  4489  0FF1  027F               	subwf	127,w
  4490  0FF2  1D03               	skipz
  4491  0FF3  2FF6               	goto	u184_25
  4492  0FF4  3000               	movlw	0
  4493  0FF5  025A               	subwf	_error,w
  4494  0FF6                     u184_25:	
  4495  0FF6  1803               	skipnc
  4496  0FF7  0008               	return
  4497                           
  4498                           ;stepper.c: 39: error = -error;
  4499  0FF8  1283               	bcf	3,5	;RP0=0, select bank0
  4500  0FF9  1303               	bcf	3,6	;RP1=0, select bank0
  4501  0FFA  09DA               	comf	_error,f
  4502  0FFB  09DB               	comf	_error+1,f
  4503  0FFC  0ADA               	incf	_error,f
  4504  0FFD  1903               	skipnz
  4505  0FFE  0ADB               	incf	_error+1,f
  4506  0FFF  0008               	return
  4507  1000                     __end_of_calculaErro:	
  4508                           
  4509                           	psect	text24
  4510  0E06                     __ptext24:	
  4511 ;; *************** function _abs *****************
  4512 ;; Defined at:
  4513 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  a               2    0[COMMON] int 
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;		None
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  2    0[COMMON] int 
  4520 ;; Registers used:
  4521 ;;		wreg, status,2, status,0
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4527 ;;      Params:         2       0       0       0       0
  4528 ;;      Locals:         0       0       0       0       0
  4529 ;;      Temps:          2       0       0       0       0
  4530 ;;      Totals:         4       0       0       0       0
  4531 ;;Total ram usage:        4 bytes
  4532 ;; Hardware stack levels used:    1
  4533 ;; This function calls:
  4534 ;;		Nothing
  4535 ;; This function is called by:
  4536 ;;		_calculaErro
  4537 ;; This function uses a non-reentrant model
  4538 ;;
  4539                           
  4540                           
  4541                           ;psect for function _abs
  4542  0E06                     _abs:	
  4543                           
  4544                           ;incstack = 0
  4545                           ; Regs used in _abs: [wreg+status,2+status,0]
  4546  0E06  1FF1               	btfss	abs@a+1,7
  4547  0E07  0008               	return
  4548  0E08  0970               	comf	abs@a,w
  4549  0E09  00F2               	movwf	??_abs
  4550  0E0A  0971               	comf	abs@a+1,w
  4551  0E0B  00F3               	movwf	??_abs+1
  4552  0E0C  0AF2               	incf	??_abs,f
  4553  0E0D  1903               	skipnz
  4554  0E0E  0AF3               	incf	??_abs+1,f
  4555  0E0F  0872               	movf	??_abs,w
  4556  0E10  00F0               	movwf	?_abs
  4557  0E11  0873               	movf	??_abs+1,w
  4558  0E12  00F1               	movwf	?_abs+1
  4559  0E13  0008               	return
  4560  0E14                     __end_of_abs:	
  4561  007E                     btemp	set	126	;btemp
  4562  007E                     wtemp0	set	126


Data Sizes:
    Strings     13
    Constant    0
    Data        6
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     58      72
    BANK1            80      8      12
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_sendString@string	PTR unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[4]), c_int_value(BANK0[2]), STR_1(CODE[4]), 

    LCD_TRIS	PTR volatile unsigned int  size(2) Largest target is 1
		 -> TRISB(SFR1[1]), 

    LCD_PORT	PTR volatile unsigned int  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_calculaErro
    _calculaErro->_abs

Critical Paths under _main in BANK0

    _main->_int2char
    _setup->_setPosicaoAtual
    _setupDisplay->_LCD_SendByte
    _setPosicaoAtual->___fttol
    _setPosicaoDesejada->___fttol
    ___ftdiv->___lwtoft
    _int2char->_getPosicaoAtual
    _getPosicaoAtual->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    _calculaVelocidade->___wmul
    ___wmul->___awdiv
    _LCD_sendString->_setCursor
    _setCursor->_LCD_SendByte
    _LCD_SendByte->_LCD_SendNb

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_int2char

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   25121
                                              6 BANK1      2     2      0
                     _LCD_sendString
                            ___ftmul
                            ___fttol
                           ___lwtoft
                  _calculaVelocidade
                    _getPosicaoAtual
                      _getVelocidade
                           _int2char
                 _setPosicaoDesejada
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    5483
                    _setPosicaoAtual
                       _setupDisplay
                       _setupStepper
 ---------------------------------------------------------------------------------
 (2) _setupStepper                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupDisplay                                         2     2      0     882
                                             29 BANK0      2     2      0
                       _LCD_SendByte
                         _LCD_SendNb
 ---------------------------------------------------------------------------------
 (2) _setPosicaoAtual                                      2     0      2    4601
                                             50 BANK0      2     0      2
                            ___ftdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) _setPosicaoDesejada                                   2     0      2    4707
                                             50 BANK0      2     0      2
                            ___ftdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    2160
                                             20 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _int2char                                            12    10      2    1649
                                             52 BANK0      6     4      2
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
                            ___fttol (ARG)
                            ___lwdiv
                           ___lwtoft (ARG)
                             ___wmul
                    _getPosicaoAtual (ARG)
                      _getVelocidade (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     501
                                              8 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _getVelocidade                                        2     0      2       0
                                              8 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getPosicaoAtual                                      2     0      2    4572
                                             50 BANK0      2     0      2
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             4     1      3    1902
                                             16 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     464
                                             36 BANK0     14    10      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2206
                                             20 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1668
                                              8 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _calculaVelocidade                                    4     4      0    1202
                                             23 BANK0      4     4      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     656
                                             17 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     512
                                              8 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _LCD_sendString                                       8     4      4    2936
                                             33 BANK0      8     4      4
                       _LCD_SendByte
                          _setCursor
 ---------------------------------------------------------------------------------
 (2) _setCursor                                            4     3      1     926
                                             29 BANK0      4     3      1
                       _LCD_SendByte
 ---------------------------------------------------------------------------------
 (3) _LCD_SendByte                                         8     7      1     698
                                             21 BANK0      8     7      1
                         _LCD_SendNb
 ---------------------------------------------------------------------------------
 (3) _LCD_SendNb                                          13    13      0     184
                                              8 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 15    15      0     215
                                              6 COMMON     7     7      0
                                              0 BANK0      8     8      0
                        _calculaErro
 ---------------------------------------------------------------------------------
 (6) _calculaErro                                          2     2      0     119
                                              4 COMMON     2     2      0
                                _abs
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     119
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_sendString
     _LCD_SendByte
       _LCD_SendNb
     _setCursor
       _LCD_SendByte
         _LCD_SendNb
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _calculaVelocidade
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _getPosicaoAtual
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _getVelocidade
   _int2char
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwdiv (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
     _getPosicaoAtual (ARG)
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _getVelocidade (ARG)
   _setPosicaoDesejada
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _setup
     _setPosicaoAtual
       ___ftdiv
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _setupDisplay
       _LCD_SendByte
         _LCD_SendNb
       _LCD_SendNb
     _setupStepper

 _ISR (ROOT)
   _calculaErro
     _abs

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      8       C       7       15.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3A      48       5       90.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      61      12        0.0%
ABS                  0      0      61       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Jul 20 16:58:20 2022

                                 pc 0002                         ?_LCD_SendNb 0070  
                       __CFG_CP$OFF 0000                        ___awdiv@sign 002E  
                                fsr 0004                 ___wmul@multiplicand 0033  
                    _LCD_SendNb$310 0032                      _LCD_SendNb$307 002C  
                    _LCD_SendNb$308 002E                      _LCD_SendNb$309 0030  
                   ??_getVelocidade 002A                                 l144 007A  
                               l307 0E7C                                 l480 06D7  
                               l472 06BA                                 l563 05F5  
                               l479 06CF                                 _PR2 0092  
                      __CFG_CPD$OFF 0000                                 _ISR 025A  
                               _abs 0E06                                 fsr0 0004  
                               indf 0000                        __CFG_IESO$ON 0000  
                      __CFG_LVP$OFF 0000                       ?_LCD_SendByte 0035  
                              ?_ISR 0070                        ___ftdiv@cntr 003E  
                      ___ftdiv@sign 0043                                ?_abs 0070  
                              l1311 04F7                                l1241 01DF  
                              l1305 04E1                                l1235 01A7  
                              l1229 016F                                l1261 068C  
                              l1333 055B                                l1325 053C  
                              l1247 0217                                l1265 0693  
                              l1275 06BF                                l1267 069F  
                              l1531 03B2                                l1515 0363  
                              l1347 059B                                l1293 07CB  
                              l1277 06C9                                l1269 06A4  
                              l1509 034D                                l1373 05EA  
                              l1365 05CD                                l1439 0E5E  
                              l1631 0715                                l1623 06FA  
                              l1543 03DA                                l1527 03A2  
                              l1375 05F8                                l1367 05DD  
                              l1473 0771                                l1635 071C  
                              l1491 079D                                l1483 0779  
                              l1467 0766                                l1539 03CA  
                              l1379 0606                                l1485 0787  
                              l1495 07A8                                l1807 0FA8  
                              l1833 006D                                l1825 0054  
                              l1499 07B0                                l1765 0E74  
                              l1829 0060                                l1795 0F51  
                              l1787 0F2D                                l1789 0F3B  
                              l1799 0F5C                                STR_1 0819  
                              STR_2 0815                                STR_3 0810  
                              u1105 0200                                u1065 0190  
                              u2105 0E7D                                u1225 06DE  
                              u1145 0698                                u1305 053D  
                              u2115 0E84                                u1315 054E  
                              u1085 01C8                                u1165 06B3  
                              u1325 055C                                u1255 07EC  
                              u1415 05EC                                u1185 06C2  
                              u2145 0F30                                u1355 05A2  
                              u2165 0F3C                                u1285 0509  
                              u1535 077C                                u2175 0F48  
                              u1295 051B                                u2247 0632  
                              u2257 0243                                u1625 036F  
                              u1385 05CE                                u2185 0F52  
                              u2267 0256                                u1555 0788  
                              u1715 03DB                                u1635 0381  
                              u1565 0794                                u1725 03E3  
                              u1575 079E                                u1665 03B3  
                              u1675 03BB                        __CFG_WRT$OFF 0000  
                     __CFG_FCMEN$ON 0000                                abs@a 0070  
                              _main 004F                        ___ftpack@arg 0028  
                      ___ftpack@exp 002B                                btemp 007E  
                     __CFG_BOREN$ON 0000                                start 0012  
                     __CFG_MCLRE$ON 0000                   ??_getPosicaoAtual 0054  
                      ___ftmul@cntr 0042                        ___ftmul@sign 0043  
                             ??_ISR 0076                        ___fttol@exp1 0051  
                             ??_abs 0072                        ___fttol@lval 004D  
              __size_of_calculaErro 0053                               ?_main 0070  
                   __end_of___awdiv 07B5                       __CFG_WDTE$OFF 0000  
                   __end_of___ftdiv 0581                     __end_of___ftmul 0408  
                   ___awdiv@divisor 0028                     __end_of___fttol 060F  
                             _T2CON 0012                      __CFG_DEBUG$OFF 0000  
                   __end_of___lwdiv 0F61                               i1l120 0327  
                             i1l105 0275                               i1l133 032A  
                   ___awdiv@counter 002D                               _PORTB 0006  
                             _PORTD 0008                               _TRISB 0086  
                             _TRISD 0088                      ??_LCD_SendByte 0036  
                             _error 005A                               _phase 0061  
                     ___ftpack@sign 002C                               _speed 00A8  
                             _setup 0E14                               pclath 000A  
           __size_of_LCD_sendString 006A                 __size_of_LCD_SendNb 0100  
                  _LCD_SendByte$314 003B                               status 0003  
                             wtemp0 007E                   _calculaVelocidade 0F61  
                ?_calculaVelocidade 0070                     __initialization 0015  
                      __end_of_main 015A                 ??_calculaVelocidade 0037  
                      LCD_SendNb@NB 0034                              ??_main 00A6  
                     ___fttol@sign1 004C                   int2char@int_value 0054  
          __size_of_setPosicaoAtual 0030                    ___awdiv@dividend 002A  
                            ?_setup 0070                    __end_of___ftpack 06F0  
                            _ANSELH 0189                              u200_25 02AE  
                            i1l1703 02D4                              i1l1713 02E5  
                            i1l1705 02D6           __end_of_calculaVelocidade 0FAD  
                            i1l1727 0323                              i1l1719 02FA  
                            i1l1593 0FE3                              i1l1681 027E  
                            i1l1695 02AB                              i1l1689 0297  
                            u181_25 0FCF                              u182_25 0FDA  
                            u183_25 0FEB                              u184_25 0FF6  
                  __end_of___lwtoft 0E55                              u197_25 0288  
        __end_of_setPosicaoDesejada 0EF3                      __CFG_PWRTE$OFF 0000  
                  __end_of_int2char 04C9                              ___wmul 0E70  
                         ??___awdiv 002C                 LCD_sendString@i_330 0048  
                         ??___ftdiv 003A                     LCD_SendByte@reg 003A  
                         ??___ftmul 003A                           ??___fttol 0048  
                         ??___lwdiv 002C                    ___awdiv@quotient 002F  
               LCD_sendString@linha 0043               ___ftmul@f3_as_product 003F  
                            saved_w 007E             __end_of__initialization 004B  
                        ___ftdiv@f1 0037                          ___ftdiv@f2 0034  
                        ___ftdiv@f3 003F                          ___ftmul@f1 0034  
                        ___ftmul@f2 0037                          ___fttol@f1 0044  
                    __pcstackCOMMON 0070                        __pidataBANK0 0DF5  
                      __pidataBANK1 0DF3                __end_of_LCD_SendByte 07FF  
                      ??_LCD_SendNb 0028                       __end_of_setup 0E27  
                        ___lwtoft@c 0030                   LCD_sendString@col 0046  
                           ??_setup 0054                     _getPosicaoAtual 0E93  
                    _LCD_sendString 06F0                          __pbssBANK0 005A  
                        __pbssBANK1 00A8          __size_of_calculaVelocidade 004C  
                 ??_setPosicaoAtual 0054                  __end_of_LCD_SendNb 025A  
                   LCD_sendString@i 0047                  int2char@int_value0 00A0  
                int2char@int_value1 00A2                  int2char@int_value2 00A4  
                        __pmaintext 004F                             ?___wmul 0031  
                __size_of_setCursor 001B                          __pintentry 0004  
                         ?___ftpack 0028                           ?___lwtoft 0030  
                           _ISR$250 0020                             _ISR$251 0022  
                           _ISR$252 0024                             _ISR$253 0026  
             __end_of_getVelocidade 0E06              __end_of_LCD_sendString 075A  
                         ?_int2char 0054                          __stringtab 0800  
                           ___awdiv 075A                       ??_calculaErro 0074  
                           ___ftdiv 04C9                     __size_of___wmul 0023  
                           ___ftmul 0335                             ___fttol 0581  
                           ___lwdiv 0F23                    LCD_SendByte@byte 0035  
                        ??___ftpack 002D                             __ptext1 0E14  
                           __ptext2 0E27                             __ptext3 060F  
                           __ptext4 0EF3                             __ptext5 0EC3  
                           __ptext6 04C9                             __ptext7 0408  
                           __ptext8 0F23                             __ptext9 0DF9  
setPosicaoDesejada@posicao_desejada 0052                          ??___lwtoft 0033  
                      __size_of_ISR 00DB                        __size_of_abs 000E  
           __end_of_getPosicaoAtual 0EC3                LCD_sendString@coluna 0044  
                   ?_LCD_sendString 0041                LCD_sendString@string 0041  
                        ??_int2char 0056                end_of_initialization 004B  
                 __end_of_setCursor 0E70               __size_of_LCD_SendByte 004A  
                     ?_setupDisplay 0070                  _setPosicaoDesejada 0EC3  
                        _speed_ramp 0060                       ?_setupStepper 0070  
                         _PORTDbits 0008                 __end_of_calculaErro 1000  
                      _LCD_Controle 0064                 ?_setPosicaoDesejada 0052  
                      _LCD_SendByte 07B5                         ___ftdiv@exp 0042  
              ??_setPosicaoDesejada 0054                      ??_setupDisplay 003D  
                       ___ftmul@exp 003E                      __end_of___wmul 0E93  
                    ??_setupStepper 0028                     _setPosicaoAtual 0EF3  
               start_initialization 0015                    ?_getPosicaoAtual 0052  
                       __end_of_ISR 0335                         __end_of_abs 0E14  
          __CFG_FOSC$INTRC_NOCLKOUT 0000                         _c_int_value 0062  
                          ??___wmul 0035                         _calculaErro 0FAD  
                       __pdataBANK0 0064                         __pdataBANK1 00AA  
                 __size_of___ftpack 006E                           ___latbits 0002  
                 __size_of___lwtoft 0018                       __pcstackBANK0 0020  
                     __pcstackBANK1 00A0                     setCursor@coluna 003D  
                 __size_of_int2char 00C1                    ___lwdiv@dividend 002A  
                          ?___awdiv 0028                            ?___ftdiv 0034  
                          ?___ftmul 0034                            ?___fttol 0044  
                          ?___lwdiv 0028             __end_of_setPosicaoAtual 0F23  
                         __pstrings 0800                    ??_LCD_sendString 0045  
              __end_of_setupDisplay 0682                    ___lwdiv@quotient 002E  
                      setCursor@aux 0040                      __size_of_setup 0013  
                          _LCD_PORT 0066                            _LCD_TRIS 00AA  
                 interrupt_function 0004                __end_of_setupStepper 0E3D  
                    ___wmul@product 0035                           _setCursor 0E55  
                          _PIE1bits 008C              __size_of_getVelocidade 000D  
                          _PIR1bits 000C                         _LCD_Entrada 0065  
                       __stringbase 080F                   ___wmul@multiplier 0031  
                        ?_setCursor 003D                    __size_of___awdiv 005B  
                  __size_of___ftdiv 00B8                    ?_setPosicaoAtual 0052  
                  __size_of___ftmul 00D3                    __size_of___fttol 008E  
                  __size_of___lwdiv 003E                            ___ftpack 0682  
                __end_of__stringtab 0810                            ___lwtoft 0E3D  
                    setCursor@linha 003F                       _getVelocidade 0DF9  
                   ___lwdiv@divisor 0028                     ___lwdiv@counter 002D  
                          __ptext10 0E93                            __ptext11 0E3D  
                          __ptext20 07B5                            __ptext12 0581  
                          __ptext21 015A                            __ptext13 0335  
                          __ptext22 025A                            __ptext14 0682  
                          __ptext23 0FAD                            __ptext15 0F61  
                          __ptext24 0E06                            __ptext16 0E70  
                          __ptext17 075A                            __ptext18 06F0  
                          __ptext19 0E55                   __CFG_BOR4V$BOR40V 0000  
                          _int2char 0408                       __size_of_main 010B  
       __size_of_setPosicaoDesejada 0030                            _setpoint 005E  
                          _position 005C                        ?_calculaErro 0070  
                        _LCD_SendNb 015A               __size_of_setupDisplay 0073  
      setPosicaoAtual@posicao_atual 0052                      ?_getVelocidade 0028  
                        _INTCONbits 000B               __size_of_setupStepper 0016  
                          intlevel1 0000            __size_of_getPosicaoAtual 0030  
                       ??_setCursor 003E               _calculaVelocidade$745 0039  
                         stringcode 080A                        _setupDisplay 060F  
                      _setupStepper 0E27                            stringdir 080A  
                          stringtab 0800                          _STATUSbits 0003  
