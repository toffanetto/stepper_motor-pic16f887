

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jul 21 13:56:16 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	intentry,global,class=CODE,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    53                           	dabs	1,0x7E,2
    54  0000                     
    55                           ; Version 1.45
    56                           ; Generated 16/11/2017 GMT
    57                           ; 
    58                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC16F887 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     	;# 
    90  0001                     	;# 
    91  0002                     	;# 
    92  0003                     	;# 
    93  0004                     	;# 
    94  0005                     	;# 
    95  0006                     	;# 
    96  0007                     	;# 
    97  0008                     	;# 
    98  0009                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000D                     	;# 
   103  000E                     	;# 
   104  000E                     	;# 
   105  000F                     	;# 
   106  0010                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0013                     	;# 
   110  0014                     	;# 
   111  0015                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  001D                     	;# 
   122  001E                     	;# 
   123  001F                     	;# 
   124  0081                     	;# 
   125  0085                     	;# 
   126  0086                     	;# 
   127  0087                     	;# 
   128  0088                     	;# 
   129  0089                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  008F                     	;# 
   134  0090                     	;# 
   135  0091                     	;# 
   136  0092                     	;# 
   137  0093                     	;# 
   138  0093                     	;# 
   139  0093                     	;# 
   140  0094                     	;# 
   141  0095                     	;# 
   142  0096                     	;# 
   143  0097                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009A                     	;# 
   147  009B                     	;# 
   148  009C                     	;# 
   149  009D                     	;# 
   150  009E                     	;# 
   151  009F                     	;# 
   152  0105                     	;# 
   153  0107                     	;# 
   154  0108                     	;# 
   155  0109                     	;# 
   156  010C                     	;# 
   157  010C                     	;# 
   158  010D                     	;# 
   159  010E                     	;# 
   160  010F                     	;# 
   161  0185                     	;# 
   162  0187                     	;# 
   163  0188                     	;# 
   164  0189                     	;# 
   165  018C                     	;# 
   166  018D                     	;# 
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  000E                     	;# 
   183  000F                     	;# 
   184  0010                     	;# 
   185  0011                     	;# 
   186  0012                     	;# 
   187  0013                     	;# 
   188  0014                     	;# 
   189  0015                     	;# 
   190  0015                     	;# 
   191  0016                     	;# 
   192  0017                     	;# 
   193  0018                     	;# 
   194  0019                     	;# 
   195  001A                     	;# 
   196  001B                     	;# 
   197  001B                     	;# 
   198  001C                     	;# 
   199  001D                     	;# 
   200  001E                     	;# 
   201  001F                     	;# 
   202  0081                     	;# 
   203  0085                     	;# 
   204  0086                     	;# 
   205  0087                     	;# 
   206  0088                     	;# 
   207  0089                     	;# 
   208  008C                     	;# 
   209  008D                     	;# 
   210  008E                     	;# 
   211  008F                     	;# 
   212  0090                     	;# 
   213  0091                     	;# 
   214  0092                     	;# 
   215  0093                     	;# 
   216  0093                     	;# 
   217  0093                     	;# 
   218  0094                     	;# 
   219  0095                     	;# 
   220  0096                     	;# 
   221  0097                     	;# 
   222  0098                     	;# 
   223  0099                     	;# 
   224  009A                     	;# 
   225  009B                     	;# 
   226  009C                     	;# 
   227  009D                     	;# 
   228  009E                     	;# 
   229  009F                     	;# 
   230  0105                     	;# 
   231  0107                     	;# 
   232  0108                     	;# 
   233  0109                     	;# 
   234  010C                     	;# 
   235  010C                     	;# 
   236  010D                     	;# 
   237  010E                     	;# 
   238  010F                     	;# 
   239  0185                     	;# 
   240  0187                     	;# 
   241  0188                     	;# 
   242  0189                     	;# 
   243  018C                     	;# 
   244  018D                     	;# 
   245  0000                     	;# 
   246  0001                     	;# 
   247  0002                     	;# 
   248  0003                     	;# 
   249  0004                     	;# 
   250  0005                     	;# 
   251  0006                     	;# 
   252  0007                     	;# 
   253  0008                     	;# 
   254  0009                     	;# 
   255  000A                     	;# 
   256  000B                     	;# 
   257  000C                     	;# 
   258  000D                     	;# 
   259  000E                     	;# 
   260  000E                     	;# 
   261  000F                     	;# 
   262  0010                     	;# 
   263  0011                     	;# 
   264  0012                     	;# 
   265  0013                     	;# 
   266  0014                     	;# 
   267  0015                     	;# 
   268  0015                     	;# 
   269  0016                     	;# 
   270  0017                     	;# 
   271  0018                     	;# 
   272  0019                     	;# 
   273  001A                     	;# 
   274  001B                     	;# 
   275  001B                     	;# 
   276  001C                     	;# 
   277  001D                     	;# 
   278  001E                     	;# 
   279  001F                     	;# 
   280  0081                     	;# 
   281  0085                     	;# 
   282  0086                     	;# 
   283  0087                     	;# 
   284  0088                     	;# 
   285  0089                     	;# 
   286  008C                     	;# 
   287  008D                     	;# 
   288  008E                     	;# 
   289  008F                     	;# 
   290  0090                     	;# 
   291  0091                     	;# 
   292  0092                     	;# 
   293  0093                     	;# 
   294  0093                     	;# 
   295  0093                     	;# 
   296  0094                     	;# 
   297  0095                     	;# 
   298  0096                     	;# 
   299  0097                     	;# 
   300  0098                     	;# 
   301  0099                     	;# 
   302  009A                     	;# 
   303  009B                     	;# 
   304  009C                     	;# 
   305  009D                     	;# 
   306  009E                     	;# 
   307  009F                     	;# 
   308  0105                     	;# 
   309  0107                     	;# 
   310  0108                     	;# 
   311  0109                     	;# 
   312  010C                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  010F                     	;# 
   317  0185                     	;# 
   318  0187                     	;# 
   319  0188                     	;# 
   320  0189                     	;# 
   321  018C                     	;# 
   322  018D                     	;# 
   323  0000                     	;# 
   324  0001                     	;# 
   325  0002                     	;# 
   326  0003                     	;# 
   327  0004                     	;# 
   328  0005                     	;# 
   329  0006                     	;# 
   330  0007                     	;# 
   331  0008                     	;# 
   332  0009                     	;# 
   333  000A                     	;# 
   334  000B                     	;# 
   335  000C                     	;# 
   336  000D                     	;# 
   337  000E                     	;# 
   338  000E                     	;# 
   339  000F                     	;# 
   340  0010                     	;# 
   341  0011                     	;# 
   342  0012                     	;# 
   343  0013                     	;# 
   344  0014                     	;# 
   345  0015                     	;# 
   346  0015                     	;# 
   347  0016                     	;# 
   348  0017                     	;# 
   349  0018                     	;# 
   350  0019                     	;# 
   351  001A                     	;# 
   352  001B                     	;# 
   353  001B                     	;# 
   354  001C                     	;# 
   355  001D                     	;# 
   356  001E                     	;# 
   357  001F                     	;# 
   358  0081                     	;# 
   359  0085                     	;# 
   360  0086                     	;# 
   361  0087                     	;# 
   362  0088                     	;# 
   363  0089                     	;# 
   364  008C                     	;# 
   365  008D                     	;# 
   366  008E                     	;# 
   367  008F                     	;# 
   368  0090                     	;# 
   369  0091                     	;# 
   370  0092                     	;# 
   371  0093                     	;# 
   372  0093                     	;# 
   373  0093                     	;# 
   374  0094                     	;# 
   375  0095                     	;# 
   376  0096                     	;# 
   377  0097                     	;# 
   378  0098                     	;# 
   379  0099                     	;# 
   380  009A                     	;# 
   381  009B                     	;# 
   382  009C                     	;# 
   383  009D                     	;# 
   384  009E                     	;# 
   385  009F                     	;# 
   386  0105                     	;# 
   387  0107                     	;# 
   388  0108                     	;# 
   389  0109                     	;# 
   390  010C                     	;# 
   391  010C                     	;# 
   392  010D                     	;# 
   393  010E                     	;# 
   394  010F                     	;# 
   395  0185                     	;# 
   396  0187                     	;# 
   397  0188                     	;# 
   398  0189                     	;# 
   399  018C                     	;# 
   400  018D                     	;# 
   401                           
   402                           	psect	idataBANK1
   403  09C7                     __pidataBANK1:	
   404                           
   405                           ;initializer for _LCD_TRIS
   406  09C7  3486               	retlw	134
   407  09C8  3400               	retlw	0
   408                           
   409                           ;initializer for _LCD_ShiftDisplay
   410  09C9  3410               	retlw	16
   411                           
   412                           ;initializer for _LCD_Controle
   413  09CA  340C               	retlw	12
   414                           
   415                           ;initializer for _LCD_Entrada
   416  09CB  3403               	retlw	3
   417                           
   418                           ;initializer for _LCD_PORT
   419  09CC  3406               	retlw	6
   420  09CD  3400               	retlw	0
   421  0019                     _TXREG	set	25
   422  001A                     _RCREG	set	26
   423  0018                     _RCSTAbits	set	24
   424  0018                     _RCSTA	set	24
   425  0008                     _PORTDbits	set	8
   426  0003                     _STATUSbits	set	3
   427  0012                     _T2CON	set	18
   428  000C                     _PIR1bits	set	12
   429  000B                     _INTCONbits	set	11
   430  0008                     _PORTD	set	8
   431  0006                     _PORTB	set	6
   432  0099                     _SPBRG	set	153
   433  0098                     _TXSTA	set	152
   434  0087                     _TRISCbits	set	135
   435  008C                     _PIE1bits	set	140
   436  0088                     _TRISD	set	136
   437  0086                     _TRISB	set	134
   438  0092                     _PR2	set	146
   439  0187                     _BAUDCTLbits	set	391
   440  0189                     _ANSELH	set	393
   441                           
   442                           	psect	strings
   443  0800                     __pstrings:	
   444  0800                     stringtab:	
   445  0800                     __stringtab:	
   446                           
   447                           ;	String table - string pointers are 1 byte each
   448  0800  1BFF               	btfsc	btemp+1,7
   449  0801  280A               	ljmp	stringcode
   450  0802  1383               	bcf	3,7
   451  0803  187F               	btfsc	btemp+1,0
   452  0804  1783               	bsf	3,7
   453  0805  0800               	movf	0,w
   454  0806  0A84               	incf	4,f
   455  0807  1903               	skipnz
   456  0808  0AFF               	incf	btemp+1,f
   457  0809  0008               	return
   458  080A                     stringcode:	
   459  080A                     stringdir:	
   460  080A  3008               	movlw	high stringdir
   461  080B  008A               	movwf	10
   462  080C  0804               	movf	4,w
   463  080D  0A84               	incf	4,f
   464  080E  0782               	addwf	2,f
   465  080F                     __stringbase:	
   466  080F  3400               	retlw	0
   467  0810                     __end_of__stringtab:	
   468  0810                     STR_5:	
   469  0810  3450               	retlw	80	;'P'
   470  0811  346F               	retlw	111	;'o'
   471  0812  3473               	retlw	115	;'s'
   472  0813  3469               	retlw	105	;'i'
   473  0814  3463               	retlw	99	;'c'
   474  0815  3461               	retlw	97	;'a'
   475  0816  346F               	retlw	111	;'o'
   476  0817  3420               	retlw	32	;' '
   477  0818  3464               	retlw	100	;'d'
   478  0819  3465               	retlw	101	;'e'
   479  081A  3473               	retlw	115	;'s'
   480  081B  3465               	retlw	101	;'e'
   481  081C  346A               	retlw	106	;'j'
   482  081D  3461               	retlw	97	;'a'
   483  081E  3464               	retlw	100	;'d'
   484  081F  3461               	retlw	97	;'a'
   485  0820  343A               	retlw	58	;':'
   486  0821  3420               	retlw	32	;' '
   487  0822  3400               	retlw	0
   488  0823                     STR_4:	
   489  0823  3450               	retlw	80	;'P'
   490  0824  346F               	retlw	111	;'o'
   491  0825  3473               	retlw	115	;'s'
   492  0826  3469               	retlw	105	;'i'
   493  0827  3463               	retlw	99	;'c'
   494  0828  3461               	retlw	97	;'a'
   495  0829  346F               	retlw	111	;'o'
   496  082A  3420               	retlw	32	;' '
   497  082B  3461               	retlw	97	;'a'
   498  082C  3474               	retlw	116	;'t'
   499  082D  3475               	retlw	117	;'u'
   500  082E  3461               	retlw	97	;'a'
   501  082F  346C               	retlw	108	;'l'
   502  0830  343A               	retlw	58	;':'
   503  0831  3420               	retlw	32	;' '
   504  0832  3400               	retlw	0
   505  0833                     STR_3:	
   506  0833  3456               	retlw	86	;'V'
   507  0834  3465               	retlw	101	;'e'
   508  0835  346C               	retlw	108	;'l'
   509  0836  343A               	retlw	58	;':'
   510  0837  3400               	retlw	0
   511  0838                     STR_2:	
   512  0838  3450               	retlw	80	;'P'
   513  0839  3441               	retlw	65	;'A'
   514  083A  343A               	retlw	58	;':'
   515  083B  3400               	retlw	0
   516  083C                     STR_1:	
   517  083C  3450               	retlw	80	;'P'
   518  083D  3446               	retlw	70	;'F'
   519  083E  343A               	retlw	58	;':'
   520  083F  3400               	retlw	0
   521                           
   522                           ; #config settings
   523  0000                     
   524                           	psect	cinit
   525  07E0                     start_initialization:	
   526  07E0                     __initialization:	
   527                           
   528                           ; Initialize objects allocated to BANK1
   529  07E0  1383               	bcf	3,7	;select IRP bank0
   530  07E1  30EF               	movlw	low (__pdataBANK1+7)
   531  07E2  00FD               	movwf	btemp+-1
   532  07E3  3009               	movlw	high __pidataBANK1
   533  07E4  00FE               	movwf	btemp
   534  07E5  30C7               	movlw	low __pidataBANK1
   535  07E6  00FF               	movwf	btemp+1
   536  07E7  30E8               	movlw	low __pdataBANK1
   537  07E8  0084               	movwf	4
   538  07E9  120A  158A  21F1  120A  118A  	fcall	init_ram0
   539                           
   540                           ; Clear objects allocated to BANK1
   541  07EE  30DB               	movlw	low __pbssBANK1
   542  07EF  0084               	movwf	4
   543  07F0  30E8               	movlw	low (__pbssBANK1+13)
   544  07F1  120A  158A  21CE  120A  118A  	fcall	clear_ram0
   545                           
   546                           ; Clear objects allocated to BANK0
   547  07F6  3050               	movlw	low __pbssBANK0
   548  07F7  0084               	movwf	4
   549  07F8  305F               	movlw	low (__pbssBANK0+15)
   550  07F9  120A  158A  21CE   	fcall	clear_ram0
   551  07FC                     end_of_initialization:	
   552                           ;End of C runtime variable initialization code
   553                           
   554  07FC                     __end_of__initialization:	
   555  07FC  0183               	clrf	3
   556  07FD  120A  118A  2E52   	ljmp	_main	;jump to C main() function
   557                           
   558                           	psect	bssBANK0
   559  0050                     __pbssBANK0:	
   560  0050                     _data_recived:	
   561  0050                     	ds	5
   562  0055                     _c_int_value:	
   563  0055                     	ds	5
   564  005A                     _int_value:	
   565  005A                     	ds	2
   566  005C                     _i:	
   567  005C                     	ds	1
   568  005D                     _speed_ramp:	
   569  005D                     	ds	1
   570  005E                     _phase:	
   571  005E                     	ds	1
   572                           
   573                           	psect	bssBANK1
   574  00DB                     __pbssBANK1:	
   575  00DB                     _speed:	
   576  00DB                     	ds	2
   577  00DD                     _error:	
   578  00DD                     	ds	2
   579  00DF                     _position:	
   580  00DF                     	ds	2
   581  00E1                     _setpoint:	
   582  00E1                     	ds	2
   583  00E3                     _c_int_value_:	
   584  00E3                     	ds	5
   585                           
   586                           	psect	dataBANK1
   587  00E8                     __pdataBANK1:	
   588  00E8                     _LCD_TRIS:	
   589  00E8                     	ds	2
   590  00EA                     _LCD_ShiftDisplay:	
   591  00EA                     	ds	1
   592  00EB                     _LCD_Controle:	
   593  00EB                     	ds	1
   594  00EC                     _LCD_Entrada:	
   595  00EC                     	ds	1
   596  00ED                     _LCD_PORT:	
   597  00ED                     	ds	2
   598                           
   599                           	psect	inittext
   600  09ED                     init_fetch0:	
   601                           ;	Called with low address in FSR and high address in W
   602                           
   603  09ED  087E               	movf	126,w
   604  09EE  008A               	movwf	10
   605  09EF  087F               	movf	127,w
   606  09F0  0082               	movwf	2
   607  09F1                     init_ram0:	
   608                           ;Called with:
   609                           ;	high address of idata address in btemp 
   610                           ;	low address of idata address in btemp+1 
   611                           ;	low address of data in FSR
   612                           ;	high address + 1 of data in btemp-1
   613                           
   614  09F1  21ED  120A  158A   	fcall	init_fetch0
   615  09F4  0080               	movwf	0
   616  09F5  0A84               	incf	4,f
   617  09F6  0804               	movf	4,w
   618  09F7  067D               	xorwf	125,w
   619  09F8  1903               	btfsc	3,2
   620  09F9  3400               	retlw	0
   621  09FA  0AFF               	incf	127,f
   622  09FB  1903               	btfsc	3,2
   623  09FC  0AFE               	incf	126,f
   624  09FD  29F1               	goto	init_ram0
   625                           
   626                           	psect	clrtext
   627  09CE                     clear_ram0:	
   628                           ;	Called with FSR containing the base address, and
   629                           ;	W with the last address+1
   630                           
   631  09CE  0064               	clrwdt	;clear the watchdog before getting into this loop
   632  09CF                     clrloop0:	
   633  09CF  0180               	clrf	0	;clear RAM location pointed to by FSR
   634  09D0  0A84               	incf	4,f	;increment pointer
   635  09D1  0604               	xorwf	4,w	;XOR with final address
   636  09D2  1903               	btfsc	3,2	;have we reached the end yet?
   637  09D3  3400               	retlw	0	;all done for this memory range, return
   638  09D4  0604               	xorwf	4,w	;XOR again to restore value
   639  09D5  29CF               	goto	clrloop0	;do the next byte
   640                           
   641                           	psect	cstackBANK1
   642  00A0                     __pcstackBANK1:	
   643  00A0                     ?_sendString_:	
   644  00A0                     ??_sendChar_:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  00A0                     ??_LCD_SendNb:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  00A0                     ??_setupStepper:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  00A0                     ?_getVelocidade:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  00A0                     ?___awdiv:	
   657                           ; 2 bytes @ 0x0
   658                           
   659  00A0                     ?___lwdiv:	
   660                           ; 2 bytes @ 0x0
   661                           
   662  00A0                     ?___ftpack:	
   663                           ; 2 bytes @ 0x0
   664                           
   665  00A0                     ?___aldiv:	
   666                           ; 3 bytes @ 0x0
   667                           
   668  00A0                     sendChar_@dado:	
   669                           ; 4 bytes @ 0x0
   670                           
   671  00A0                     sendString_@dado:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  00A0                     ___awdiv@divisor:	
   675                           ; 2 bytes @ 0x0
   676                           
   677  00A0                     ___lwdiv@divisor:	
   678                           ; 2 bytes @ 0x0
   679                           
   680  00A0                     ___ftpack@arg:	
   681                           ; 2 bytes @ 0x0
   682                           
   683  00A0                     ___aldiv@divisor:	
   684                           ; 3 bytes @ 0x0
   685                           
   686                           
   687                           ; 4 bytes @ 0x0
   688  00A0                     	ds	2
   689  00A2                     ??_sendString_:	
   690  00A2                     ??_getVelocidade:	
   691                           ; 1 bytes @ 0x2
   692                           
   693  00A2                     ___awdiv@dividend:	
   694                           ; 1 bytes @ 0x2
   695                           
   696  00A2                     ___lwdiv@dividend:	
   697                           ; 2 bytes @ 0x2
   698                           
   699                           
   700                           ; 2 bytes @ 0x2
   701  00A2                     	ds	1
   702  00A3                     sendString_@j:	
   703  00A3                     ___ftpack@exp:	
   704                           ; 1 bytes @ 0x3
   705                           
   706                           
   707                           ; 1 bytes @ 0x3
   708  00A3                     	ds	1
   709  00A4                     ??___awdiv:	
   710  00A4                     ??___lwdiv:	
   711                           ; 1 bytes @ 0x4
   712                           
   713  00A4                     ___ftpack@sign:	
   714                           ; 1 bytes @ 0x4
   715                           
   716  00A4                     _LCD_SendNb$363:	
   717                           ; 1 bytes @ 0x4
   718                           
   719  00A4                     ___aldiv@dividend:	
   720                           ; 2 bytes @ 0x4
   721                           
   722                           
   723                           ; 4 bytes @ 0x4
   724  00A4                     	ds	1
   725  00A5                     ??___ftpack:	
   726  00A5                     ___awdiv@counter:	
   727                           ; 1 bytes @ 0x5
   728                           
   729  00A5                     ___lwdiv@quotient:	
   730                           ; 1 bytes @ 0x5
   731                           
   732                           
   733                           ; 2 bytes @ 0x5
   734  00A5                     	ds	1
   735  00A6                     ___awdiv@sign:	
   736  00A6                     _LCD_SendNb$364:	
   737                           ; 1 bytes @ 0x6
   738                           
   739                           
   740                           ; 2 bytes @ 0x6
   741  00A6                     	ds	1
   742  00A7                     ___lwdiv@counter:	
   743  00A7                     ___awdiv@quotient:	
   744                           ; 1 bytes @ 0x7
   745                           
   746                           
   747                           ; 2 bytes @ 0x7
   748  00A7                     	ds	1
   749  00A8                     ??___aldiv:	
   750  00A8                     ?___lwtoft:	
   751                           ; 1 bytes @ 0x8
   752                           
   753  00A8                     _LCD_SendNb$365:	
   754                           ; 3 bytes @ 0x8
   755                           
   756  00A8                     ___lwtoft@c:	
   757                           ; 2 bytes @ 0x8
   758                           
   759                           
   760                           ; 2 bytes @ 0x8
   761  00A8                     	ds	1
   762  00A9                     ?___wmul:	
   763  00A9                     ___aldiv@counter:	
   764                           ; 2 bytes @ 0x9
   765                           
   766  00A9                     ___wmul@multiplier:	
   767                           ; 1 bytes @ 0x9
   768                           
   769                           
   770                           ; 2 bytes @ 0x9
   771  00A9                     	ds	1
   772  00AA                     ___aldiv@sign:	
   773  00AA                     _LCD_SendNb$366:	
   774                           ; 1 bytes @ 0xA
   775                           
   776                           
   777                           ; 2 bytes @ 0xA
   778  00AA                     	ds	1
   779  00AB                     ??___lwtoft:	
   780  00AB                     ___wmul@multiplicand:	
   781                           ; 1 bytes @ 0xB
   782                           
   783  00AB                     ___aldiv@quotient:	
   784                           ; 2 bytes @ 0xB
   785                           
   786                           
   787                           ; 4 bytes @ 0xB
   788  00AB                     	ds	1
   789  00AC                     ?___ftdiv:	
   790  00AC                     ?___ftmul:	
   791                           ; 3 bytes @ 0xC
   792                           
   793  00AC                     LCD_SendNb@NB:	
   794                           ; 3 bytes @ 0xC
   795                           
   796  00AC                     ___ftdiv@f2:	
   797                           ; 1 bytes @ 0xC
   798                           
   799  00AC                     ___ftmul@f1:	
   800                           ; 3 bytes @ 0xC
   801                           
   802                           
   803                           ; 3 bytes @ 0xC
   804  00AC                     	ds	1
   805  00AD                     ?_LCD_SendByte:	
   806  00AD                     ??___wmul:	
   807                           ; 1 bytes @ 0xD
   808                           
   809  00AD                     LCD_SendByte@byte:	
   810                           ; 1 bytes @ 0xD
   811                           
   812  00AD                     ___wmul@product:	
   813                           ; 1 bytes @ 0xD
   814                           
   815                           
   816                           ; 2 bytes @ 0xD
   817  00AD                     	ds	1
   818  00AE                     ??_LCD_SendByte:	
   819                           
   820                           ; 1 bytes @ 0xE
   821  00AE                     	ds	1
   822  00AF                     ?_setupSerial:	
   823  00AF                     ??_calculaVelocidade:	
   824                           ; 1 bytes @ 0xF
   825                           
   826  00AF                     setupSerial@baudrate:	
   827                           ; 1 bytes @ 0xF
   828                           
   829  00AF                     ___ftdiv@f1:	
   830                           ; 2 bytes @ 0xF
   831                           
   832  00AF                     ___ftmul@f2:	
   833                           ; 3 bytes @ 0xF
   834                           
   835                           
   836                           ; 3 bytes @ 0xF
   837  00AF                     	ds	2
   838  00B1                     ??_setupSerial:	
   839  00B1                     _calculaVelocidade$991:	
   840                           ; 1 bytes @ 0x11
   841                           
   842  00B1                     _setupSerial$992:	
   843                           ; 2 bytes @ 0x11
   844                           
   845                           
   846                           ; 4 bytes @ 0x11
   847  00B1                     	ds	1
   848  00B2                     ??___ftdiv:	
   849  00B2                     ??___ftmul:	
   850                           ; 1 bytes @ 0x12
   851                           
   852  00B2                     LCD_SendByte@reg:	
   853                           ; 1 bytes @ 0x12
   854                           
   855                           
   856                           ; 1 bytes @ 0x12
   857  00B2                     	ds	1
   858  00B3                     _LCD_SendByte$370:	
   859                           
   860                           ; 2 bytes @ 0x13
   861  00B3                     	ds	2
   862  00B5                     ??_LCD_Setup:	
   863  00B5                     ?_LCD_SetCursor:	
   864                           ; 1 bytes @ 0x15
   865                           
   866  00B5                     LCD_SetCursor@coluna:	
   867                           ; 1 bytes @ 0x15
   868                           
   869                           
   870                           ; 1 bytes @ 0x15
   871  00B5                     	ds	1
   872  00B6                     ??_LCD_SetCursor:	
   873  00B6                     ___ftdiv@cntr:	
   874                           ; 1 bytes @ 0x16
   875                           
   876  00B6                     ___ftmul@exp:	
   877                           ; 1 bytes @ 0x16
   878                           
   879                           
   880                           ; 1 bytes @ 0x16
   881  00B6                     	ds	1
   882  00B7                     LCD_SetCursor@linha:	
   883  00B7                     ___ftdiv@f3:	
   884                           ; 1 bytes @ 0x17
   885                           
   886  00B7                     ___ftmul@f3_as_product:	
   887                           ; 3 bytes @ 0x17
   888                           
   889                           
   890                           ; 3 bytes @ 0x17
   891  00B7                     	ds	1
   892  00B8                     LCD_SetCursor@aux:	
   893                           
   894                           ; 1 bytes @ 0x18
   895  00B8                     	ds	1
   896  00B9                     ?_LCD_sendString:	
   897  00B9                     LCD_sendString@string:	
   898                           ; 1 bytes @ 0x19
   899                           
   900                           
   901                           ; 2 bytes @ 0x19
   902  00B9                     	ds	1
   903  00BA                     ___ftdiv@exp:	
   904  00BA                     ___ftmul@cntr:	
   905                           ; 1 bytes @ 0x1A
   906                           
   907                           
   908                           ; 1 bytes @ 0x1A
   909  00BA                     	ds	1
   910  00BB                     LCD_sendString@linha:	
   911  00BB                     ___ftdiv@sign:	
   912                           ; 1 bytes @ 0x1B
   913                           
   914  00BB                     ___ftmul@sign:	
   915                           ; 1 bytes @ 0x1B
   916                           
   917                           
   918                           ; 1 bytes @ 0x1B
   919  00BB                     	ds	1
   920  00BC                     ?___fttol:	
   921  00BC                     LCD_sendString@coluna:	
   922                           ; 4 bytes @ 0x1C
   923                           
   924  00BC                     ___fttol@f1:	
   925                           ; 1 bytes @ 0x1C
   926                           
   927                           
   928                           ; 3 bytes @ 0x1C
   929  00BC                     	ds	1
   930  00BD                     ??_LCD_sendString:	
   931                           
   932                           ; 1 bytes @ 0x1D
   933  00BD                     	ds	1
   934  00BE                     LCD_sendString@col:	
   935                           
   936                           ; 1 bytes @ 0x1E
   937  00BE                     	ds	1
   938  00BF                     LCD_sendString@i:	
   939                           
   940                           ; 1 bytes @ 0x1F
   941  00BF                     	ds	1
   942  00C0                     ??___fttol:	
   943  00C0                     LCD_sendString@i_386:	
   944                           ; 1 bytes @ 0x20
   945                           
   946                           
   947                           ; 1 bytes @ 0x20
   948  00C0                     	ds	4
   949  00C4                     ___fttol@sign1:	
   950                           
   951                           ; 1 bytes @ 0x24
   952  00C4                     	ds	1
   953  00C5                     ___fttol@lval:	
   954                           
   955                           ; 4 bytes @ 0x25
   956  00C5                     	ds	4
   957  00C9                     ___fttol@exp1:	
   958                           
   959                           ; 1 bytes @ 0x29
   960  00C9                     	ds	1
   961  00CA                     ?_setPosicaoAtual:	
   962  00CA                     ?_setPosicaoDesejada:	
   963                           ; 1 bytes @ 0x2A
   964                           
   965  00CA                     ?_getPosicaoAtual:	
   966                           ; 1 bytes @ 0x2A
   967                           
   968  00CA                     setPosicaoAtual@posicao_atual:	
   969                           ; 2 bytes @ 0x2A
   970                           
   971  00CA                     setPosicaoDesejada@posicao_desejada:	
   972                           ; 2 bytes @ 0x2A
   973                           
   974                           
   975                           ; 2 bytes @ 0x2A
   976  00CA                     	ds	2
   977  00CC                     ?_int2char_:	
   978  00CC                     ??_setPosicaoAtual:	
   979                           ; 1 bytes @ 0x2C
   980                           
   981  00CC                     ??_getPosicaoAtual:	
   982                           ; 1 bytes @ 0x2C
   983                           
   984  00CC                     ??_setPosicaoDesejada:	
   985                           ; 1 bytes @ 0x2C
   986                           
   987  00CC                     ??_setup:	
   988                           ; 1 bytes @ 0x2C
   989                           
   990  00CC                     int2char_@int_value_:	
   991                           ; 1 bytes @ 0x2C
   992                           
   993                           
   994                           ; 2 bytes @ 0x2C
   995  00CC                     	ds	2
   996  00CE                     ??_int2char_:	
   997                           
   998                           ; 1 bytes @ 0x2E
   999  00CE                     	ds	4
  1000  00D2                     int2char_@int_value0:	
  1001                           
  1002                           ; 2 bytes @ 0x32
  1003  00D2                     	ds	2
  1004  00D4                     int2char_@int_value1:	
  1005                           
  1006                           ; 2 bytes @ 0x34
  1007  00D4                     	ds	2
  1008  00D6                     int2char_@int_value2:	
  1009                           
  1010                           ; 2 bytes @ 0x36
  1011  00D6                     	ds	2
  1012  00D8                     ??_main:	
  1013                           
  1014                           ; 1 bytes @ 0x38
  1015  00D8                     	ds	3
  1016                           
  1017                           	psect	cstackCOMMON
  1018  0071                     __pcstackCOMMON:	
  1019  0071                     ?_getChar_:	
  1020  0071                     ??_getChar_:	
  1021                           ; 1 bytes @ 0x0
  1022                           
  1023  0071                     ?_char2int_:	
  1024                           ; 1 bytes @ 0x0
  1025                           
  1026  0071                     ?_LCD_Setup:	
  1027                           ; 1 bytes @ 0x0
  1028                           
  1029  0071                     ?_sendChar_:	
  1030                           ; 1 bytes @ 0x0
  1031                           
  1032  0071                     ?_LCD_SendNb:	
  1033                           ; 1 bytes @ 0x0
  1034                           
  1035  0071                     ?_setupStepper:	
  1036                           ; 1 bytes @ 0x0
  1037                           
  1038  0071                     ?_calculaErro:	
  1039                           ; 1 bytes @ 0x0
  1040                           
  1041  0071                     ?_calculaVelocidade:	
  1042                           ; 1 bytes @ 0x0
  1043                           
  1044  0071                     ?_ISR:	
  1045                           ; 1 bytes @ 0x0
  1046                           
  1047  0071                     ?_setup:	
  1048                           ; 1 bytes @ 0x0
  1049                           
  1050  0071                     ?_main:	
  1051                           ; 1 bytes @ 0x0
  1052                           
  1053  0071                     ?_abs:	
  1054                           ; 1 bytes @ 0x0
  1055                           
  1056  0071                     ?i1___wmul:	
  1057                           ; 2 bytes @ 0x0
  1058                           
  1059  0071                     ?i1___ftpack:	
  1060                           ; 2 bytes @ 0x0
  1061                           
  1062  0071                     abs@a:	
  1063                           ; 3 bytes @ 0x0
  1064                           
  1065  0071                     i1___wmul@multiplier:	
  1066                           ; 2 bytes @ 0x0
  1067                           
  1068  0071                     i1___ftpack@arg:	
  1069                           ; 2 bytes @ 0x0
  1070                           
  1071                           
  1072                           ; 3 bytes @ 0x0
  1073  0071                     	ds	2
  1074  0073                     ??_abs:	
  1075  0073                     i1___wmul@multiplicand:	
  1076                           ; 1 bytes @ 0x2
  1077                           
  1078                           
  1079                           ; 2 bytes @ 0x2
  1080  0073                     	ds	1
  1081  0074                     i1___ftpack@exp:	
  1082                           
  1083                           ; 1 bytes @ 0x3
  1084  0074                     	ds	1
  1085  0075                     ??_calculaErro:	
  1086  0075                     ??i1___wmul:	
  1087                           ; 1 bytes @ 0x4
  1088                           
  1089  0075                     i1___ftpack@sign:	
  1090                           ; 1 bytes @ 0x4
  1091                           
  1092  0075                     i1___wmul@product:	
  1093                           ; 1 bytes @ 0x4
  1094                           
  1095                           
  1096                           ; 2 bytes @ 0x4
  1097  0075                     	ds	1
  1098  0076                     ??i1___ftpack:	
  1099                           
  1100                           ; 1 bytes @ 0x5
  1101  0076                     	ds	1
  1102  0077                     ??_char2int_:	
  1103                           
  1104                           ; 1 bytes @ 0x6
  1105  0077                     	ds	2
  1106  0079                     ?i1___lwtoft:	
  1107  0079                     i1___lwtoft@c:	
  1108                           ; 3 bytes @ 0x8
  1109                           
  1110                           
  1111                           ; 2 bytes @ 0x8
  1112  0079                     	ds	3
  1113  007C                     ??i1___lwtoft:	
  1114                           
  1115                           ; 1 bytes @ 0xB
  1116  007C                     	ds	1
  1117  007D                     ??i1_setPosicaoDesejada:	
  1118                           
  1119                           	psect	cstackBANK0
  1120  0020                     __pcstackBANK0:	
  1121                           ; 1 bytes @ 0xC
  1122                           
  1123  0020                     ?i1___ftdiv:	
  1124  0020                     char2int_@int_value0:	
  1125                           ; 3 bytes @ 0x0
  1126                           
  1127  0020                     i1___ftdiv@f2:	
  1128                           ; 2 bytes @ 0x0
  1129                           
  1130                           
  1131                           ; 3 bytes @ 0x0
  1132  0020                     	ds	2
  1133  0022                     char2int_@int_value1:	
  1134                           
  1135                           ; 2 bytes @ 0x2
  1136  0022                     	ds	1
  1137  0023                     i1___ftdiv@f1:	
  1138                           
  1139                           ; 3 bytes @ 0x3
  1140  0023                     	ds	1
  1141  0024                     char2int_@int_value2:	
  1142                           
  1143                           ; 2 bytes @ 0x4
  1144  0024                     	ds	2
  1145  0026                     ??i1___ftdiv:	
  1146                           
  1147                           ; 1 bytes @ 0x6
  1148  0026                     	ds	4
  1149  002A                     i1___ftdiv@cntr:	
  1150                           
  1151                           ; 1 bytes @ 0xA
  1152  002A                     	ds	1
  1153  002B                     i1___ftdiv@f3:	
  1154                           
  1155                           ; 3 bytes @ 0xB
  1156  002B                     	ds	3
  1157  002E                     i1___ftdiv@exp:	
  1158                           
  1159                           ; 1 bytes @ 0xE
  1160  002E                     	ds	1
  1161  002F                     i1___ftdiv@sign:	
  1162                           
  1163                           ; 1 bytes @ 0xF
  1164  002F                     	ds	1
  1165  0030                     ?i1___fttol:	
  1166  0030                     i1___fttol@f1:	
  1167                           ; 4 bytes @ 0x10
  1168                           
  1169                           
  1170                           ; 3 bytes @ 0x10
  1171  0030                     	ds	4
  1172  0034                     ??i1___fttol:	
  1173                           
  1174                           ; 1 bytes @ 0x14
  1175  0034                     	ds	4
  1176  0038                     i1___fttol@sign1:	
  1177                           
  1178                           ; 1 bytes @ 0x18
  1179  0038                     	ds	1
  1180  0039                     i1___fttol@lval:	
  1181                           
  1182                           ; 4 bytes @ 0x19
  1183  0039                     	ds	4
  1184  003D                     i1___fttol@exp1:	
  1185                           
  1186                           ; 1 bytes @ 0x1D
  1187  003D                     	ds	1
  1188  003E                     ?i1_setPosicaoDesejada:	
  1189  003E                     i1setPosicaoDesejada@posicao_desejada:	
  1190                           ; 1 bytes @ 0x1E
  1191                           
  1192                           
  1193                           ; 2 bytes @ 0x1E
  1194  003E                     	ds	2
  1195  0040                     ??_ISR:	
  1196                           
  1197                           ; 1 bytes @ 0x20
  1198  0040                     	ds	7
  1199  0047                     _ISR$287:	
  1200                           
  1201                           ; 2 bytes @ 0x27
  1202  0047                     	ds	2
  1203  0049                     _ISR$288:	
  1204                           
  1205                           ; 2 bytes @ 0x29
  1206  0049                     	ds	2
  1207  004B                     _ISR$289:	
  1208                           
  1209                           ; 2 bytes @ 0x2B
  1210  004B                     	ds	2
  1211  004D                     _ISR$290:	
  1212                           
  1213                           ; 2 bytes @ 0x2D
  1214  004D                     	ds	2
  1215  004F                     ISR@dado:	
  1216                           
  1217                           ; 1 bytes @ 0x2F
  1218  004F                     	ds	1
  1219                           
  1220                           	psect	maintext
  1221  0652                     __pmaintext:	
  1222 ;;
  1223 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1224 ;;
  1225 ;; *************** function _main *****************
  1226 ;; Defined at:
  1227 ;;		line 90 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\main.c"
  1228 ;; Parameters:    Size  Location     Type
  1229 ;;		None
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;		None
  1232 ;; Return value:  Size  Location     Type
  1233 ;;                  1    wreg      void 
  1234 ;; Registers used:
  1235 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1236 ;; Tracked objects:
  1237 ;;		On entry : B00/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1241 ;;      Params:         0       0       0       0       0
  1242 ;;      Locals:         0       0       0       0       0
  1243 ;;      Temps:          0       0       3       0       0
  1244 ;;      Totals:         0       0       3       0       0
  1245 ;;Total ram usage:        3 bytes
  1246 ;; Hardware stack levels required when called:    8
  1247 ;; This function calls:
  1248 ;;		_LCD_sendString
  1249 ;;		___ftmul
  1250 ;;		___fttol
  1251 ;;		___lwtoft
  1252 ;;		_calculaVelocidade
  1253 ;;		_getPosicaoAtual
  1254 ;;		_getVelocidade
  1255 ;;		_int2char_
  1256 ;;		_sendChar_
  1257 ;;		_sendString_
  1258 ;;		_setPosicaoDesejada
  1259 ;;		_setup
  1260 ;; This function is called by:
  1261 ;;		Startup code after reset
  1262 ;; This function uses a non-reentrant model
  1263 ;;
  1264                           
  1265                           
  1266                           ;psect for function _main
  1267  0652                     _main:	
  1268                           
  1269                           ;main.c: 92: setup();
  1270                           
  1271                           ;incstack = 0
  1272                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1273  0652  120A  158A  227D  120A  118A  	fcall	_setup
  1274  0657                     l2445:	
  1275                           ;main.c: 94: while(1){
  1276                           
  1277                           
  1278                           ;main.c: 96: if(PORTDbits.RD4==1)
  1279  0657  1283               	bcf	3,5	;RP0=0, select bank0
  1280  0658  1303               	bcf	3,6	;RP1=0, select bank0
  1281  0659  1E08               	btfss	8,4	;volatile
  1282  065A  2E65               	goto	l2449
  1283                           
  1284                           ;main.c: 97: setPosicaoDesejada(0);
  1285  065B  3000               	movlw	0
  1286  065C  1683               	bsf	3,5	;RP0=1, select bank1
  1287  065D  1303               	bcf	3,6	;RP1=0, select bank1
  1288  065E  00CA               	movwf	setPosicaoDesejada@posicao_desejada^(0+128)
  1289  065F  00CB               	movwf	(setPosicaoDesejada@posicao_desejada+1)^(0+128)
  1290  0660  120A  158A  22D4  120A  118A  	fcall	_setPosicaoDesejada
  1291  0665                     l2449:	
  1292                           
  1293                           ;main.c: 98: if(PORTDbits.RD5==1)
  1294  0665  1283               	bcf	3,5	;RP0=0, select bank0
  1295  0666  1303               	bcf	3,6	;RP1=0, select bank0
  1296  0667  1E88               	btfss	8,5	;volatile
  1297  0668  2E74               	goto	l2453
  1298                           
  1299                           ;main.c: 99: setPosicaoDesejada(90);
  1300  0669  305A               	movlw	90
  1301  066A  1683               	bsf	3,5	;RP0=1, select bank1
  1302  066B  1303               	bcf	3,6	;RP1=0, select bank1
  1303  066C  00CA               	movwf	setPosicaoDesejada@posicao_desejada^(0+128)
  1304  066D  3000               	movlw	0
  1305  066E  00CB               	movwf	(setPosicaoDesejada@posicao_desejada^(0+128)+1)
  1306  066F  120A  158A  22D4  120A  118A  	fcall	_setPosicaoDesejada
  1307  0674                     l2453:	
  1308                           
  1309                           ;main.c: 100: if(PORTDbits.RD6==1)
  1310  0674  1283               	bcf	3,5	;RP0=0, select bank0
  1311  0675  1303               	bcf	3,6	;RP1=0, select bank0
  1312  0676  1F08               	btfss	8,6	;volatile
  1313  0677  2E83               	goto	l174
  1314                           
  1315                           ;main.c: 101: setPosicaoDesejada(180);
  1316  0678  30B4               	movlw	180
  1317  0679  1683               	bsf	3,5	;RP0=1, select bank1
  1318  067A  1303               	bcf	3,6	;RP1=0, select bank1
  1319  067B  00CA               	movwf	setPosicaoDesejada@posicao_desejada^(0+128)
  1320  067C  3000               	movlw	0
  1321  067D  00CB               	movwf	(setPosicaoDesejada@posicao_desejada^(0+128)+1)
  1322  067E  120A  158A  22D4  120A  118A  	fcall	_setPosicaoDesejada
  1323  0683                     l174:	
  1324                           
  1325                           ;main.c: 103: calculaVelocidade();
  1326  0683  120A  158A  23E1  120A  118A  	fcall	_calculaVelocidade
  1327                           
  1328                           ;main.c: 105: LCD_sendString("PF:", 1, 1);
  1329  0688  302D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1330  0689  1683               	bsf	3,5	;RP0=1, select bank1
  1331  068A  1303               	bcf	3,6	;RP1=0, select bank1
  1332  068B  00B9               	movwf	LCD_sendString@string^(0+128)
  1333  068C  3080               	movlw	128
  1334  068D  00BA               	movwf	(LCD_sendString@string+1)^(0+128)
  1335  068E  01BB               	clrf	LCD_sendString@linha^(0+128)
  1336  068F  0ABB               	incf	LCD_sendString@linha^(0+128),f
  1337  0690  01BC               	clrf	LCD_sendString@coluna^(0+128)
  1338  0691  0ABC               	incf	LCD_sendString@coluna^(0+128),f
  1339  0692  120A  158A  26F9  120A  118A  	fcall	_LCD_sendString
  1340                           
  1341                           ;main.c: 106: int2char_(setpoint*(5.625/32));
  1342  0697  1683               	bsf	3,5	;RP0=1, select bank1
  1343  0698  1303               	bcf	3,6	;RP1=0, select bank1
  1344  0699  0862               	movf	(_setpoint+1)^(0+128),w
  1345  069A  00A9               	movwf	(___lwtoft@c+1)^(0+128)
  1346  069B  0861               	movf	_setpoint^(0+128),w
  1347  069C  00A8               	movwf	___lwtoft@c^(0+128)
  1348  069D  120A  158A  2228  120A  118A  	fcall	___lwtoft
  1349  06A2  1683               	bsf	3,5	;RP0=1, select bank1
  1350  06A3  1303               	bcf	3,6	;RP1=0, select bank1
  1351  06A4  0828               	movf	?___lwtoft^(0+128),w
  1352  06A5  00AF               	movwf	___ftmul@f2^(0+128)
  1353  06A6  0829               	movf	(?___lwtoft+1)^(0+128),w
  1354  06A7  00B0               	movwf	(___ftmul@f2+1)^(0+128)
  1355  06A8  082A               	movf	(?___lwtoft+2)^(0+128),w
  1356  06A9  00B1               	movwf	(___ftmul@f2+2)^(0+128)
  1357  06AA  3000               	movlw	0
  1358  06AB  00AC               	movwf	___ftmul@f1^(0+128)
  1359  06AC  3034               	movlw	52
  1360  06AD  00AD               	movwf	(___ftmul@f1+1)^(0+128)
  1361  06AE  303E               	movlw	62
  1362  06AF  00AE               	movwf	(___ftmul@f1+2)^(0+128)
  1363  06B0  120A  118A  2353  120A  118A  	fcall	___ftmul
  1364  06B5  1683               	bsf	3,5	;RP0=1, select bank1
  1365  06B6  1303               	bcf	3,6	;RP1=0, select bank1
  1366  06B7  082C               	movf	?___ftmul^(0+128),w
  1367  06B8  00BC               	movwf	___fttol@f1^(0+128)
  1368  06B9  082D               	movf	(?___ftmul+1)^(0+128),w
  1369  06BA  00BD               	movwf	(___fttol@f1+1)^(0+128)
  1370  06BB  082E               	movf	(?___ftmul+2)^(0+128),w
  1371  06BC  00BE               	movwf	(___fttol@f1+2)^(0+128)
  1372  06BD  120A  118A  2038  120A  118A  	fcall	___fttol
  1373  06C2  1683               	bsf	3,5	;RP0=1, select bank1
  1374  06C3  1303               	bcf	3,6	;RP1=0, select bank1
  1375  06C4  083D               	movf	(?___fttol+1)^(0+128),w
  1376  06C5  00CD               	movwf	(int2char_@int_value_+1)^(0+128)
  1377  06C6  083C               	movf	?___fttol^(0+128),w
  1378  06C7  00CC               	movwf	int2char_@int_value_^(0+128)
  1379  06C8  120A  118A  20C6  120A  118A  	fcall	_int2char_
  1380                           
  1381                           ;main.c: 107: LCD_sendString(c_int_value_, 1, 4);
  1382  06CD  30E3               	movlw	(low (_c_int_value_| 0))& (0+255)
  1383  06CE  1683               	bsf	3,5	;RP0=1, select bank1
  1384  06CF  1303               	bcf	3,6	;RP1=0, select bank1
  1385  06D0  00B9               	movwf	LCD_sendString@string^(0+128)
  1386  06D1  3000               	movlw	0
  1387  06D2  00BA               	movwf	(LCD_sendString@string+1)^(0+128)
  1388  06D3  01BB               	clrf	LCD_sendString@linha^(0+128)
  1389  06D4  0ABB               	incf	LCD_sendString@linha^(0+128),f
  1390  06D5  3004               	movlw	4
  1391  06D6  00D8               	movwf	??_main^(0+128)
  1392  06D7  0858               	movf	??_main^(0+128),w
  1393  06D8  00BC               	movwf	LCD_sendString@coluna^(0+128)
  1394  06D9  120A  158A  26F9  120A  118A  	fcall	_LCD_sendString
  1395                           
  1396                           ;main.c: 108: LCD_sendString("PA:", 1, 9);
  1397  06DE  3029               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1398  06DF  1683               	bsf	3,5	;RP0=1, select bank1
  1399  06E0  1303               	bcf	3,6	;RP1=0, select bank1
  1400  06E1  00B9               	movwf	LCD_sendString@string^(0+128)
  1401  06E2  3080               	movlw	128
  1402  06E3  00BA               	movwf	(LCD_sendString@string+1)^(0+128)
  1403  06E4  01BB               	clrf	LCD_sendString@linha^(0+128)
  1404  06E5  0ABB               	incf	LCD_sendString@linha^(0+128),f
  1405  06E6  3009               	movlw	9
  1406  06E7  00D8               	movwf	??_main^(0+128)
  1407  06E8  0858               	movf	??_main^(0+128),w
  1408  06E9  00BC               	movwf	LCD_sendString@coluna^(0+128)
  1409  06EA  120A  158A  26F9  120A  118A  	fcall	_LCD_sendString
  1410                           
  1411                           ;main.c: 109: int2char_(getPosicaoAtual());
  1412  06EF  120A  158A  22A4  120A  118A  	fcall	_getPosicaoAtual
  1413  06F4  1683               	bsf	3,5	;RP0=1, select bank1
  1414  06F5  1303               	bcf	3,6	;RP1=0, select bank1
  1415  06F6  084B               	movf	(?_getPosicaoAtual+1)^(0+128),w
  1416  06F7  00CD               	movwf	(int2char_@int_value_+1)^(0+128)
  1417  06F8  084A               	movf	?_getPosicaoAtual^(0+128),w
  1418  06F9  00CC               	movwf	int2char_@int_value_^(0+128)
  1419  06FA  120A  118A  20C6  120A  118A  	fcall	_int2char_
  1420                           
  1421                           ;main.c: 110: LCD_sendString(c_int_value_, 1,12);
  1422  06FF  30E3               	movlw	(low (_c_int_value_| 0))& (0+255)
  1423  0700  1683               	bsf	3,5	;RP0=1, select bank1
  1424  0701  1303               	bcf	3,6	;RP1=0, select bank1
  1425  0702  00B9               	movwf	LCD_sendString@string^(0+128)
  1426  0703  3000               	movlw	0
  1427  0704  00BA               	movwf	(LCD_sendString@string+1)^(0+128)
  1428  0705  01BB               	clrf	LCD_sendString@linha^(0+128)
  1429  0706  0ABB               	incf	LCD_sendString@linha^(0+128),f
  1430  0707  300C               	movlw	12
  1431  0708  00D8               	movwf	??_main^(0+128)
  1432  0709  0858               	movf	??_main^(0+128),w
  1433  070A  00BC               	movwf	LCD_sendString@coluna^(0+128)
  1434  070B  120A  158A  26F9  120A  118A  	fcall	_LCD_sendString
  1435                           
  1436                           ;main.c: 111: LCD_sendString("Vel:", 2, 6);
  1437  0710  3024               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1438  0711  1683               	bsf	3,5	;RP0=1, select bank1
  1439  0712  1303               	bcf	3,6	;RP1=0, select bank1
  1440  0713  00B9               	movwf	LCD_sendString@string^(0+128)
  1441  0714  3080               	movlw	128
  1442  0715  00BA               	movwf	(LCD_sendString@string+1)^(0+128)
  1443  0716  3002               	movlw	2
  1444  0717  00D8               	movwf	??_main^(0+128)
  1445  0718  0858               	movf	??_main^(0+128),w
  1446  0719  00BB               	movwf	LCD_sendString@linha^(0+128)
  1447  071A  3006               	movlw	6
  1448  071B  00D9               	movwf	(??_main+1)^(0+128)
  1449  071C  0859               	movf	(??_main+1)^(0+128),w
  1450  071D  00BC               	movwf	LCD_sendString@coluna^(0+128)
  1451  071E  120A  158A  26F9  120A  118A  	fcall	_LCD_sendString
  1452                           
  1453                           ;main.c: 112: int2char_(getVelocidade());
  1454  0723  120A  158A  21C0  120A  118A  	fcall	_getVelocidade
  1455  0728  1683               	bsf	3,5	;RP0=1, select bank1
  1456  0729  1303               	bcf	3,6	;RP1=0, select bank1
  1457  072A  0821               	movf	(?_getVelocidade+1)^(0+128),w
  1458  072B  00CD               	movwf	(int2char_@int_value_+1)^(0+128)
  1459  072C  0820               	movf	?_getVelocidade^(0+128),w
  1460  072D  00CC               	movwf	int2char_@int_value_^(0+128)
  1461  072E  120A  118A  20C6  120A  118A  	fcall	_int2char_
  1462                           
  1463                           ;main.c: 113: LCD_sendString(c_int_value_,2,10);
  1464  0733  30E3               	movlw	(low (_c_int_value_| 0))& (0+255)
  1465  0734  1683               	bsf	3,5	;RP0=1, select bank1
  1466  0735  1303               	bcf	3,6	;RP1=0, select bank1
  1467  0736  00B9               	movwf	LCD_sendString@string^(0+128)
  1468  0737  3000               	movlw	0
  1469  0738  00BA               	movwf	(LCD_sendString@string+1)^(0+128)
  1470  0739  3002               	movlw	2
  1471  073A  00D8               	movwf	??_main^(0+128)
  1472  073B  0858               	movf	??_main^(0+128),w
  1473  073C  00BB               	movwf	LCD_sendString@linha^(0+128)
  1474  073D  300A               	movlw	10
  1475  073E  00D9               	movwf	(??_main+1)^(0+128)
  1476  073F  0859               	movf	(??_main+1)^(0+128),w
  1477  0740  00BC               	movwf	LCD_sendString@coluna^(0+128)
  1478  0741  120A  158A  26F9  120A  118A  	fcall	_LCD_sendString
  1479                           
  1480                           ;main.c: 115: _delay((unsigned long)((200)*(4000000/4000.0)));
  1481  0746  3002               	movlw	2
  1482  0747  1683               	bsf	3,5	;RP0=1, select bank1
  1483  0748  1303               	bcf	3,6	;RP1=0, select bank1
  1484  0749  00DA               	movwf	(??_main^(0+128)+2)
  1485  074A  3004               	movlw	4
  1486  074B  00D9               	movwf	(??_main^(0+128)+1)
  1487  074C  30B9               	movlw	185
  1488  074D  00D8               	movwf	??_main^(0+128)
  1489  074E                     u3157:	
  1490  074E  0BD8               	decfsz	??_main^(0+128),f
  1491  074F  2F4E               	goto	u3157
  1492  0750  0BD9               	decfsz	(??_main^(0+128)+1),f
  1493  0751  2F4E               	goto	u3157
  1494  0752  0BDA               	decfsz	(??_main^(0+128)+2),f
  1495  0753  2F4E               	goto	u3157
  1496  0754  2F55               	nop2
  1497                           
  1498                           ;main.c: 117: int2char_(getPosicaoAtual());
  1499  0755  120A  158A  22A4  120A  118A  	fcall	_getPosicaoAtual
  1500  075A  1683               	bsf	3,5	;RP0=1, select bank1
  1501  075B  1303               	bcf	3,6	;RP1=0, select bank1
  1502  075C  084B               	movf	(?_getPosicaoAtual+1)^(0+128),w
  1503  075D  00CD               	movwf	(int2char_@int_value_+1)^(0+128)
  1504  075E  084A               	movf	?_getPosicaoAtual^(0+128),w
  1505  075F  00CC               	movwf	int2char_@int_value_^(0+128)
  1506  0760  120A  118A  20C6  120A  118A  	fcall	_int2char_
  1507                           
  1508                           ;main.c: 118: sendString_("Posicao atual: ");
  1509  0765  3014               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1510  0766  1683               	bsf	3,5	;RP0=1, select bank1
  1511  0767  1303               	bcf	3,6	;RP1=0, select bank1
  1512  0768  00A0               	movwf	sendString_@dado^(0+128)
  1513  0769  3080               	movlw	128
  1514  076A  00A1               	movwf	(sendString_@dado+1)^(0+128)
  1515  076B  120A  158A  236A  120A  118A  	fcall	_sendString_
  1516                           
  1517                           ;main.c: 119: sendString_(c_int_value_);
  1518  0770  30E3               	movlw	(low (_c_int_value_| 0))& (0+255)
  1519  0771  1683               	bsf	3,5	;RP0=1, select bank1
  1520  0772  1303               	bcf	3,6	;RP1=0, select bank1
  1521  0773  00A0               	movwf	sendString_@dado^(0+128)
  1522  0774  3000               	movlw	0
  1523  0775  00A1               	movwf	(sendString_@dado+1)^(0+128)
  1524  0776  120A  158A  236A  120A  118A  	fcall	_sendString_
  1525                           
  1526                           ;main.c: 121: sendChar_('\r');
  1527  077B  300D               	movlw	13
  1528  077C  120A  158A  21D6  120A  118A  	fcall	_sendChar_
  1529                           
  1530                           ;main.c: 122: sendChar_('\n');
  1531  0781  300A               	movlw	10
  1532  0782  120A  158A  21D6  120A  118A  	fcall	_sendChar_
  1533                           
  1534                           ;main.c: 124: int2char_(setpoint*(5.625/32));
  1535  0787  1683               	bsf	3,5	;RP0=1, select bank1
  1536  0788  1303               	bcf	3,6	;RP1=0, select bank1
  1537  0789  0862               	movf	(_setpoint+1)^(0+128),w
  1538  078A  00A9               	movwf	(___lwtoft@c+1)^(0+128)
  1539  078B  0861               	movf	_setpoint^(0+128),w
  1540  078C  00A8               	movwf	___lwtoft@c^(0+128)
  1541  078D  120A  158A  2228  120A  118A  	fcall	___lwtoft
  1542  0792  1683               	bsf	3,5	;RP0=1, select bank1
  1543  0793  1303               	bcf	3,6	;RP1=0, select bank1
  1544  0794  0828               	movf	?___lwtoft^(0+128),w
  1545  0795  00AF               	movwf	___ftmul@f2^(0+128)
  1546  0796  0829               	movf	(?___lwtoft+1)^(0+128),w
  1547  0797  00B0               	movwf	(___ftmul@f2+1)^(0+128)
  1548  0798  082A               	movf	(?___lwtoft+2)^(0+128),w
  1549  0799  00B1               	movwf	(___ftmul@f2+2)^(0+128)
  1550  079A  3000               	movlw	0
  1551  079B  00AC               	movwf	___ftmul@f1^(0+128)
  1552  079C  3034               	movlw	52
  1553  079D  00AD               	movwf	(___ftmul@f1+1)^(0+128)
  1554  079E  303E               	movlw	62
  1555  079F  00AE               	movwf	(___ftmul@f1+2)^(0+128)
  1556  07A0  120A  118A  2353  120A  118A  	fcall	___ftmul
  1557  07A5  1683               	bsf	3,5	;RP0=1, select bank1
  1558  07A6  1303               	bcf	3,6	;RP1=0, select bank1
  1559  07A7  082C               	movf	?___ftmul^(0+128),w
  1560  07A8  00BC               	movwf	___fttol@f1^(0+128)
  1561  07A9  082D               	movf	(?___ftmul+1)^(0+128),w
  1562  07AA  00BD               	movwf	(___fttol@f1+1)^(0+128)
  1563  07AB  082E               	movf	(?___ftmul+2)^(0+128),w
  1564  07AC  00BE               	movwf	(___fttol@f1+2)^(0+128)
  1565  07AD  120A  118A  2038  120A  118A  	fcall	___fttol
  1566  07B2  1683               	bsf	3,5	;RP0=1, select bank1
  1567  07B3  1303               	bcf	3,6	;RP1=0, select bank1
  1568  07B4  083D               	movf	(?___fttol+1)^(0+128),w
  1569  07B5  00CD               	movwf	(int2char_@int_value_+1)^(0+128)
  1570  07B6  083C               	movf	?___fttol^(0+128),w
  1571  07B7  00CC               	movwf	int2char_@int_value_^(0+128)
  1572  07B8  120A  118A  20C6  120A  118A  	fcall	_int2char_
  1573                           
  1574                           ;main.c: 125: sendString_("Posicao desejada: ");
  1575  07BD  3001               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1576  07BE  1683               	bsf	3,5	;RP0=1, select bank1
  1577  07BF  1303               	bcf	3,6	;RP1=0, select bank1
  1578  07C0  00A0               	movwf	sendString_@dado^(0+128)
  1579  07C1  3080               	movlw	128
  1580  07C2  00A1               	movwf	(sendString_@dado+1)^(0+128)
  1581  07C3  120A  158A  236A  120A  118A  	fcall	_sendString_
  1582                           
  1583                           ;main.c: 126: sendString_(c_int_value_);
  1584  07C8  30E3               	movlw	(low (_c_int_value_| 0))& (0+255)
  1585  07C9  1683               	bsf	3,5	;RP0=1, select bank1
  1586  07CA  1303               	bcf	3,6	;RP1=0, select bank1
  1587  07CB  00A0               	movwf	sendString_@dado^(0+128)
  1588  07CC  3000               	movlw	0
  1589  07CD  00A1               	movwf	(sendString_@dado+1)^(0+128)
  1590  07CE  120A  158A  236A  120A  118A  	fcall	_sendString_
  1591                           
  1592                           ;main.c: 128: sendChar_('\r');
  1593  07D3  300D               	movlw	13
  1594  07D4  120A  158A  21D6  120A  118A  	fcall	_sendChar_
  1595                           
  1596                           ;main.c: 129: sendChar_('\n');
  1597  07D9  300A               	movlw	10
  1598  07DA  120A  158A  21D6  120A  118A  	fcall	_sendChar_
  1599  07DF  2E57               	goto	l2445
  1600  07E0                     __end_of_main:	
  1601                           
  1602                           	psect	text1
  1603  0A7D                     __ptext1:	
  1604 ;; *************** function _setup *****************
  1605 ;; Defined at:
  1606 ;;		line 76 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\main.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;		None
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;		None
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  1    wreg      void 
  1613 ;; Registers used:
  1614 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1620 ;;      Params:         0       0       0       0       0
  1621 ;;      Locals:         0       0       0       0       0
  1622 ;;      Temps:          0       0       0       0       0
  1623 ;;      Totals:         0       0       0       0       0
  1624 ;;Total ram usage:        0 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    7
  1627 ;; This function calls:
  1628 ;;		_LCD_Setup
  1629 ;;		_setPosicaoAtual
  1630 ;;		_setupSerial
  1631 ;;		_setupStepper
  1632 ;; This function is called by:
  1633 ;;		_main
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637                           
  1638                           ;psect for function _setup
  1639  0A7D                     _setup:	
  1640                           
  1641                           ;main.c: 78: PORTB = 0x00;
  1642                           
  1643                           ;incstack = 0
  1644                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1645  0A7D  1283               	bcf	3,5	;RP0=0, select bank0
  1646  0A7E  1303               	bcf	3,6	;RP1=0, select bank0
  1647  0A7F  0186               	clrf	6	;volatile
  1648                           
  1649                           ;main.c: 79: TRISB = 0x00;
  1650  0A80  1683               	bsf	3,5	;RP0=1, select bank1
  1651  0A81  1303               	bcf	3,6	;RP1=0, select bank1
  1652  0A82  0186               	clrf	6	;volatile
  1653                           
  1654                           ;main.c: 80: ANSELH = 0x00;
  1655  0A83  1683               	bsf	3,5	;RP0=1, select bank3
  1656  0A84  1703               	bsf	3,6	;RP1=1, select bank3
  1657  0A85  0189               	clrf	9	;volatile
  1658                           
  1659                           ;main.c: 81: LCD_Setup();
  1660  0A86  120A  158A  25BD  120A  158A  	fcall	_LCD_Setup
  1661                           
  1662                           ;main.c: 83: setupSerial(10417);
  1663  0A8B  30B1               	movlw	177
  1664  0A8C  1683               	bsf	3,5	;RP0=1, select bank1
  1665  0A8D  1303               	bcf	3,6	;RP1=0, select bank1
  1666  0A8E  00AF               	movwf	setupSerial@baudrate^(0+128)
  1667  0A8F  3028               	movlw	40
  1668  0A90  00B0               	movwf	(setupSerial@baudrate^(0+128)+1)
  1669  0A91  120A  158A  246B  120A  158A  	fcall	_setupSerial
  1670                           
  1671                           ;main.c: 85: setupStepper();
  1672  0A96  120A  158A  2212  120A  158A  	fcall	_setupStepper
  1673                           
  1674                           ;main.c: 86: setPosicaoAtual(0);
  1675  0A9B  3000               	movlw	0
  1676  0A9C  1683               	bsf	3,5	;RP0=1, select bank1
  1677  0A9D  1303               	bcf	3,6	;RP1=0, select bank1
  1678  0A9E  00CA               	movwf	setPosicaoAtual@posicao_atual^(0+128)
  1679  0A9F  00CB               	movwf	(setPosicaoAtual@posicao_atual+1)^(0+128)
  1680  0AA0  120A  158A  2304   	fcall	_setPosicaoAtual
  1681  0AA3  0008               	return
  1682  0AA4                     __end_of_setup:	
  1683                           
  1684                           	psect	text2
  1685  0A12                     __ptext2:	
  1686 ;; *************** function _setupStepper *****************
  1687 ;; Defined at:
  1688 ;;		line 6 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\stepper.c"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;		None
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;		None
  1693 ;; Return value:  Size  Location     Type
  1694 ;;                  1    wreg      void 
  1695 ;; Registers used:
  1696 ;;		wreg, status,2
  1697 ;; Tracked objects:
  1698 ;;		On entry : 0/0
  1699 ;;		On exit  : 0/0
  1700 ;;		Unchanged: 0/0
  1701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1702 ;;      Params:         0       0       0       0       0
  1703 ;;      Locals:         0       0       0       0       0
  1704 ;;      Temps:          0       0       0       0       0
  1705 ;;      Totals:         0       0       0       0       0
  1706 ;;Total ram usage:        0 bytes
  1707 ;; Hardware stack levels used:    1
  1708 ;; Hardware stack levels required when called:    4
  1709 ;; This function calls:
  1710 ;;		Nothing
  1711 ;; This function is called by:
  1712 ;;		_setup
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715                           
  1716                           
  1717                           ;psect for function _setupStepper
  1718  0A12                     _setupStepper:	
  1719                           
  1720                           ;stepper.c: 8: TRISD = 0b11110000;
  1721                           
  1722                           ;incstack = 0
  1723                           ; Regs used in _setupStepper: [wreg+status,2]
  1724  0A12  30F0               	movlw	240
  1725  0A13  1683               	bsf	3,5	;RP0=1, select bank1
  1726  0A14  1303               	bcf	3,6	;RP1=0, select bank1
  1727  0A15  0088               	movwf	8	;volatile
  1728                           
  1729                           ;stepper.c: 9: PORTD = 0;
  1730  0A16  1283               	bcf	3,5	;RP0=0, select bank0
  1731  0A17  1303               	bcf	3,6	;RP1=0, select bank0
  1732  0A18  0188               	clrf	8	;volatile
  1733                           
  1734                           ;stepper.c: 11: INTCONbits.GIE = 1;
  1735  0A19  178B               	bsf	11,7	;volatile
  1736                           
  1737                           ;stepper.c: 12: INTCONbits.PEIE = 1;
  1738  0A1A  170B               	bsf	11,6	;volatile
  1739                           
  1740                           ;stepper.c: 14: PIE1bits.TMR2IE = 1;
  1741  0A1B  1683               	bsf	3,5	;RP0=1, select bank1
  1742  0A1C  1303               	bcf	3,6	;RP1=0, select bank1
  1743  0A1D  148C               	bsf	12,1	;volatile
  1744                           
  1745                           ;stepper.c: 15: PIR1bits.TMR2IF = 0;
  1746  0A1E  1283               	bcf	3,5	;RP0=0, select bank0
  1747  0A1F  1303               	bcf	3,6	;RP1=0, select bank0
  1748  0A20  108C               	bcf	12,1	;volatile
  1749                           
  1750                           ;stepper.c: 16: T2CON = 0b01111110;
  1751  0A21  307E               	movlw	126
  1752  0A22  0092               	movwf	18	;volatile
  1753                           
  1754                           ;stepper.c: 17: PR2=255;
  1755  0A23  30FF               	movlw	255
  1756  0A24  1683               	bsf	3,5	;RP0=1, select bank1
  1757  0A25  1303               	bcf	3,6	;RP1=0, select bank1
  1758  0A26  0092               	movwf	18	;volatile
  1759  0A27  0008               	return
  1760  0A28                     __end_of_setupStepper:	
  1761                           
  1762                           	psect	text3
  1763  0C6B                     __ptext3:	
  1764 ;; *************** function _setupSerial *****************
  1765 ;; Defined at:
  1766 ;;		line 9 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\serial.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;  baudrate        2   15[BANK1 ] unsigned int 
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;		None
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  1    wreg      void 
  1773 ;; Registers used:
  1774 ;;		wreg, status,2, status,0, pclath, cstack
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1780 ;;      Params:         0       0       2       0       0
  1781 ;;      Locals:         0       0       4       0       0
  1782 ;;      Temps:          0       0       0       0       0
  1783 ;;      Totals:         0       0       6       0       0
  1784 ;;Total ram usage:        6 bytes
  1785 ;; Hardware stack levels used:    1
  1786 ;; Hardware stack levels required when called:    5
  1787 ;; This function calls:
  1788 ;;		___aldiv
  1789 ;; This function is called by:
  1790 ;;		_setup
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794                           
  1795                           ;psect for function _setupSerial
  1796  0C6B                     _setupSerial:	
  1797                           
  1798                           ;serial.c: 11: TRISCbits.TRISC6 = 0;
  1799                           
  1800                           ;incstack = 0
  1801                           ; Regs used in _setupSerial: [wreg+status,2+status,0+pclath+cstack]
  1802  0C6B  1683               	bsf	3,5	;RP0=1, select bank1
  1803  0C6C  1303               	bcf	3,6	;RP1=0, select bank1
  1804  0C6D  1307               	bcf	7,6	;volatile
  1805                           
  1806                           ;serial.c: 12: TRISCbits.TRISC7 = 1;
  1807  0C6E  1787               	bsf	7,7	;volatile
  1808                           
  1809                           ;serial.c: 13: TXSTA = 0b00100010;
  1810  0C6F  3022               	movlw	34
  1811  0C70  0098               	movwf	24	;volatile
  1812                           
  1813                           ;serial.c: 14: RCSTA = 0b10010000;
  1814  0C71  3090               	movlw	144
  1815  0C72  1283               	bcf	3,5	;RP0=0, select bank0
  1816  0C73  1303               	bcf	3,6	;RP1=0, select bank0
  1817  0C74  0098               	movwf	24	;volatile
  1818                           
  1819                           ;serial.c: 15: SPBRG = (4000000/baudrate)/64;
  1820  0C75  1683               	bsf	3,5	;RP0=1, select bank1
  1821  0C76  1303               	bcf	3,6	;RP1=0, select bank1
  1822  0C77  082F               	movf	setupSerial@baudrate^(0+128),w
  1823  0C78  00A0               	movwf	___aldiv@divisor^(0+128)
  1824  0C79  0830               	movf	(setupSerial@baudrate+1)^(0+128),w
  1825  0C7A  00A1               	movwf	(___aldiv@divisor^(0+128)+1)
  1826  0C7B  01A2               	clrf	(___aldiv@divisor^(0+128)+2)
  1827  0C7C  01A3               	clrf	(___aldiv@divisor^(0+128)+3)
  1828  0C7D  3000               	movlw	0
  1829  0C7E  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  1830  0C7F  303D               	movlw	61
  1831  0C80  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  1832  0C81  3009               	movlw	9
  1833  0C82  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  1834  0C83  3000               	movlw	0
  1835  0C84  00A4               	movwf	___aldiv@dividend^(0+128)
  1836  0C85  120A  118A  2154  120A  158A  	fcall	___aldiv
  1837  0C8A  1683               	bsf	3,5	;RP0=1, select bank1
  1838  0C8B  1303               	bcf	3,6	;RP1=0, select bank1
  1839  0C8C  0823               	movf	(?___aldiv+3)^(0+128),w
  1840  0C8D  00B4               	movwf	(_setupSerial$992+3)^(0+128)
  1841  0C8E  0822               	movf	(?___aldiv+2)^(0+128),w
  1842  0C8F  00B3               	movwf	(_setupSerial$992+2)^(0+128)
  1843  0C90  0821               	movf	(?___aldiv+1)^(0+128),w
  1844  0C91  00B2               	movwf	(_setupSerial$992+1)^(0+128)
  1845  0C92  0820               	movf	?___aldiv^(0+128),w
  1846  0C93  00B1               	movwf	_setupSerial$992^(0+128)
  1847                           
  1848                           ;serial.c: 15: SPBRG = (4000000/baudrate)/64;
  1849  0C94  3000               	movlw	0
  1850  0C95  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  1851  0C96  3000               	movlw	0
  1852  0C97  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  1853  0C98  3000               	movlw	0
  1854  0C99  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  1855  0C9A  3040               	movlw	64
  1856  0C9B  00A0               	movwf	___aldiv@divisor^(0+128)
  1857  0C9C  0834               	movf	(_setupSerial$992+3)^(0+128),w
  1858  0C9D  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  1859  0C9E  0833               	movf	(_setupSerial$992+2)^(0+128),w
  1860  0C9F  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  1861  0CA0  0832               	movf	(_setupSerial$992+1)^(0+128),w
  1862  0CA1  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  1863  0CA2  0831               	movf	_setupSerial$992^(0+128),w
  1864  0CA3  00A4               	movwf	___aldiv@dividend^(0+128)
  1865  0CA4  120A  118A  2154   	fcall	___aldiv
  1866  0CA7  1683               	bsf	3,5	;RP0=1, select bank1
  1867  0CA8  1303               	bcf	3,6	;RP1=0, select bank1
  1868  0CA9  0820               	movf	?___aldiv^(0+128),w
  1869  0CAA  0099               	movwf	25	;volatile
  1870                           
  1871                           ;serial.c: 16: BAUDCTLbits.BRG16 = 0;
  1872  0CAB  1683               	bsf	3,5	;RP0=1, select bank3
  1873  0CAC  1703               	bsf	3,6	;RP1=1, select bank3
  1874  0CAD  1187               	bcf	7,3	;volatile
  1875                           
  1876                           ;serial.c: 17: RCSTAbits.SPEN = 1;
  1877  0CAE  1283               	bcf	3,5	;RP0=0, select bank0
  1878  0CAF  1303               	bcf	3,6	;RP1=0, select bank0
  1879  0CB0  1798               	bsf	24,7	;volatile
  1880                           
  1881                           ;serial.c: 18: RCSTAbits.CREN = 1;
  1882  0CB1  1618               	bsf	24,4	;volatile
  1883                           
  1884                           ;serial.c: 19: PIR1bits.RCIF=0;
  1885  0CB2  128C               	bcf	12,5	;volatile
  1886                           
  1887                           ;serial.c: 20: PIE1bits.RCIE=1;
  1888  0CB3  1683               	bsf	3,5	;RP0=1, select bank1
  1889  0CB4  1303               	bcf	3,6	;RP1=0, select bank1
  1890  0CB5  168C               	bsf	12,5	;volatile
  1891                           
  1892                           ;serial.c: 21: INTCONbits.PEIE=1;
  1893  0CB6  170B               	bsf	11,6	;volatile
  1894                           
  1895                           ;serial.c: 22: INTCONbits.GIE=1;
  1896  0CB7  178B               	bsf	11,7	;volatile
  1897  0CB8  0008               	return
  1898  0CB9                     __end_of_setupSerial:	
  1899                           
  1900                           	psect	text4
  1901  0154                     __ptext4:	
  1902 ;; *************** function ___aldiv *****************
  1903 ;; Defined at:
  1904 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  1905 ;; Parameters:    Size  Location     Type
  1906 ;;  divisor         4    0[BANK1 ] long 
  1907 ;;  dividend        4    4[BANK1 ] long 
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;  quotient        4   11[BANK1 ] long 
  1910 ;;  sign            1   10[BANK1 ] unsigned char 
  1911 ;;  counter         1    9[BANK1 ] unsigned char 
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  4    0[BANK1 ] long 
  1914 ;; Registers used:
  1915 ;;		wreg, status,2, status,0
  1916 ;; Tracked objects:
  1917 ;;		On entry : 0/0
  1918 ;;		On exit  : 0/0
  1919 ;;		Unchanged: 0/0
  1920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1921 ;;      Params:         0       0       8       0       0
  1922 ;;      Locals:         0       0       6       0       0
  1923 ;;      Temps:          0       0       1       0       0
  1924 ;;      Totals:         0       0      15       0       0
  1925 ;;Total ram usage:       15 bytes
  1926 ;; Hardware stack levels used:    1
  1927 ;; Hardware stack levels required when called:    4
  1928 ;; This function calls:
  1929 ;;		Nothing
  1930 ;; This function is called by:
  1931 ;;		_setupSerial
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           
  1936                           ;psect for function ___aldiv
  1937  0154                     ___aldiv:	
  1938                           
  1939                           ;incstack = 0
  1940                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1941  0154  1683               	bsf	3,5	;RP0=1, select bank1
  1942  0155  1303               	bcf	3,6	;RP1=0, select bank1
  1943  0156  01AA               	clrf	___aldiv@sign^(0+128)
  1944  0157  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  1945  0158  2966               	goto	l478
  1946  0159  09A0               	comf	___aldiv@divisor^(0+128),f
  1947  015A  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  1948  015B  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  1949  015C  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  1950  015D  0AA0               	incf	___aldiv@divisor^(0+128),f
  1951  015E  1903               	skipnz
  1952  015F  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  1953  0160  1903               	skipnz
  1954  0161  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  1955  0162  1903               	skipnz
  1956  0163  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  1957  0164  01AA               	clrf	___aldiv@sign^(0+128)
  1958  0165  0AAA               	incf	___aldiv@sign^(0+128),f
  1959  0166                     l478:	
  1960  0166  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  1961  0167  2977               	goto	l1765
  1962  0168  09A4               	comf	___aldiv@dividend^(0+128),f
  1963  0169  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  1964  016A  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  1965  016B  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  1966  016C  0AA4               	incf	___aldiv@dividend^(0+128),f
  1967  016D  1903               	skipnz
  1968  016E  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  1969  016F  1903               	skipnz
  1970  0170  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  1971  0171  1903               	skipnz
  1972  0172  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  1973  0173  3001               	movlw	1
  1974  0174  00A8               	movwf	??___aldiv^(0+128)
  1975  0175  0828               	movf	??___aldiv^(0+128),w
  1976  0176  06AA               	xorwf	___aldiv@sign^(0+128),f
  1977  0177                     l1765:	
  1978  0177  3000               	movlw	0
  1979  0178  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  1980  0179  3000               	movlw	0
  1981  017A  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  1982  017B  3000               	movlw	0
  1983  017C  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  1984  017D  3000               	movlw	0
  1985  017E  00AB               	movwf	___aldiv@quotient^(0+128)
  1986  017F  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  1987  0180  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  1988  0181  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  1989  0182  0420               	iorwf	___aldiv@divisor^(0+128),w
  1990  0183  1903               	skipnz
  1991  0184  29CC               	goto	l1787
  1992  0185  01A9               	clrf	___aldiv@counter^(0+128)
  1993  0186  0AA9               	incf	___aldiv@counter^(0+128),f
  1994  0187                     l1773:	
  1995  0187  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  1996  0188  2997               	goto	l1775
  1997  0189  3001               	movlw	1
  1998  018A  00A8               	movwf	??___aldiv^(0+128)
  1999  018B                     u1825:	
  2000  018B  1003               	clrc
  2001  018C  0DA0               	rlf	___aldiv@divisor^(0+128),f
  2002  018D  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  2003  018E  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  2004  018F  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  2005  0190  0BA8               	decfsz	??___aldiv^(0+128),f
  2006  0191  298B               	goto	u1825
  2007  0192  3001               	movlw	1
  2008  0193  00A8               	movwf	??___aldiv^(0+128)
  2009  0194  0828               	movf	??___aldiv^(0+128),w
  2010  0195  07A9               	addwf	___aldiv@counter^(0+128),f
  2011  0196  2987               	goto	l1773
  2012  0197                     l1775:	
  2013  0197  3001               	movlw	1
  2014  0198  00A8               	movwf	??___aldiv^(0+128)
  2015  0199                     u1845:	
  2016  0199  1003               	clrc
  2017  019A  0DAB               	rlf	___aldiv@quotient^(0+128),f
  2018  019B  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  2019  019C  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  2020  019D  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  2021  019E  0BA8               	decfsz	??___aldiv^(0+128),f
  2022  019F  2999               	goto	u1845
  2023  01A0  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  2024  01A1  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  2025  01A2  1D03               	skipz
  2026  01A3  29AE               	goto	u1855
  2027  01A4  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  2028  01A5  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  2029  01A6  1D03               	skipz
  2030  01A7  29AE               	goto	u1855
  2031  01A8  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  2032  01A9  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  2033  01AA  1D03               	skipz
  2034  01AB  29AE               	goto	u1855
  2035  01AC  0820               	movf	___aldiv@divisor^(0+128),w
  2036  01AD  0224               	subwf	___aldiv@dividend^(0+128),w
  2037  01AE                     u1855:	
  2038  01AE  1C03               	skipc
  2039  01AF  29BF               	goto	l1783
  2040  01B0  0820               	movf	___aldiv@divisor^(0+128),w
  2041  01B1  02A4               	subwf	___aldiv@dividend^(0+128),f
  2042  01B2  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  2043  01B3  1C03               	skipc
  2044  01B4  0F21               	incfsz	(___aldiv@divisor+1)^(0+128),w
  2045  01B5  02A5               	subwf	(___aldiv@dividend+1)^(0+128),f
  2046  01B6  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  2047  01B7  1C03               	skipc
  2048  01B8  0F22               	incfsz	(___aldiv@divisor+2)^(0+128),w
  2049  01B9  02A6               	subwf	(___aldiv@dividend+2)^(0+128),f
  2050  01BA  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  2051  01BB  1C03               	skipc
  2052  01BC  0F23               	incfsz	(___aldiv@divisor+3)^(0+128),w
  2053  01BD  02A7               	subwf	(___aldiv@dividend+3)^(0+128),f
  2054  01BE  142B               	bsf	___aldiv@quotient^(0+128),0
  2055  01BF                     l1783:	
  2056  01BF  3001               	movlw	1
  2057  01C0                     u1865:	
  2058  01C0  1003               	clrc
  2059  01C1  0CA3               	rrf	(___aldiv@divisor+3)^(0+128),f
  2060  01C2  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  2061  01C3  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  2062  01C4  0CA0               	rrf	___aldiv@divisor^(0+128),f
  2063  01C5  3EFF               	addlw	-1
  2064  01C6  1D03               	skipz
  2065  01C7  29C0               	goto	u1865
  2066  01C8  3001               	movlw	1
  2067  01C9  02A9               	subwf	___aldiv@counter^(0+128),f
  2068  01CA  1D03               	btfss	3,2
  2069  01CB  2997               	goto	l1775
  2070  01CC                     l1787:	
  2071  01CC  082A               	movf	___aldiv@sign^(0+128),w
  2072  01CD  1903               	btfsc	3,2
  2073  01CE  29DA               	goto	l1791
  2074  01CF  09AB               	comf	___aldiv@quotient^(0+128),f
  2075  01D0  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  2076  01D1  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  2077  01D2  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  2078  01D3  0AAB               	incf	___aldiv@quotient^(0+128),f
  2079  01D4  1903               	skipnz
  2080  01D5  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  2081  01D6  1903               	skipnz
  2082  01D7  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  2083  01D8  1903               	skipnz
  2084  01D9  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  2085  01DA                     l1791:	
  2086  01DA  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  2087  01DB  00A3               	movwf	(?___aldiv+3)^(0+128)
  2088  01DC  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  2089  01DD  00A2               	movwf	(?___aldiv+2)^(0+128)
  2090  01DE  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  2091  01DF  00A1               	movwf	(?___aldiv+1)^(0+128)
  2092  01E0  082B               	movf	___aldiv@quotient^(0+128),w
  2093  01E1  00A0               	movwf	?___aldiv^(0+128)
  2094  01E2  0008               	return
  2095  01E3                     __end_of___aldiv:	
  2096                           
  2097                           	psect	text5
  2098  0B04                     __ptext5:	
  2099 ;; *************** function _setPosicaoAtual *****************
  2100 ;; Defined at:
  2101 ;;		line 20 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\stepper.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;  posicao_atua    2   42[BANK1 ] unsigned int 
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;		None
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  1    wreg      void 
  2108 ;; Registers used:
  2109 ;;		wreg, status,2, status,0, pclath, cstack
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2115 ;;      Params:         0       0       2       0       0
  2116 ;;      Locals:         0       0       0       0       0
  2117 ;;      Temps:          0       0       0       0       0
  2118 ;;      Totals:         0       0       2       0       0
  2119 ;;Total ram usage:        2 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    6
  2122 ;; This function calls:
  2123 ;;		___ftdiv
  2124 ;;		___fttol
  2125 ;;		___lwtoft
  2126 ;; This function is called by:
  2127 ;;		_setup
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           
  2132                           ;psect for function _setPosicaoAtual
  2133  0B04                     _setPosicaoAtual:	
  2134                           
  2135                           ;stepper.c: 21: position = posicao_atual/(5.625/32);
  2136                           
  2137                           ;incstack = 0
  2138                           ; Regs used in _setPosicaoAtual: [wreg+status,2+status,0+pclath+cstack]
  2139  0B04  1683               	bsf	3,5	;RP0=1, select bank1
  2140  0B05  1303               	bcf	3,6	;RP1=0, select bank1
  2141  0B06  084B               	movf	(setPosicaoAtual@posicao_atual+1)^(0+128),w
  2142  0B07  00A9               	movwf	(___lwtoft@c+1)^(0+128)
  2143  0B08  084A               	movf	setPosicaoAtual@posicao_atual^(0+128),w
  2144  0B09  00A8               	movwf	___lwtoft@c^(0+128)
  2145  0B0A  120A  158A  2228  120A  158A  	fcall	___lwtoft
  2146  0B0F  1683               	bsf	3,5	;RP0=1, select bank1
  2147  0B10  1303               	bcf	3,6	;RP1=0, select bank1
  2148  0B11  0828               	movf	?___lwtoft^(0+128),w
  2149  0B12  00AF               	movwf	___ftdiv@f1^(0+128)
  2150  0B13  0829               	movf	(?___lwtoft+1)^(0+128),w
  2151  0B14  00B0               	movwf	(___ftdiv@f1+1)^(0+128)
  2152  0B15  082A               	movf	(?___lwtoft+2)^(0+128),w
  2153  0B16  00B1               	movwf	(___ftdiv@f1+2)^(0+128)
  2154  0B17  3000               	movlw	0
  2155  0B18  00AC               	movwf	___ftdiv@f2^(0+128)
  2156  0B19  3034               	movlw	52
  2157  0B1A  00AD               	movwf	(___ftdiv@f2+1)^(0+128)
  2158  0B1B  303E               	movlw	62
  2159  0B1C  00AE               	movwf	(___ftdiv@f2+2)^(0+128)
  2160  0B1D  120A  118A  229B  120A  158A  	fcall	___ftdiv
  2161  0B22  1683               	bsf	3,5	;RP0=1, select bank1
  2162  0B23  1303               	bcf	3,6	;RP1=0, select bank1
  2163  0B24  082C               	movf	?___ftdiv^(0+128),w
  2164  0B25  00BC               	movwf	___fttol@f1^(0+128)
  2165  0B26  082D               	movf	(?___ftdiv+1)^(0+128),w
  2166  0B27  00BD               	movwf	(___fttol@f1+1)^(0+128)
  2167  0B28  082E               	movf	(?___ftdiv+2)^(0+128),w
  2168  0B29  00BE               	movwf	(___fttol@f1+2)^(0+128)
  2169  0B2A  120A  118A  2038   	fcall	___fttol
  2170  0B2D  1683               	bsf	3,5	;RP0=1, select bank1
  2171  0B2E  1303               	bcf	3,6	;RP1=0, select bank1
  2172  0B2F  083D               	movf	(?___fttol+1)^(0+128),w
  2173  0B30  00E0               	movwf	(_position+1)^(0+128)
  2174  0B31  083C               	movf	?___fttol^(0+128),w
  2175  0B32  00DF               	movwf	_position^(0+128)
  2176  0B33  0008               	return
  2177  0B34                     __end_of_setPosicaoAtual:	
  2178                           
  2179                           	psect	text6
  2180  0DBD                     __ptext6:	
  2181 ;; *************** function _LCD_Setup *****************
  2182 ;; Defined at:
  2183 ;;		line 23 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\lcd.c"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;		None
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;		None
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2197 ;;      Params:         0       0       0       0       0
  2198 ;;      Locals:         0       0       0       0       0
  2199 ;;      Temps:          0       0       2       0       0
  2200 ;;      Totals:         0       0       2       0       0
  2201 ;;Total ram usage:        2 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    6
  2204 ;; This function calls:
  2205 ;;		_LCD_SendByte
  2206 ;;		_LCD_SendNb
  2207 ;; This function is called by:
  2208 ;;		_setup
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           
  2213                           ;psect for function _LCD_Setup
  2214  0DBD                     _LCD_Setup:	
  2215                           
  2216                           ;lcd.c: 24: *LCD_TRIS = 0x00;
  2217                           
  2218                           ;incstack = 0
  2219                           ; Regs used in _LCD_Setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2220  0DBD  1683               	bsf	3,5	;RP0=1, select bank1
  2221  0DBE  1303               	bcf	3,6	;RP1=0, select bank1
  2222  0DBF  0868               	movf	_LCD_TRIS^(0+128),w
  2223  0DC0  0084               	movwf	4
  2224  0DC1  1783               	bsf	3,7
  2225  0DC2  1C69               	btfss	(_LCD_TRIS+1)^(0+128),0
  2226  0DC3  1383               	bcf	3,7
  2227  0DC4  0180               	clrf	0
  2228  0DC5  0A84               	incf	4,f
  2229  0DC6  0180               	clrf	0
  2230                           
  2231                           ;lcd.c: 25: *LCD_PORT = 0x00;
  2232  0DC7  086D               	movf	_LCD_PORT^(0+128),w
  2233  0DC8  0084               	movwf	4
  2234  0DC9  1783               	bsf	3,7
  2235  0DCA  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  2236  0DCB  1383               	bcf	3,7
  2237  0DCC  0180               	clrf	0
  2238  0DCD  0A84               	incf	4,f
  2239  0DCE  0180               	clrf	0
  2240                           
  2241                           ;lcd.c: 27: _delay((unsigned long)((50)*(4000000/4000.0)));
  2242  0DCF  3041               	movlw	65
  2243  0DD0  1683               	bsf	3,5	;RP0=1, select bank1
  2244  0DD1  1303               	bcf	3,6	;RP1=0, select bank1
  2245  0DD2  00B6               	movwf	(??_LCD_Setup^(0+128)+1)
  2246  0DD3  30ED               	movlw	237
  2247  0DD4  00B5               	movwf	??_LCD_Setup^(0+128)
  2248  0DD5                     u3167:	
  2249  0DD5  0BB5               	decfsz	??_LCD_Setup^(0+128),f
  2250  0DD6  2DD5               	goto	u3167
  2251  0DD7  0BB6               	decfsz	(??_LCD_Setup^(0+128)+1),f
  2252  0DD8  2DD5               	goto	u3167
  2253  0DD9  2DDA               	nop2
  2254                           
  2255                           ;lcd.c: 30: LCD_SendNb(0x03);
  2256  0DDA  3003               	movlw	3
  2257  0DDB  120A  118A  2426  120A  158A  	fcall	_LCD_SendNb
  2258                           
  2259                           ;lcd.c: 31: LCD_SendNb(0x03);
  2260  0DE0  3003               	movlw	3
  2261  0DE1  120A  118A  2426  120A  158A  	fcall	_LCD_SendNb
  2262                           
  2263                           ;lcd.c: 32: LCD_SendNb(0x03);
  2264  0DE6  3003               	movlw	3
  2265  0DE7  120A  118A  2426  120A  158A  	fcall	_LCD_SendNb
  2266                           
  2267                           ;lcd.c: 33: LCD_SendNb(0x02);
  2268  0DEC  3002               	movlw	2
  2269  0DED  120A  118A  2426  120A  158A  	fcall	_LCD_SendNb
  2270                           
  2271                           ;lcd.c: 34: LCD_SendByte(0, 0x28);
  2272  0DF2  3028               	movlw	40
  2273  0DF3  1683               	bsf	3,5	;RP0=1, select bank1
  2274  0DF4  1303               	bcf	3,6	;RP1=0, select bank1
  2275  0DF5  00B5               	movwf	??_LCD_Setup^(0+128)
  2276  0DF6  0835               	movf	??_LCD_Setup^(0+128),w
  2277  0DF7  00AD               	movwf	LCD_SendByte@byte^(0+128)
  2278  0DF8  3000               	movlw	0
  2279  0DF9  120A  158A  2421  120A  158A  	fcall	_LCD_SendByte
  2280                           
  2281                           ;lcd.c: 35: LCD_SendByte(0, LCD_Controle);
  2282  0DFE  1683               	bsf	3,5	;RP0=1, select bank1
  2283  0DFF  1303               	bcf	3,6	;RP1=0, select bank1
  2284  0E00  086B               	movf	_LCD_Controle^(0+128),w
  2285  0E01  00B5               	movwf	??_LCD_Setup^(0+128)
  2286  0E02  0835               	movf	??_LCD_Setup^(0+128),w
  2287  0E03  00AD               	movwf	LCD_SendByte@byte^(0+128)
  2288  0E04  3000               	movlw	0
  2289  0E05  120A  158A  2421  120A  158A  	fcall	_LCD_SendByte
  2290                           
  2291                           ;lcd.c: 36: LCD_SendByte(0, 0x01);
  2292  0E0A  1683               	bsf	3,5	;RP0=1, select bank1
  2293  0E0B  1303               	bcf	3,6	;RP1=0, select bank1
  2294  0E0C  01AD               	clrf	LCD_SendByte@byte^(0+128)
  2295  0E0D  0AAD               	incf	LCD_SendByte@byte^(0+128),f
  2296  0E0E  3000               	movlw	0
  2297  0E0F  120A  158A  2421  120A  158A  	fcall	_LCD_SendByte
  2298                           
  2299                           ;lcd.c: 37: LCD_SendByte(0, LCD_Entrada);
  2300  0E14  1683               	bsf	3,5	;RP0=1, select bank1
  2301  0E15  1303               	bcf	3,6	;RP1=0, select bank1
  2302  0E16  086C               	movf	_LCD_Entrada^(0+128),w
  2303  0E17  00B5               	movwf	??_LCD_Setup^(0+128)
  2304  0E18  0835               	movf	??_LCD_Setup^(0+128),w
  2305  0E19  00AD               	movwf	LCD_SendByte@byte^(0+128)
  2306  0E1A  3000               	movlw	0
  2307  0E1B  120A  158A  2421   	fcall	_LCD_SendByte
  2308  0E1E  0008               	return
  2309  0E1F                     __end_of_LCD_Setup:	
  2310                           
  2311                           	psect	text7
  2312  0AD4                     __ptext7:	
  2313 ;; *************** function _setPosicaoDesejada *****************
  2314 ;; Defined at:
  2315 ;;		line 28 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\stepper.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;  posicao_dese    2   42[BANK1 ] unsigned int 
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;		None
  2320 ;; Return value:  Size  Location     Type
  2321 ;;                  1    wreg      void 
  2322 ;; Registers used:
  2323 ;;		wreg, status,2, status,0, pclath, cstack
  2324 ;; Tracked objects:
  2325 ;;		On entry : 0/0
  2326 ;;		On exit  : 0/0
  2327 ;;		Unchanged: 0/0
  2328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2329 ;;      Params:         0       0       2       0       0
  2330 ;;      Locals:         0       0       0       0       0
  2331 ;;      Temps:          0       0       0       0       0
  2332 ;;      Totals:         0       0       2       0       0
  2333 ;;Total ram usage:        2 bytes
  2334 ;; Hardware stack levels used:    1
  2335 ;; Hardware stack levels required when called:    6
  2336 ;; This function calls:
  2337 ;;		___ftdiv
  2338 ;;		___fttol
  2339 ;;		___lwtoft
  2340 ;; This function is called by:
  2341 ;;		_main
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           
  2346                           ;psect for function _setPosicaoDesejada
  2347  0AD4                     _setPosicaoDesejada:	
  2348                           
  2349                           ;stepper.c: 29: setpoint = posicao_desejada/(5.625/32);
  2350                           
  2351                           ;incstack = 0
  2352                           ; Regs used in _setPosicaoDesejada: [wreg+status,2+status,0+pclath+cstack]
  2353  0AD4  1683               	bsf	3,5	;RP0=1, select bank1
  2354  0AD5  1303               	bcf	3,6	;RP1=0, select bank1
  2355  0AD6  084B               	movf	(setPosicaoDesejada@posicao_desejada+1)^(0+128),w
  2356  0AD7  00A9               	movwf	(___lwtoft@c+1)^(0+128)
  2357  0AD8  084A               	movf	setPosicaoDesejada@posicao_desejada^(0+128),w
  2358  0AD9  00A8               	movwf	___lwtoft@c^(0+128)
  2359  0ADA  120A  158A  2228  120A  158A  	fcall	___lwtoft
  2360  0ADF  1683               	bsf	3,5	;RP0=1, select bank1
  2361  0AE0  1303               	bcf	3,6	;RP1=0, select bank1
  2362  0AE1  0828               	movf	?___lwtoft^(0+128),w
  2363  0AE2  00AF               	movwf	___ftdiv@f1^(0+128)
  2364  0AE3  0829               	movf	(?___lwtoft+1)^(0+128),w
  2365  0AE4  00B0               	movwf	(___ftdiv@f1+1)^(0+128)
  2366  0AE5  082A               	movf	(?___lwtoft+2)^(0+128),w
  2367  0AE6  00B1               	movwf	(___ftdiv@f1+2)^(0+128)
  2368  0AE7  3000               	movlw	0
  2369  0AE8  00AC               	movwf	___ftdiv@f2^(0+128)
  2370  0AE9  3034               	movlw	52
  2371  0AEA  00AD               	movwf	(___ftdiv@f2+1)^(0+128)
  2372  0AEB  303E               	movlw	62
  2373  0AEC  00AE               	movwf	(___ftdiv@f2+2)^(0+128)
  2374  0AED  120A  118A  229B  120A  158A  	fcall	___ftdiv
  2375  0AF2  1683               	bsf	3,5	;RP0=1, select bank1
  2376  0AF3  1303               	bcf	3,6	;RP1=0, select bank1
  2377  0AF4  082C               	movf	?___ftdiv^(0+128),w
  2378  0AF5  00BC               	movwf	___fttol@f1^(0+128)
  2379  0AF6  082D               	movf	(?___ftdiv+1)^(0+128),w
  2380  0AF7  00BD               	movwf	(___fttol@f1+1)^(0+128)
  2381  0AF8  082E               	movf	(?___ftdiv+2)^(0+128),w
  2382  0AF9  00BE               	movwf	(___fttol@f1+2)^(0+128)
  2383  0AFA  120A  118A  2038   	fcall	___fttol
  2384  0AFD  1683               	bsf	3,5	;RP0=1, select bank1
  2385  0AFE  1303               	bcf	3,6	;RP1=0, select bank1
  2386  0AFF  083D               	movf	(?___fttol+1)^(0+128),w
  2387  0B00  00E2               	movwf	(_setpoint+1)^(0+128)
  2388  0B01  083C               	movf	?___fttol^(0+128),w
  2389  0B02  00E1               	movwf	_setpoint^(0+128)
  2390  0B03  0008               	return
  2391  0B04                     __end_of_setPosicaoDesejada:	
  2392                           
  2393                           	psect	text8
  2394  029B                     __ptext8:	
  2395 ;; *************** function ___ftdiv *****************
  2396 ;; Defined at:
  2397 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;  f2              3   12[BANK1 ] float 
  2400 ;;  f1              3   15[BANK1 ] float 
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;  f3              3   23[BANK1 ] float 
  2403 ;;  sign            1   27[BANK1 ] unsigned char 
  2404 ;;  exp             1   26[BANK1 ] unsigned char 
  2405 ;;  cntr            1   22[BANK1 ] unsigned char 
  2406 ;; Return value:  Size  Location     Type
  2407 ;;                  3   12[BANK1 ] float 
  2408 ;; Registers used:
  2409 ;;		wreg, status,2, status,0, pclath, cstack
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2415 ;;      Params:         0       0       6       0       0
  2416 ;;      Locals:         0       0       6       0       0
  2417 ;;      Temps:          0       0       4       0       0
  2418 ;;      Totals:         0       0      16       0       0
  2419 ;;Total ram usage:       16 bytes
  2420 ;; Hardware stack levels used:    1
  2421 ;; Hardware stack levels required when called:    5
  2422 ;; This function calls:
  2423 ;;		___ftpack
  2424 ;; This function is called by:
  2425 ;;		_setPosicaoAtual
  2426 ;;		_setPosicaoDesejada
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           
  2431                           ;psect for function ___ftdiv
  2432  029B                     ___ftdiv:	
  2433                           
  2434                           ;incstack = 0
  2435                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2436  029B  1683               	bsf	3,5	;RP0=1, select bank1
  2437  029C  1303               	bcf	3,6	;RP1=0, select bank1
  2438  029D  082F               	movf	___ftdiv@f1^(0+128),w
  2439  029E  00B2               	movwf	??___ftdiv^(0+128)
  2440  029F  0830               	movf	(___ftdiv@f1+1)^(0+128),w
  2441  02A0  00B3               	movwf	(??___ftdiv^(0+128)+1)
  2442  02A1  0831               	movf	(___ftdiv@f1+2)^(0+128),w
  2443  02A2  00B4               	movwf	(??___ftdiv^(0+128)+2)
  2444  02A3  1003               	clrc
  2445  02A4  0D33               	rlf	(??___ftdiv^(0+128)+1),w
  2446  02A5  0D34               	rlf	(??___ftdiv^(0+128)+2),w
  2447  02A6  00B5               	movwf	(??___ftdiv+3)^(0+128)
  2448  02A7  0835               	movf	(??___ftdiv+3)^(0+128),w
  2449  02A8  00BA               	movwf	___ftdiv@exp^(0+128)
  2450  02A9  083A               	movf	___ftdiv@exp^(0+128),w
  2451  02AA  1D03               	btfss	3,2
  2452  02AB  2AB3               	goto	l1801
  2453  02AC  3000               	movlw	0
  2454  02AD  00AC               	movwf	?___ftdiv^(0+128)
  2455  02AE  3000               	movlw	0
  2456  02AF  00AD               	movwf	(?___ftdiv+1)^(0+128)
  2457  02B0  3000               	movlw	0
  2458  02B1  00AE               	movwf	(?___ftdiv+2)^(0+128)
  2459  02B2  0008               	return
  2460  02B3                     l1801:	
  2461  02B3  082C               	movf	___ftdiv@f2^(0+128),w
  2462  02B4  00B2               	movwf	??___ftdiv^(0+128)
  2463  02B5  082D               	movf	(___ftdiv@f2+1)^(0+128),w
  2464  02B6  00B3               	movwf	(??___ftdiv^(0+128)+1)
  2465  02B7  082E               	movf	(___ftdiv@f2+2)^(0+128),w
  2466  02B8  00B4               	movwf	(??___ftdiv^(0+128)+2)
  2467  02B9  1003               	clrc
  2468  02BA  0D33               	rlf	(??___ftdiv^(0+128)+1),w
  2469  02BB  0D34               	rlf	(??___ftdiv^(0+128)+2),w
  2470  02BC  00B5               	movwf	(??___ftdiv+3)^(0+128)
  2471  02BD  0835               	movf	(??___ftdiv+3)^(0+128),w
  2472  02BE  00BB               	movwf	___ftdiv@sign^(0+128)
  2473  02BF  083B               	movf	___ftdiv@sign^(0+128),w
  2474  02C0  1D03               	btfss	3,2
  2475  02C1  2AC9               	goto	l1807
  2476  02C2  3000               	movlw	0
  2477  02C3  00AC               	movwf	?___ftdiv^(0+128)
  2478  02C4  3000               	movlw	0
  2479  02C5  00AD               	movwf	(?___ftdiv+1)^(0+128)
  2480  02C6  3000               	movlw	0
  2481  02C7  00AE               	movwf	(?___ftdiv+2)^(0+128)
  2482  02C8  0008               	return
  2483  02C9                     l1807:	
  2484  02C9  3000               	movlw	0
  2485  02CA  00B7               	movwf	___ftdiv@f3^(0+128)
  2486  02CB  3000               	movlw	0
  2487  02CC  00B8               	movwf	(___ftdiv@f3+1)^(0+128)
  2488  02CD  3000               	movlw	0
  2489  02CE  00B9               	movwf	(___ftdiv@f3+2)^(0+128)
  2490  02CF  3089               	movlw	137
  2491  02D0  073B               	addwf	___ftdiv@sign^(0+128),w
  2492  02D1  00B2               	movwf	??___ftdiv^(0+128)
  2493  02D2  0832               	movf	??___ftdiv^(0+128),w
  2494  02D3  02BA               	subwf	___ftdiv@exp^(0+128),f
  2495  02D4  082F               	movf	___ftdiv@f1^(0+128),w
  2496  02D5  00B2               	movwf	??___ftdiv^(0+128)
  2497  02D6  0830               	movf	(___ftdiv@f1+1)^(0+128),w
  2498  02D7  00B3               	movwf	(??___ftdiv^(0+128)+1)
  2499  02D8  0831               	movf	(___ftdiv@f1+2)^(0+128),w
  2500  02D9  00B4               	movwf	(??___ftdiv^(0+128)+2)
  2501  02DA  3010               	movlw	16
  2502  02DB                     u1915:	
  2503  02DB  1003               	clrc
  2504  02DC  0CB4               	rrf	(??___ftdiv^(0+128)+2),f
  2505  02DD  0CB3               	rrf	(??___ftdiv^(0+128)+1),f
  2506  02DE  0CB2               	rrf	??___ftdiv^(0+128),f
  2507  02DF  3EFF               	addlw	-1
  2508  02E0  1D03               	skipz
  2509  02E1  2ADB               	goto	u1915
  2510  02E2  0832               	movf	??___ftdiv^(0+128),w
  2511  02E3  00B5               	movwf	(??___ftdiv+3)^(0+128)
  2512  02E4  0835               	movf	(??___ftdiv+3)^(0+128),w
  2513  02E5  00BB               	movwf	___ftdiv@sign^(0+128)
  2514  02E6  082C               	movf	___ftdiv@f2^(0+128),w
  2515  02E7  00B2               	movwf	??___ftdiv^(0+128)
  2516  02E8  082D               	movf	(___ftdiv@f2+1)^(0+128),w
  2517  02E9  00B3               	movwf	(??___ftdiv^(0+128)+1)
  2518  02EA  082E               	movf	(___ftdiv@f2+2)^(0+128),w
  2519  02EB  00B4               	movwf	(??___ftdiv^(0+128)+2)
  2520  02EC  3010               	movlw	16
  2521  02ED                     u1925:	
  2522  02ED  1003               	clrc
  2523  02EE  0CB4               	rrf	(??___ftdiv^(0+128)+2),f
  2524  02EF  0CB3               	rrf	(??___ftdiv^(0+128)+1),f
  2525  02F0  0CB2               	rrf	??___ftdiv^(0+128),f
  2526  02F1  3EFF               	addlw	-1
  2527  02F2  1D03               	skipz
  2528  02F3  2AED               	goto	u1925
  2529  02F4  0832               	movf	??___ftdiv^(0+128),w
  2530  02F5  00B5               	movwf	(??___ftdiv+3)^(0+128)
  2531  02F6  0835               	movf	(??___ftdiv+3)^(0+128),w
  2532  02F7  06BB               	xorwf	___ftdiv@sign^(0+128),f
  2533  02F8  3080               	movlw	128
  2534  02F9  00B2               	movwf	??___ftdiv^(0+128)
  2535  02FA  0832               	movf	??___ftdiv^(0+128),w
  2536  02FB  05BB               	andwf	___ftdiv@sign^(0+128),f
  2537  02FC  17B0               	bsf	(___ftdiv@f1^(0+128)+1),7
  2538  02FD  30FF               	movlw	255
  2539  02FE  05AF               	andwf	___ftdiv@f1^(0+128),f
  2540  02FF  30FF               	movlw	255
  2541  0300  05B0               	andwf	(___ftdiv@f1+1)^(0+128),f
  2542  0301  3000               	movlw	0
  2543  0302  05B1               	andwf	(___ftdiv@f1+2)^(0+128),f
  2544  0303  17AD               	bsf	(___ftdiv@f2^(0+128)+1),7
  2545  0304  30FF               	movlw	255
  2546  0305  05AC               	andwf	___ftdiv@f2^(0+128),f
  2547  0306  30FF               	movlw	255
  2548  0307  05AD               	andwf	(___ftdiv@f2+1)^(0+128),f
  2549  0308  3000               	movlw	0
  2550  0309  05AE               	andwf	(___ftdiv@f2+2)^(0+128),f
  2551  030A  3018               	movlw	24
  2552  030B  00B2               	movwf	??___ftdiv^(0+128)
  2553  030C  0832               	movf	??___ftdiv^(0+128),w
  2554  030D  00B6               	movwf	___ftdiv@cntr^(0+128)
  2555  030E                     l1821:	
  2556  030E  3001               	movlw	1
  2557  030F                     u1935:	
  2558  030F  1003               	clrc
  2559  0310  0DB7               	rlf	___ftdiv@f3^(0+128),f
  2560  0311  0DB8               	rlf	(___ftdiv@f3+1)^(0+128),f
  2561  0312  0DB9               	rlf	(___ftdiv@f3+2)^(0+128),f
  2562  0313  3EFF               	addlw	-1
  2563  0314  1D03               	skipz
  2564  0315  2B0F               	goto	u1935
  2565  0316  082E               	movf	(___ftdiv@f2+2)^(0+128),w
  2566  0317  0231               	subwf	(___ftdiv@f1+2)^(0+128),w
  2567  0318  1D03               	skipz
  2568  0319  2B20               	goto	u1945
  2569  031A  082D               	movf	(___ftdiv@f2+1)^(0+128),w
  2570  031B  0230               	subwf	(___ftdiv@f1+1)^(0+128),w
  2571  031C  1D03               	skipz
  2572  031D  2B20               	goto	u1945
  2573  031E  082C               	movf	___ftdiv@f2^(0+128),w
  2574  031F  022F               	subwf	___ftdiv@f1^(0+128),w
  2575  0320                     u1945:	
  2576  0320  1C03               	skipc
  2577  0321  2B2D               	goto	l1829
  2578  0322  082C               	movf	___ftdiv@f2^(0+128),w
  2579  0323  02AF               	subwf	___ftdiv@f1^(0+128),f
  2580  0324  082D               	movf	(___ftdiv@f2+1)^(0+128),w
  2581  0325  1C03               	skipc
  2582  0326  0F2D               	incfsz	(___ftdiv@f2+1)^(0+128),w
  2583  0327  02B0               	subwf	(___ftdiv@f1+1)^(0+128),f
  2584  0328  082E               	movf	(___ftdiv@f2+2)^(0+128),w
  2585  0329  1C03               	skipc
  2586  032A  0A2E               	incf	(___ftdiv@f2+2)^(0+128),w
  2587  032B  02B1               	subwf	(___ftdiv@f1+2)^(0+128),f
  2588  032C  1437               	bsf	___ftdiv@f3^(0+128),0
  2589  032D                     l1829:	
  2590  032D  3001               	movlw	1
  2591  032E                     u1955:	
  2592  032E  1003               	clrc
  2593  032F  0DAF               	rlf	___ftdiv@f1^(0+128),f
  2594  0330  0DB0               	rlf	(___ftdiv@f1+1)^(0+128),f
  2595  0331  0DB1               	rlf	(___ftdiv@f1+2)^(0+128),f
  2596  0332  3EFF               	addlw	-1
  2597  0333  1D03               	skipz
  2598  0334  2B2E               	goto	u1955
  2599  0335  3001               	movlw	1
  2600  0336  02B6               	subwf	___ftdiv@cntr^(0+128),f
  2601  0337  1D03               	btfss	3,2
  2602  0338  2B0E               	goto	l1821
  2603  0339  0837               	movf	___ftdiv@f3^(0+128),w
  2604  033A  00A0               	movwf	___ftpack@arg^(0+128)
  2605  033B  0838               	movf	(___ftdiv@f3+1)^(0+128),w
  2606  033C  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  2607  033D  0839               	movf	(___ftdiv@f3+2)^(0+128),w
  2608  033E  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  2609  033F  083A               	movf	___ftdiv@exp^(0+128),w
  2610  0340  00B2               	movwf	??___ftdiv^(0+128)
  2611  0341  0832               	movf	??___ftdiv^(0+128),w
  2612  0342  00A3               	movwf	___ftpack@exp^(0+128)
  2613  0343  083B               	movf	___ftdiv@sign^(0+128),w
  2614  0344  00B3               	movwf	(??___ftdiv+1)^(0+128)
  2615  0345  0833               	movf	(??___ftdiv+1)^(0+128),w
  2616  0346  00A4               	movwf	___ftpack@sign^(0+128)
  2617  0347  120A  158A  268B   	fcall	___ftpack
  2618  034A  1683               	bsf	3,5	;RP0=1, select bank1
  2619  034B  1303               	bcf	3,6	;RP1=0, select bank1
  2620  034C  0820               	movf	?___ftpack^(0+128),w
  2621  034D  00AC               	movwf	?___ftdiv^(0+128)
  2622  034E  0821               	movf	(?___ftpack+1)^(0+128),w
  2623  034F  00AD               	movwf	(?___ftdiv+1)^(0+128)
  2624  0350  0822               	movf	(?___ftpack+2)^(0+128),w
  2625  0351  00AE               	movwf	(?___ftdiv+2)^(0+128)
  2626  0352  0008               	return
  2627  0353                     __end_of___ftdiv:	
  2628                           
  2629                           	psect	text9
  2630  0B6A                     __ptext9:	
  2631 ;; *************** function _sendString_ *****************
  2632 ;; Defined at:
  2633 ;;		line 36 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\serial.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;  dado            2    0[BANK1 ] PTR unsigned char 
  2636 ;;		 -> STR_5(19), STR_4(16), c_int_value_(5), 
  2637 ;; Auto vars:     Size  Location     Type
  2638 ;;  j               1    3[BANK1 ] unsigned char 
  2639 ;; Return value:  Size  Location     Type
  2640 ;;                  1    wreg      void 
  2641 ;; Registers used:
  2642 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  2643 ;; Tracked objects:
  2644 ;;		On entry : 0/0
  2645 ;;		On exit  : 0/0
  2646 ;;		Unchanged: 0/0
  2647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2648 ;;      Params:         0       0       2       0       0
  2649 ;;      Locals:         0       0       1       0       0
  2650 ;;      Temps:          0       0       1       0       0
  2651 ;;      Totals:         0       0       4       0       0
  2652 ;;Total ram usage:        4 bytes
  2653 ;; Hardware stack levels used:    1
  2654 ;; Hardware stack levels required when called:    4
  2655 ;; This function calls:
  2656 ;;		Nothing
  2657 ;; This function is called by:
  2658 ;;		_main
  2659 ;; This function uses a non-reentrant model
  2660 ;;
  2661                           
  2662                           
  2663                           ;psect for function _sendString_
  2664  0B6A                     _sendString_:	
  2665                           
  2666                           ;serial.c: 38: uint8_t j =0;
  2667                           
  2668                           ;incstack = 0
  2669                           ; Regs used in _sendString_: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  2670  0B6A  1683               	bsf	3,5	;RP0=1, select bank1
  2671  0B6B  1303               	bcf	3,6	;RP1=0, select bank1
  2672  0B6C  01A3               	clrf	sendString_@j^(0+128)
  2673  0B6D                     l2345:	
  2674                           ;serial.c: 39: while(dado[j]!='\0'){
  2675                           
  2676  0B6D  1683               	bsf	3,5	;RP0=1, select bank1
  2677  0B6E  1303               	bcf	3,6	;RP1=0, select bank1
  2678  0B6F  0823               	movf	sendString_@j^(0+128),w
  2679  0B70  0720               	addwf	sendString_@dado^(0+128),w
  2680  0B71  0084               	movwf	4
  2681  0B72  0821               	movf	(sendString_@dado+1)^(0+128),w
  2682  0B73  1803               	skipnc
  2683  0B74  0A21               	incf	(sendString_@dado+1)^(0+128),w
  2684  0B75  1283               	bcf	3,5	;RP0=0, select bank0
  2685  0B76  1303               	bcf	3,6	;RP1=0, select bank0
  2686  0B77  00FF               	movwf	127
  2687  0B78  120A  158A  2000  120A  158A  	fcall	stringtab
  2688  0B7D  3A00               	xorlw	0
  2689  0B7E  1903               	btfsc	3,2
  2690  0B7F  0008               	return
  2691                           
  2692                           ;serial.c: 40: TXREG = dado[j];
  2693  0B80  1683               	bsf	3,5	;RP0=1, select bank1
  2694  0B81  1303               	bcf	3,6	;RP1=0, select bank1
  2695  0B82  0823               	movf	sendString_@j^(0+128),w
  2696  0B83  0720               	addwf	sendString_@dado^(0+128),w
  2697  0B84  0084               	movwf	4
  2698  0B85  0821               	movf	(sendString_@dado+1)^(0+128),w
  2699  0B86  1803               	skipnc
  2700  0B87  0A21               	incf	(sendString_@dado+1)^(0+128),w
  2701  0B88  1283               	bcf	3,5	;RP0=0, select bank0
  2702  0B89  1303               	bcf	3,6	;RP1=0, select bank0
  2703  0B8A  00FF               	movwf	127
  2704  0B8B  120A  158A  2000  120A  158A  	fcall	stringtab
  2705  0B90  0099               	movwf	25	;volatile
  2706                           
  2707                           ;serial.c: 41: _delay((unsigned long)((1)*(4000000/4000.0)));
  2708  0B91  30C7               	movlw	199
  2709  0B92  1683               	bsf	3,5	;RP0=1, select bank1
  2710  0B93  1303               	bcf	3,6	;RP1=0, select bank1
  2711  0B94  00A2               	movwf	??_sendString_^(0+128)
  2712  0B95                     u3177:	
  2713  0B95  2B96               	nop2
  2714  0B96  0BA2               	decfsz	??_sendString_^(0+128),f
  2715  0B97  2B95               	goto	u3177
  2716  0B98  2B99               	nop2
  2717                           
  2718                           ;serial.c: 42: j++;
  2719  0B99  3001               	movlw	1
  2720  0B9A  1683               	bsf	3,5	;RP0=1, select bank1
  2721  0B9B  1303               	bcf	3,6	;RP1=0, select bank1
  2722  0B9C  00A2               	movwf	??_sendString_^(0+128)
  2723  0B9D  0822               	movf	??_sendString_^(0+128),w
  2724  0B9E  07A3               	addwf	sendString_@j^(0+128),f
  2725                           
  2726                           ;serial.c: 43: PIR1bits.TXIF = 0;
  2727  0B9F  1283               	bcf	3,5	;RP0=0, select bank0
  2728  0BA0  1303               	bcf	3,6	;RP1=0, select bank0
  2729  0BA1  120C               	bcf	12,4	;volatile
  2730  0BA2  2B6D               	goto	l2345
  2731  0BA3                     __end_of_sendString_:	
  2732                           
  2733                           	psect	text10
  2734  09D6                     __ptext10:	
  2735 ;; *************** function _sendChar_ *****************
  2736 ;; Defined at:
  2737 ;;		line 30 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\serial.c"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;  dado            1    wreg     unsigned char 
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;  dado            1    0[BANK1 ] unsigned char 
  2742 ;; Return value:  Size  Location     Type
  2743 ;;                  1    wreg      void 
  2744 ;; Registers used:
  2745 ;;		wreg
  2746 ;; Tracked objects:
  2747 ;;		On entry : 0/0
  2748 ;;		On exit  : 0/0
  2749 ;;		Unchanged: 0/0
  2750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2751 ;;      Params:         0       0       0       0       0
  2752 ;;      Locals:         0       0       1       0       0
  2753 ;;      Temps:          0       0       0       0       0
  2754 ;;      Totals:         0       0       1       0       0
  2755 ;;Total ram usage:        1 bytes
  2756 ;; Hardware stack levels used:    1
  2757 ;; Hardware stack levels required when called:    4
  2758 ;; This function calls:
  2759 ;;		Nothing
  2760 ;; This function is called by:
  2761 ;;		_main
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765                           
  2766                           ;psect for function _sendChar_
  2767  09D6                     _sendChar_:	
  2768                           
  2769                           ;incstack = 0
  2770                           ; Regs used in _sendChar_: [wreg]
  2771                           ;sendChar_@dado stored from wreg
  2772  09D6  1683               	bsf	3,5	;RP0=1, select bank1
  2773  09D7  1303               	bcf	3,6	;RP1=0, select bank1
  2774  09D8  00A0               	movwf	sendChar_@dado^(0+128)
  2775                           
  2776                           ;serial.c: 32: TXREG=dado;
  2777  09D9  0820               	movf	sendChar_@dado^(0+128),w
  2778  09DA  1283               	bcf	3,5	;RP0=0, select bank0
  2779  09DB  1303               	bcf	3,6	;RP1=0, select bank0
  2780  09DC  0099               	movwf	25	;volatile
  2781                           
  2782                           ;serial.c: 33: PIR1bits.TXIF = 0;
  2783  09DD  120C               	bcf	12,4	;volatile
  2784  09DE  0008               	return
  2785  09DF                     __end_of_sendChar_:	
  2786                           
  2787                           	psect	text11
  2788  00C6                     __ptext11:	
  2789 ;; *************** function _int2char_ *****************
  2790 ;; Defined at:
  2791 ;;		line 60 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\serial.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  int_value_      2   44[BANK1 ] unsigned int 
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;  int_value2      2   54[BANK1 ] unsigned int 
  2796 ;;  int_value1      2   52[BANK1 ] unsigned int 
  2797 ;;  int_value0      2   50[BANK1 ] unsigned int 
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  1    wreg      void 
  2800 ;; Registers used:
  2801 ;;		wreg, status,2, status,0, pclath, cstack
  2802 ;; Tracked objects:
  2803 ;;		On entry : 0/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2807 ;;      Params:         0       0       2       0       0
  2808 ;;      Locals:         0       0       6       0       0
  2809 ;;      Temps:          0       0       4       0       0
  2810 ;;      Totals:         0       0      12       0       0
  2811 ;;Total ram usage:       12 bytes
  2812 ;; Hardware stack levels used:    1
  2813 ;; Hardware stack levels required when called:    5
  2814 ;; This function calls:
  2815 ;;		___lwdiv
  2816 ;;		___wmul
  2817 ;; This function is called by:
  2818 ;;		_main
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           
  2823                           ;psect for function _int2char_
  2824  00C6                     _int2char_:	
  2825                           
  2826                           ;serial.c: 61: uint16_t int_value0 = 0;
  2827                           
  2828                           ;incstack = 0
  2829                           ; Regs used in _int2char_: [wreg+status,2+status,0+pclath+cstack]
  2830  00C6  1683               	bsf	3,5	;RP0=1, select bank1
  2831  00C7  1303               	bcf	3,6	;RP1=0, select bank1
  2832  00C8  01D2               	clrf	int2char_@int_value0^(0+128)
  2833  00C9  01D3               	clrf	(int2char_@int_value0+1)^(0+128)
  2834                           
  2835                           ;serial.c: 62: uint16_t int_value1 = 0;
  2836  00CA  01D4               	clrf	int2char_@int_value1^(0+128)
  2837  00CB  01D5               	clrf	(int2char_@int_value1+1)^(0+128)
  2838                           
  2839                           ;serial.c: 63: uint16_t int_value2 = 0;
  2840  00CC  01D6               	clrf	int2char_@int_value2^(0+128)
  2841  00CD  01D7               	clrf	(int2char_@int_value2+1)^(0+128)
  2842                           
  2843                           ;serial.c: 65: int_value2 = int_value_/100;
  2844  00CE  3064               	movlw	100
  2845  00CF  00A0               	movwf	___lwdiv@divisor^(0+128)
  2846  00D0  3000               	movlw	0
  2847  00D1  00A1               	movwf	(___lwdiv@divisor^(0+128)+1)
  2848  00D2  084D               	movf	(int2char_@int_value_+1)^(0+128),w
  2849  00D3  00A3               	movwf	(___lwdiv@dividend+1)^(0+128)
  2850  00D4  084C               	movf	int2char_@int_value_^(0+128),w
  2851  00D5  00A2               	movwf	___lwdiv@dividend^(0+128)
  2852  00D6  120A  158A  23A3  120A  118A  	fcall	___lwdiv
  2853  00DB  1683               	bsf	3,5	;RP0=1, select bank1
  2854  00DC  1303               	bcf	3,6	;RP1=0, select bank1
  2855  00DD  0821               	movf	(?___lwdiv+1)^(0+128),w
  2856  00DE  00D7               	movwf	(int2char_@int_value2+1)^(0+128)
  2857  00DF  0820               	movf	?___lwdiv^(0+128),w
  2858  00E0  00D6               	movwf	int2char_@int_value2^(0+128)
  2859                           
  2860                           ;serial.c: 66: int_value1 = int_value_/10 - int_value2*10;
  2861  00E1  0857               	movf	(int2char_@int_value2+1)^(0+128),w
  2862  00E2  00AA               	movwf	(___wmul@multiplier+1)^(0+128)
  2863  00E3  0856               	movf	int2char_@int_value2^(0+128),w
  2864  00E4  00A9               	movwf	___wmul@multiplier^(0+128)
  2865  00E5  300A               	movlw	10
  2866  00E6  00AB               	movwf	___wmul@multiplicand^(0+128)
  2867  00E7  3000               	movlw	0
  2868  00E8  00AC               	movwf	(___wmul@multiplicand^(0+128)+1)
  2869  00E9  120A  118A  2015  120A  118A  	fcall	___wmul
  2870  00EE  1683               	bsf	3,5	;RP0=1, select bank1
  2871  00EF  1303               	bcf	3,6	;RP1=0, select bank1
  2872  00F0  0929               	comf	?___wmul^(0+128),w
  2873  00F1  00CE               	movwf	??_int2char_^(0+128)
  2874  00F2  092A               	comf	(?___wmul+1)^(0+128),w
  2875  00F3  00CF               	movwf	(??_int2char_^(0+128)+1)
  2876  00F4  0ACE               	incf	??_int2char_^(0+128),f
  2877  00F5  1903               	skipnz
  2878  00F6  0ACF               	incf	(??_int2char_^(0+128)+1),f
  2879  00F7  300A               	movlw	10
  2880  00F8  00A0               	movwf	___lwdiv@divisor^(0+128)
  2881  00F9  3000               	movlw	0
  2882  00FA  00A1               	movwf	(___lwdiv@divisor^(0+128)+1)
  2883  00FB  084D               	movf	(int2char_@int_value_+1)^(0+128),w
  2884  00FC  00A3               	movwf	(___lwdiv@dividend+1)^(0+128)
  2885  00FD  084C               	movf	int2char_@int_value_^(0+128),w
  2886  00FE  00A2               	movwf	___lwdiv@dividend^(0+128)
  2887  00FF  120A  158A  23A3  120A  118A  	fcall	___lwdiv
  2888  0104  1683               	bsf	3,5	;RP0=1, select bank1
  2889  0105  1303               	bcf	3,6	;RP1=0, select bank1
  2890  0106  084E               	movf	??_int2char_^(0+128),w
  2891  0107  0720               	addwf	?___lwdiv^(0+128),w
  2892  0108  00D4               	movwf	int2char_@int_value1^(0+128)
  2893  0109  084F               	movf	(??_int2char_+1)^(0+128),w
  2894  010A  1803               	skipnc
  2895  010B  0A4F               	incf	(??_int2char_+1)^(0+128),w
  2896  010C  0721               	addwf	(?___lwdiv+1)^(0+128),w
  2897  010D  00D5               	movwf	(int2char_@int_value1+1)^(0+128)
  2898                           
  2899                           ;serial.c: 67: int_value0 = int_value_ - int_value2*100 - int_value1*10;
  2900  010E  0857               	movf	(int2char_@int_value2+1)^(0+128),w
  2901  010F  00AA               	movwf	(___wmul@multiplier+1)^(0+128)
  2902  0110  0856               	movf	int2char_@int_value2^(0+128),w
  2903  0111  00A9               	movwf	___wmul@multiplier^(0+128)
  2904  0112  3064               	movlw	100
  2905  0113  00AB               	movwf	___wmul@multiplicand^(0+128)
  2906  0114  3000               	movlw	0
  2907  0115  00AC               	movwf	(___wmul@multiplicand^(0+128)+1)
  2908  0116  120A  118A  2015  120A  118A  	fcall	___wmul
  2909  011B  1683               	bsf	3,5	;RP0=1, select bank1
  2910  011C  1303               	bcf	3,6	;RP1=0, select bank1
  2911  011D  0829               	movf	?___wmul^(0+128),w
  2912  011E  00CE               	movwf	??_int2char_^(0+128)
  2913  011F  082A               	movf	(?___wmul+1)^(0+128),w
  2914  0120  00CF               	movwf	(??_int2char_^(0+128)+1)
  2915  0121  0855               	movf	(int2char_@int_value1+1)^(0+128),w
  2916  0122  00AA               	movwf	(___wmul@multiplier+1)^(0+128)
  2917  0123  0854               	movf	int2char_@int_value1^(0+128),w
  2918  0124  00A9               	movwf	___wmul@multiplier^(0+128)
  2919  0125  300A               	movlw	10
  2920  0126  00AB               	movwf	___wmul@multiplicand^(0+128)
  2921  0127  3000               	movlw	0
  2922  0128  00AC               	movwf	(___wmul@multiplicand^(0+128)+1)
  2923  0129  120A  118A  2015   	fcall	___wmul
  2924  012C  1683               	bsf	3,5	;RP0=1, select bank1
  2925  012D  1303               	bcf	3,6	;RP1=0, select bank1
  2926  012E  0829               	movf	?___wmul^(0+128),w
  2927  012F  074E               	addwf	??_int2char_^(0+128),w
  2928  0130  00D0               	movwf	(??_int2char_+2)^(0+128)
  2929  0131  082A               	movf	(?___wmul+1)^(0+128),w
  2930  0132  1803               	skipnc
  2931  0133  0A2A               	incf	(?___wmul+1)^(0+128),w
  2932  0134  074F               	addwf	(??_int2char_+1)^(0+128),w
  2933  0135  00D1               	movwf	(??_int2char_+3)^(0+128)
  2934  0136  09D0               	comf	(??_int2char_+2)^(0+128),f
  2935  0137  09D1               	comf	((??_int2char_+2)^(0+128)+1),f
  2936  0138  0AD0               	incf	(??_int2char_+2)^(0+128),f
  2937  0139  1903               	skipnz
  2938  013A  0AD1               	incf	((??_int2char_+2)^(0+128)+1),f
  2939  013B  084C               	movf	int2char_@int_value_^(0+128),w
  2940  013C  0750               	addwf	(??_int2char_+2)^(0+128),w
  2941  013D  00D2               	movwf	int2char_@int_value0^(0+128)
  2942  013E  084D               	movf	(int2char_@int_value_+1)^(0+128),w
  2943  013F  1803               	skipnc
  2944  0140  0A4D               	incf	(int2char_@int_value_+1)^(0+128),w
  2945  0141  0751               	addwf	(??_int2char_+3)^(0+128),w
  2946  0142  00D3               	movwf	(int2char_@int_value0+1)^(0+128)
  2947                           
  2948                           ;serial.c: 69: c_int_value_[3] = '\0';
  2949  0143  01E6               	clrf	(_c_int_value_^(0+128)+3)
  2950                           
  2951                           ;serial.c: 70: c_int_value_[2] = int_value0 + 48;
  2952  0144  0852               	movf	int2char_@int_value0^(0+128),w
  2953  0145  3E30               	addlw	48
  2954  0146  00CE               	movwf	??_int2char_^(0+128)
  2955  0147  084E               	movf	??_int2char_^(0+128),w
  2956  0148  00E5               	movwf	(_c_int_value_^(0+128)+2)
  2957                           
  2958                           ;serial.c: 71: c_int_value_[1] = int_value1 + 48;
  2959  0149  0854               	movf	int2char_@int_value1^(0+128),w
  2960  014A  3E30               	addlw	48
  2961  014B  00CE               	movwf	??_int2char_^(0+128)
  2962  014C  084E               	movf	??_int2char_^(0+128),w
  2963  014D  00E4               	movwf	(_c_int_value_^(0+128)+1)
  2964                           
  2965                           ;serial.c: 72: c_int_value_[0] = int_value2 + 48;
  2966  014E  0856               	movf	int2char_@int_value2^(0+128),w
  2967  014F  3E30               	addlw	48
  2968  0150  00CE               	movwf	??_int2char_^(0+128)
  2969  0151  084E               	movf	??_int2char_^(0+128),w
  2970  0152  00E3               	movwf	_c_int_value_^(0+128)
  2971  0153  0008               	return
  2972  0154                     __end_of_int2char_:	
  2973                           
  2974                           	psect	text12
  2975  0BA3                     __ptext12:	
  2976 ;; *************** function ___lwdiv *****************
  2977 ;; Defined at:
  2978 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;  divisor         2    0[BANK1 ] unsigned int 
  2981 ;;  dividend        2    2[BANK1 ] unsigned int 
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;  quotient        2    5[BANK1 ] unsigned int 
  2984 ;;  counter         1    7[BANK1 ] unsigned char 
  2985 ;; Return value:  Size  Location     Type
  2986 ;;                  2    0[BANK1 ] unsigned int 
  2987 ;; Registers used:
  2988 ;;		wreg, status,2, status,0
  2989 ;; Tracked objects:
  2990 ;;		On entry : 0/0
  2991 ;;		On exit  : 0/0
  2992 ;;		Unchanged: 0/0
  2993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2994 ;;      Params:         0       0       4       0       0
  2995 ;;      Locals:         0       0       3       0       0
  2996 ;;      Temps:          0       0       1       0       0
  2997 ;;      Totals:         0       0       8       0       0
  2998 ;;Total ram usage:        8 bytes
  2999 ;; Hardware stack levels used:    1
  3000 ;; Hardware stack levels required when called:    4
  3001 ;; This function calls:
  3002 ;;		Nothing
  3003 ;; This function is called by:
  3004 ;;		_int2char_
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           
  3009                           ;psect for function ___lwdiv
  3010  0BA3                     ___lwdiv:	
  3011                           
  3012                           ;incstack = 0
  3013                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3014  0BA3  1683               	bsf	3,5	;RP0=1, select bank1
  3015  0BA4  1303               	bcf	3,6	;RP1=0, select bank1
  3016  0BA5  01A5               	clrf	___lwdiv@quotient^(0+128)
  3017  0BA6  01A6               	clrf	(___lwdiv@quotient+1)^(0+128)
  3018  0BA7  0820               	movf	___lwdiv@divisor^(0+128),w
  3019  0BA8  0421               	iorwf	(___lwdiv@divisor+1)^(0+128),w
  3020  0BA9  1903               	btfsc	3,2
  3021  0BAA  2BDC               	goto	l2121
  3022  0BAB  01A7               	clrf	___lwdiv@counter^(0+128)
  3023  0BAC  0AA7               	incf	___lwdiv@counter^(0+128),f
  3024  0BAD                     l2109:	
  3025  0BAD  1BA1               	btfsc	(___lwdiv@divisor+1)^(0+128),7
  3026  0BAE  2BBB               	goto	l2111
  3027  0BAF  3001               	movlw	1
  3028  0BB0                     u2505:	
  3029  0BB0  1003               	clrc
  3030  0BB1  0DA0               	rlf	___lwdiv@divisor^(0+128),f
  3031  0BB2  0DA1               	rlf	(___lwdiv@divisor+1)^(0+128),f
  3032  0BB3  3EFF               	addlw	-1
  3033  0BB4  1D03               	skipz
  3034  0BB5  2BB0               	goto	u2505
  3035  0BB6  3001               	movlw	1
  3036  0BB7  00A4               	movwf	??___lwdiv^(0+128)
  3037  0BB8  0824               	movf	??___lwdiv^(0+128),w
  3038  0BB9  07A7               	addwf	___lwdiv@counter^(0+128),f
  3039  0BBA  2BAD               	goto	l2109
  3040  0BBB                     l2111:	
  3041  0BBB  3001               	movlw	1
  3042  0BBC                     u2525:	
  3043  0BBC  1003               	clrc
  3044  0BBD  0DA5               	rlf	___lwdiv@quotient^(0+128),f
  3045  0BBE  0DA6               	rlf	(___lwdiv@quotient+1)^(0+128),f
  3046  0BBF  3EFF               	addlw	-1
  3047  0BC0  1D03               	skipz
  3048  0BC1  2BBC               	goto	u2525
  3049  0BC2  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  3050  0BC3  0223               	subwf	(___lwdiv@dividend+1)^(0+128),w
  3051  0BC4  1D03               	skipz
  3052  0BC5  2BC8               	goto	u2535
  3053  0BC6  0820               	movf	___lwdiv@divisor^(0+128),w
  3054  0BC7  0222               	subwf	___lwdiv@dividend^(0+128),w
  3055  0BC8                     u2535:	
  3056  0BC8  1C03               	skipc
  3057  0BC9  2BD1               	goto	l2117
  3058  0BCA  0820               	movf	___lwdiv@divisor^(0+128),w
  3059  0BCB  02A2               	subwf	___lwdiv@dividend^(0+128),f
  3060  0BCC  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  3061  0BCD  1C03               	skipc
  3062  0BCE  03A3               	decf	(___lwdiv@dividend+1)^(0+128),f
  3063  0BCF  02A3               	subwf	(___lwdiv@dividend+1)^(0+128),f
  3064  0BD0  1425               	bsf	___lwdiv@quotient^(0+128),0
  3065  0BD1                     l2117:	
  3066  0BD1  3001               	movlw	1
  3067  0BD2                     u2545:	
  3068  0BD2  1003               	clrc
  3069  0BD3  0CA1               	rrf	(___lwdiv@divisor+1)^(0+128),f
  3070  0BD4  0CA0               	rrf	___lwdiv@divisor^(0+128),f
  3071  0BD5  3EFF               	addlw	-1
  3072  0BD6  1D03               	skipz
  3073  0BD7  2BD2               	goto	u2545
  3074  0BD8  3001               	movlw	1
  3075  0BD9  02A7               	subwf	___lwdiv@counter^(0+128),f
  3076  0BDA  1D03               	btfss	3,2
  3077  0BDB  2BBB               	goto	l2111
  3078  0BDC                     l2121:	
  3079  0BDC  0826               	movf	(___lwdiv@quotient+1)^(0+128),w
  3080  0BDD  00A1               	movwf	(?___lwdiv+1)^(0+128)
  3081  0BDE  0825               	movf	___lwdiv@quotient^(0+128),w
  3082  0BDF  00A0               	movwf	?___lwdiv^(0+128)
  3083  0BE0  0008               	return
  3084  0BE1                     __end_of___lwdiv:	
  3085                           
  3086                           	psect	text13
  3087  09C0                     __ptext13:	
  3088 ;; *************** function _getVelocidade *****************
  3089 ;; Defined at:
  3090 ;;		line 42 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\stepper.c"
  3091 ;; Parameters:    Size  Location     Type
  3092 ;;		None
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;		None
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  2    0[BANK1 ] unsigned int 
  3097 ;; Registers used:
  3098 ;;		wreg
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3104 ;;      Params:         0       0       2       0       0
  3105 ;;      Locals:         0       0       0       0       0
  3106 ;;      Temps:          0       0       0       0       0
  3107 ;;      Totals:         0       0       2       0       0
  3108 ;;Total ram usage:        2 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; Hardware stack levels required when called:    4
  3111 ;; This function calls:
  3112 ;;		Nothing
  3113 ;; This function is called by:
  3114 ;;		_main
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           
  3119                           ;psect for function _getVelocidade
  3120  09C0                     _getVelocidade:	
  3121                           
  3122                           ;stepper.c: 43: return speed;
  3123                           
  3124                           ;incstack = 0
  3125                           ; Regs used in _getVelocidade: [wreg]
  3126  09C0  1683               	bsf	3,5	;RP0=1, select bank1
  3127  09C1  1303               	bcf	3,6	;RP1=0, select bank1
  3128  09C2  085C               	movf	(_speed+1)^(0+128),w
  3129  09C3  00A1               	movwf	(?_getVelocidade+1)^(0+128)
  3130  09C4  085B               	movf	_speed^(0+128),w
  3131  09C5  00A0               	movwf	?_getVelocidade^(0+128)
  3132  09C6  0008               	return
  3133  09C7                     __end_of_getVelocidade:	
  3134                           
  3135                           	psect	text14
  3136  0AA4                     __ptext14:	
  3137 ;; *************** function _getPosicaoAtual *****************
  3138 ;; Defined at:
  3139 ;;		line 24 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\stepper.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;		None
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;		None
  3144 ;; Return value:  Size  Location     Type
  3145 ;;                  2   42[BANK1 ] unsigned int 
  3146 ;; Registers used:
  3147 ;;		wreg, status,2, status,0, pclath, cstack
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3153 ;;      Params:         0       0       2       0       0
  3154 ;;      Locals:         0       0       0       0       0
  3155 ;;      Temps:          0       0       0       0       0
  3156 ;;      Totals:         0       0       2       0       0
  3157 ;;Total ram usage:        2 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    6
  3160 ;; This function calls:
  3161 ;;		___ftmul
  3162 ;;		___fttol
  3163 ;;		___lwtoft
  3164 ;; This function is called by:
  3165 ;;		_main
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169                           
  3170                           ;psect for function _getPosicaoAtual
  3171  0AA4                     _getPosicaoAtual:	
  3172                           
  3173                           ;stepper.c: 25: return position*(5.625/32);
  3174                           
  3175                           ;incstack = 0
  3176                           ; Regs used in _getPosicaoAtual: [wreg+status,2+status,0+pclath+cstack]
  3177  0AA4  1683               	bsf	3,5	;RP0=1, select bank1
  3178  0AA5  1303               	bcf	3,6	;RP1=0, select bank1
  3179  0AA6  0860               	movf	(_position+1)^(0+128),w
  3180  0AA7  00A9               	movwf	(___lwtoft@c+1)^(0+128)
  3181  0AA8  085F               	movf	_position^(0+128),w
  3182  0AA9  00A8               	movwf	___lwtoft@c^(0+128)
  3183  0AAA  120A  158A  2228  120A  158A  	fcall	___lwtoft
  3184  0AAF  1683               	bsf	3,5	;RP0=1, select bank1
  3185  0AB0  1303               	bcf	3,6	;RP1=0, select bank1
  3186  0AB1  0828               	movf	?___lwtoft^(0+128),w
  3187  0AB2  00AF               	movwf	___ftmul@f2^(0+128)
  3188  0AB3  0829               	movf	(?___lwtoft+1)^(0+128),w
  3189  0AB4  00B0               	movwf	(___ftmul@f2+1)^(0+128)
  3190  0AB5  082A               	movf	(?___lwtoft+2)^(0+128),w
  3191  0AB6  00B1               	movwf	(___ftmul@f2+2)^(0+128)
  3192  0AB7  3000               	movlw	0
  3193  0AB8  00AC               	movwf	___ftmul@f1^(0+128)
  3194  0AB9  3034               	movlw	52
  3195  0ABA  00AD               	movwf	(___ftmul@f1+1)^(0+128)
  3196  0ABB  303E               	movlw	62
  3197  0ABC  00AE               	movwf	(___ftmul@f1+2)^(0+128)
  3198  0ABD  120A  118A  2353  120A  158A  	fcall	___ftmul
  3199  0AC2  1683               	bsf	3,5	;RP0=1, select bank1
  3200  0AC3  1303               	bcf	3,6	;RP1=0, select bank1
  3201  0AC4  082C               	movf	?___ftmul^(0+128),w
  3202  0AC5  00BC               	movwf	___fttol@f1^(0+128)
  3203  0AC6  082D               	movf	(?___ftmul+1)^(0+128),w
  3204  0AC7  00BD               	movwf	(___fttol@f1+1)^(0+128)
  3205  0AC8  082E               	movf	(?___ftmul+2)^(0+128),w
  3206  0AC9  00BE               	movwf	(___fttol@f1+2)^(0+128)
  3207  0ACA  120A  118A  2038   	fcall	___fttol
  3208  0ACD  1683               	bsf	3,5	;RP0=1, select bank1
  3209  0ACE  1303               	bcf	3,6	;RP1=0, select bank1
  3210  0ACF  083D               	movf	(?___fttol+1)^(0+128),w
  3211  0AD0  00CB               	movwf	(?_getPosicaoAtual+1)^(0+128)
  3212  0AD1  083C               	movf	?___fttol^(0+128),w
  3213  0AD2  00CA               	movwf	?_getPosicaoAtual^(0+128)
  3214  0AD3  0008               	return
  3215  0AD4                     __end_of_getPosicaoAtual:	
  3216                           
  3217                           	psect	text15
  3218  0A28                     __ptext15:	
  3219 ;; *************** function ___lwtoft *****************
  3220 ;; Defined at:
  3221 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;  c               2    8[BANK1 ] unsigned int 
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;		None
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  3    8[BANK1 ] float 
  3228 ;; Registers used:
  3229 ;;		wreg, status,2, status,0, pclath, cstack
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3235 ;;      Params:         0       0       3       0       0
  3236 ;;      Locals:         0       0       0       0       0
  3237 ;;      Temps:          0       0       1       0       0
  3238 ;;      Totals:         0       0       4       0       0
  3239 ;;Total ram usage:        4 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:    5
  3242 ;; This function calls:
  3243 ;;		___ftpack
  3244 ;; This function is called by:
  3245 ;;		_setPosicaoAtual
  3246 ;;		_getPosicaoAtual
  3247 ;;		_setPosicaoDesejada
  3248 ;;		_main
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           
  3253                           ;psect for function ___lwtoft
  3254  0A28                     ___lwtoft:	
  3255                           
  3256                           ;incstack = 0
  3257                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  3258  0A28  1683               	bsf	3,5	;RP0=1, select bank1
  3259  0A29  1303               	bcf	3,6	;RP1=0, select bank1
  3260  0A2A  0828               	movf	___lwtoft@c^(0+128),w
  3261  0A2B  00A0               	movwf	___ftpack@arg^(0+128)
  3262  0A2C  0829               	movf	(___lwtoft@c+1)^(0+128),w
  3263  0A2D  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  3264  0A2E  01A2               	clrf	(___ftpack@arg+2)^(0+128)
  3265  0A2F  308E               	movlw	142
  3266  0A30  00AB               	movwf	??___lwtoft^(0+128)
  3267  0A31  082B               	movf	??___lwtoft^(0+128),w
  3268  0A32  00A3               	movwf	___ftpack@exp^(0+128)
  3269  0A33  01A4               	clrf	___ftpack@sign^(0+128)
  3270  0A34  120A  158A  268B   	fcall	___ftpack
  3271  0A37  1683               	bsf	3,5	;RP0=1, select bank1
  3272  0A38  1303               	bcf	3,6	;RP1=0, select bank1
  3273  0A39  0820               	movf	?___ftpack^(0+128),w
  3274  0A3A  00A8               	movwf	?___lwtoft^(0+128)
  3275  0A3B  0821               	movf	(?___ftpack+1)^(0+128),w
  3276  0A3C  00A9               	movwf	(?___lwtoft+1)^(0+128)
  3277  0A3D  0822               	movf	(?___ftpack+2)^(0+128),w
  3278  0A3E  00AA               	movwf	(?___lwtoft+2)^(0+128)
  3279  0A3F  0008               	return
  3280  0A40                     __end_of___lwtoft:	
  3281                           
  3282                           	psect	text16
  3283  0038                     __ptext16:	
  3284 ;; *************** function ___fttol *****************
  3285 ;; Defined at:
  3286 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;  f1              3   28[BANK1 ] float 
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;  lval            4   37[BANK1 ] unsigned long 
  3291 ;;  exp1            1   41[BANK1 ] unsigned char 
  3292 ;;  sign1           1   36[BANK1 ] unsigned char 
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  4   28[BANK1 ] long 
  3295 ;; Registers used:
  3296 ;;		wreg, status,2, status,0
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3302 ;;      Params:         0       0       4       0       0
  3303 ;;      Locals:         0       0       6       0       0
  3304 ;;      Temps:          0       0       4       0       0
  3305 ;;      Totals:         0       0      14       0       0
  3306 ;;Total ram usage:       14 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    4
  3309 ;; This function calls:
  3310 ;;		Nothing
  3311 ;; This function is called by:
  3312 ;;		_setPosicaoAtual
  3313 ;;		_getPosicaoAtual
  3314 ;;		_setPosicaoDesejada
  3315 ;;		_main
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           
  3320                           ;psect for function ___fttol
  3321  0038                     ___fttol:	
  3322                           
  3323                           ;incstack = 0
  3324                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3325  0038  1683               	bsf	3,5	;RP0=1, select bank1
  3326  0039  1303               	bcf	3,6	;RP1=0, select bank1
  3327  003A  083C               	movf	___fttol@f1^(0+128),w
  3328  003B  00C0               	movwf	??___fttol^(0+128)
  3329  003C  083D               	movf	(___fttol@f1+1)^(0+128),w
  3330  003D  00C1               	movwf	(??___fttol^(0+128)+1)
  3331  003E  083E               	movf	(___fttol@f1+2)^(0+128),w
  3332  003F  00C2               	movwf	(??___fttol^(0+128)+2)
  3333  0040  1003               	clrc
  3334  0041  0D41               	rlf	(??___fttol^(0+128)+1),w
  3335  0042  0D42               	rlf	(??___fttol^(0+128)+2),w
  3336  0043  00C3               	movwf	(??___fttol+3)^(0+128)
  3337  0044  0843               	movf	(??___fttol+3)^(0+128),w
  3338  0045  00C9               	movwf	___fttol@exp1^(0+128)
  3339  0046  0849               	movf	___fttol@exp1^(0+128),w
  3340  0047  1D03               	btfss	3,2
  3341  0048  2852               	goto	l1843
  3342  0049  3000               	movlw	0
  3343  004A  00BF               	movwf	(?___fttol+3)^(0+128)
  3344  004B  3000               	movlw	0
  3345  004C  00BE               	movwf	(?___fttol+2)^(0+128)
  3346  004D  3000               	movlw	0
  3347  004E  00BD               	movwf	(?___fttol+1)^(0+128)
  3348  004F  3000               	movlw	0
  3349  0050  00BC               	movwf	?___fttol^(0+128)
  3350  0051  0008               	return
  3351  0052                     l1843:	
  3352  0052  083C               	movf	___fttol@f1^(0+128),w
  3353  0053  00C0               	movwf	??___fttol^(0+128)
  3354  0054  083D               	movf	(___fttol@f1+1)^(0+128),w
  3355  0055  00C1               	movwf	(??___fttol^(0+128)+1)
  3356  0056  083E               	movf	(___fttol@f1+2)^(0+128),w
  3357  0057  00C2               	movwf	(??___fttol^(0+128)+2)
  3358  0058  3017               	movlw	23
  3359  0059                     u1985:	
  3360  0059  1003               	clrc
  3361  005A  0CC2               	rrf	(??___fttol^(0+128)+2),f
  3362  005B  0CC1               	rrf	(??___fttol^(0+128)+1),f
  3363  005C  0CC0               	rrf	??___fttol^(0+128),f
  3364  005D  3EFF               	addlw	-1
  3365  005E  1D03               	skipz
  3366  005F  2859               	goto	u1985
  3367  0060  0840               	movf	??___fttol^(0+128),w
  3368  0061  00C3               	movwf	(??___fttol+3)^(0+128)
  3369  0062  0843               	movf	(??___fttol+3)^(0+128),w
  3370  0063  00C4               	movwf	___fttol@sign1^(0+128)
  3371  0064  17BD               	bsf	(___fttol@f1^(0+128)+1),7
  3372  0065  30FF               	movlw	255
  3373  0066  05BC               	andwf	___fttol@f1^(0+128),f
  3374  0067  30FF               	movlw	255
  3375  0068  05BD               	andwf	(___fttol@f1+1)^(0+128),f
  3376  0069  3000               	movlw	0
  3377  006A  05BE               	andwf	(___fttol@f1+2)^(0+128),f
  3378  006B  083C               	movf	___fttol@f1^(0+128),w
  3379  006C  00C5               	movwf	___fttol@lval^(0+128)
  3380  006D  083D               	movf	(___fttol@f1+1)^(0+128),w
  3381  006E  00C6               	movwf	(___fttol@lval^(0+128)+1)
  3382  006F  083E               	movf	(___fttol@f1+2)^(0+128),w
  3383  0070  00C7               	movwf	(___fttol@lval^(0+128)+2)
  3384  0071  01C8               	clrf	(___fttol@lval^(0+128)+3)
  3385  0072  308E               	movlw	142
  3386  0073  02C9               	subwf	___fttol@exp1^(0+128),f
  3387  0074  1FC9               	btfss	___fttol@exp1^(0+128),7
  3388  0075  2894               	goto	l1863
  3389  0076  0849               	movf	___fttol@exp1^(0+128),w
  3390  0077  3A80               	xorlw	128
  3391  0078  3E8F               	addlw	143
  3392  0079  1803               	skipnc
  3393  007A  2884               	goto	l1861
  3394  007B  3000               	movlw	0
  3395  007C  00BF               	movwf	(?___fttol+3)^(0+128)
  3396  007D  3000               	movlw	0
  3397  007E  00BE               	movwf	(?___fttol+2)^(0+128)
  3398  007F  3000               	movlw	0
  3399  0080  00BD               	movwf	(?___fttol+1)^(0+128)
  3400  0081  3000               	movlw	0
  3401  0082  00BC               	movwf	?___fttol^(0+128)
  3402  0083  0008               	return
  3403  0084                     l1861:	
  3404  0084  3001               	movlw	1
  3405  0085                     u2015:	
  3406  0085  1003               	clrc
  3407  0086  0CC8               	rrf	(___fttol@lval+3)^(0+128),f
  3408  0087  0CC7               	rrf	(___fttol@lval+2)^(0+128),f
  3409  0088  0CC6               	rrf	(___fttol@lval+1)^(0+128),f
  3410  0089  0CC5               	rrf	___fttol@lval^(0+128),f
  3411  008A  3EFF               	addlw	-1
  3412  008B  1D03               	skipz
  3413  008C  2885               	goto	u2015
  3414  008D  3001               	movlw	1
  3415  008E  00C0               	movwf	??___fttol^(0+128)
  3416  008F  0840               	movf	??___fttol^(0+128),w
  3417  0090  07C9               	addwf	___fttol@exp1^(0+128),f
  3418  0091  1903               	btfsc	3,2
  3419  0092  28AF               	goto	l1871
  3420  0093  2884               	goto	l1861
  3421  0094                     l1863:	
  3422  0094  3018               	movlw	24
  3423  0095  0249               	subwf	___fttol@exp1^(0+128),w
  3424  0096  1C03               	skipc
  3425  0097  28AC               	goto	l675
  3426  0098  3000               	movlw	0
  3427  0099  00BF               	movwf	(?___fttol+3)^(0+128)
  3428  009A  3000               	movlw	0
  3429  009B  00BE               	movwf	(?___fttol+2)^(0+128)
  3430  009C  3000               	movlw	0
  3431  009D  00BD               	movwf	(?___fttol+1)^(0+128)
  3432  009E  3000               	movlw	0
  3433  009F  00BC               	movwf	?___fttol^(0+128)
  3434  00A0  0008               	return
  3435  00A1                     l1869:	
  3436  00A1  3001               	movlw	1
  3437  00A2  00C0               	movwf	??___fttol^(0+128)
  3438  00A3                     u2045:	
  3439  00A3  1003               	clrc
  3440  00A4  0DC5               	rlf	___fttol@lval^(0+128),f
  3441  00A5  0DC6               	rlf	(___fttol@lval+1)^(0+128),f
  3442  00A6  0DC7               	rlf	(___fttol@lval+2)^(0+128),f
  3443  00A7  0DC8               	rlf	(___fttol@lval+3)^(0+128),f
  3444  00A8  0BC0               	decfsz	??___fttol^(0+128),f
  3445  00A9  28A3               	goto	u2045
  3446  00AA  3001               	movlw	1
  3447  00AB  02C9               	subwf	___fttol@exp1^(0+128),f
  3448  00AC                     l675:	
  3449  00AC  0849               	movf	___fttol@exp1^(0+128),w
  3450  00AD  1D03               	btfss	3,2
  3451  00AE  28A1               	goto	l1869
  3452  00AF                     l1871:	
  3453  00AF  0844               	movf	___fttol@sign1^(0+128),w
  3454  00B0  1903               	btfsc	3,2
  3455  00B1  28BD               	goto	l1875
  3456  00B2  09C5               	comf	___fttol@lval^(0+128),f
  3457  00B3  09C6               	comf	(___fttol@lval+1)^(0+128),f
  3458  00B4  09C7               	comf	(___fttol@lval+2)^(0+128),f
  3459  00B5  09C8               	comf	(___fttol@lval+3)^(0+128),f
  3460  00B6  0AC5               	incf	___fttol@lval^(0+128),f
  3461  00B7  1903               	skipnz
  3462  00B8  0AC6               	incf	(___fttol@lval+1)^(0+128),f
  3463  00B9  1903               	skipnz
  3464  00BA  0AC7               	incf	(___fttol@lval+2)^(0+128),f
  3465  00BB  1903               	skipnz
  3466  00BC  0AC8               	incf	(___fttol@lval+3)^(0+128),f
  3467  00BD                     l1875:	
  3468  00BD  0848               	movf	(___fttol@lval+3)^(0+128),w
  3469  00BE  00BF               	movwf	(?___fttol+3)^(0+128)
  3470  00BF  0847               	movf	(___fttol@lval+2)^(0+128),w
  3471  00C0  00BE               	movwf	(?___fttol+2)^(0+128)
  3472  00C1  0846               	movf	(___fttol@lval+1)^(0+128),w
  3473  00C2  00BD               	movwf	(?___fttol+1)^(0+128)
  3474  00C3  0845               	movf	___fttol@lval^(0+128),w
  3475  00C4  00BC               	movwf	?___fttol^(0+128)
  3476  00C5  0008               	return
  3477  00C6                     __end_of___fttol:	
  3478                           
  3479                           	psect	text17
  3480  0353                     __ptext17:	
  3481 ;; *************** function ___ftmul *****************
  3482 ;; Defined at:
  3483 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3484 ;; Parameters:    Size  Location     Type
  3485 ;;  f1              3   12[BANK1 ] float 
  3486 ;;  f2              3   15[BANK1 ] float 
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;  f3_as_produc    3   23[BANK1 ] unsigned um
  3489 ;;  sign            1   27[BANK1 ] unsigned char 
  3490 ;;  cntr            1   26[BANK1 ] unsigned char 
  3491 ;;  exp             1   22[BANK1 ] unsigned char 
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  3   12[BANK1 ] float 
  3494 ;; Registers used:
  3495 ;;		wreg, status,2, status,0, pclath, cstack
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3501 ;;      Params:         0       0       6       0       0
  3502 ;;      Locals:         0       0       6       0       0
  3503 ;;      Temps:          0       0       4       0       0
  3504 ;;      Totals:         0       0      16       0       0
  3505 ;;Total ram usage:       16 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    5
  3508 ;; This function calls:
  3509 ;;		___ftpack
  3510 ;; This function is called by:
  3511 ;;		_getPosicaoAtual
  3512 ;;		_main
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           
  3517                           ;psect for function ___ftmul
  3518  0353                     ___ftmul:	
  3519                           
  3520                           ;incstack = 0
  3521                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  3522  0353  1683               	bsf	3,5	;RP0=1, select bank1
  3523  0354  1303               	bcf	3,6	;RP1=0, select bank1
  3524  0355  082C               	movf	___ftmul@f1^(0+128),w
  3525  0356  00B2               	movwf	??___ftmul^(0+128)
  3526  0357  082D               	movf	(___ftmul@f1+1)^(0+128),w
  3527  0358  00B3               	movwf	(??___ftmul^(0+128)+1)
  3528  0359  082E               	movf	(___ftmul@f1+2)^(0+128),w
  3529  035A  00B4               	movwf	(??___ftmul^(0+128)+2)
  3530  035B  1003               	clrc
  3531  035C  0D33               	rlf	(??___ftmul^(0+128)+1),w
  3532  035D  0D34               	rlf	(??___ftmul^(0+128)+2),w
  3533  035E  00B5               	movwf	(??___ftmul+3)^(0+128)
  3534  035F  0835               	movf	(??___ftmul+3)^(0+128),w
  3535  0360  00B6               	movwf	___ftmul@exp^(0+128)
  3536  0361  0836               	movf	___ftmul@exp^(0+128),w
  3537  0362  1D03               	btfss	3,2
  3538  0363  2B6B               	goto	l2055
  3539  0364  3000               	movlw	0
  3540  0365  00AC               	movwf	?___ftmul^(0+128)
  3541  0366  3000               	movlw	0
  3542  0367  00AD               	movwf	(?___ftmul+1)^(0+128)
  3543  0368  3000               	movlw	0
  3544  0369  00AE               	movwf	(?___ftmul+2)^(0+128)
  3545  036A  0008               	return
  3546  036B                     l2055:	
  3547  036B  082F               	movf	___ftmul@f2^(0+128),w
  3548  036C  00B2               	movwf	??___ftmul^(0+128)
  3549  036D  0830               	movf	(___ftmul@f2+1)^(0+128),w
  3550  036E  00B3               	movwf	(??___ftmul^(0+128)+1)
  3551  036F  0831               	movf	(___ftmul@f2+2)^(0+128),w
  3552  0370  00B4               	movwf	(??___ftmul^(0+128)+2)
  3553  0371  1003               	clrc
  3554  0372  0D33               	rlf	(??___ftmul^(0+128)+1),w
  3555  0373  0D34               	rlf	(??___ftmul^(0+128)+2),w
  3556  0374  00B5               	movwf	(??___ftmul+3)^(0+128)
  3557  0375  0835               	movf	(??___ftmul+3)^(0+128),w
  3558  0376  00BB               	movwf	___ftmul@sign^(0+128)
  3559  0377  083B               	movf	___ftmul@sign^(0+128),w
  3560  0378  1D03               	btfss	3,2
  3561  0379  2B81               	goto	l2061
  3562  037A  3000               	movlw	0
  3563  037B  00AC               	movwf	?___ftmul^(0+128)
  3564  037C  3000               	movlw	0
  3565  037D  00AD               	movwf	(?___ftmul+1)^(0+128)
  3566  037E  3000               	movlw	0
  3567  037F  00AE               	movwf	(?___ftmul+2)^(0+128)
  3568  0380  0008               	return
  3569  0381                     l2061:	
  3570  0381  083B               	movf	___ftmul@sign^(0+128),w
  3571  0382  3E7B               	addlw	123
  3572  0383  00B2               	movwf	??___ftmul^(0+128)
  3573  0384  0832               	movf	??___ftmul^(0+128),w
  3574  0385  07B6               	addwf	___ftmul@exp^(0+128),f
  3575  0386  082C               	movf	___ftmul@f1^(0+128),w
  3576  0387  00B2               	movwf	??___ftmul^(0+128)
  3577  0388  082D               	movf	(___ftmul@f1+1)^(0+128),w
  3578  0389  00B3               	movwf	(??___ftmul^(0+128)+1)
  3579  038A  082E               	movf	(___ftmul@f1+2)^(0+128),w
  3580  038B  00B4               	movwf	(??___ftmul^(0+128)+2)
  3581  038C  3010               	movlw	16
  3582  038D                     u2375:	
  3583  038D  1003               	clrc
  3584  038E  0CB4               	rrf	(??___ftmul^(0+128)+2),f
  3585  038F  0CB3               	rrf	(??___ftmul^(0+128)+1),f
  3586  0390  0CB2               	rrf	??___ftmul^(0+128),f
  3587  0391  3EFF               	addlw	-1
  3588  0392  1D03               	skipz
  3589  0393  2B8D               	goto	u2375
  3590  0394  0832               	movf	??___ftmul^(0+128),w
  3591  0395  00B5               	movwf	(??___ftmul+3)^(0+128)
  3592  0396  0835               	movf	(??___ftmul+3)^(0+128),w
  3593  0397  00BB               	movwf	___ftmul@sign^(0+128)
  3594  0398  082F               	movf	___ftmul@f2^(0+128),w
  3595  0399  00B2               	movwf	??___ftmul^(0+128)
  3596  039A  0830               	movf	(___ftmul@f2+1)^(0+128),w
  3597  039B  00B3               	movwf	(??___ftmul^(0+128)+1)
  3598  039C  0831               	movf	(___ftmul@f2+2)^(0+128),w
  3599  039D  00B4               	movwf	(??___ftmul^(0+128)+2)
  3600  039E  3010               	movlw	16
  3601  039F                     u2385:	
  3602  039F  1003               	clrc
  3603  03A0  0CB4               	rrf	(??___ftmul^(0+128)+2),f
  3604  03A1  0CB3               	rrf	(??___ftmul^(0+128)+1),f
  3605  03A2  0CB2               	rrf	??___ftmul^(0+128),f
  3606  03A3  3EFF               	addlw	-1
  3607  03A4  1D03               	skipz
  3608  03A5  2B9F               	goto	u2385
  3609  03A6  0832               	movf	??___ftmul^(0+128),w
  3610  03A7  00B5               	movwf	(??___ftmul+3)^(0+128)
  3611  03A8  0835               	movf	(??___ftmul+3)^(0+128),w
  3612  03A9  06BB               	xorwf	___ftmul@sign^(0+128),f
  3613  03AA  3080               	movlw	128
  3614  03AB  00B2               	movwf	??___ftmul^(0+128)
  3615  03AC  0832               	movf	??___ftmul^(0+128),w
  3616  03AD  05BB               	andwf	___ftmul@sign^(0+128),f
  3617  03AE  17AD               	bsf	(___ftmul@f1^(0+128)+1),7
  3618  03AF  17B0               	bsf	(___ftmul@f2^(0+128)+1),7
  3619  03B0  30FF               	movlw	255
  3620  03B1  05AF               	andwf	___ftmul@f2^(0+128),f
  3621  03B2  30FF               	movlw	255
  3622  03B3  05B0               	andwf	(___ftmul@f2+1)^(0+128),f
  3623  03B4  3000               	movlw	0
  3624  03B5  05B1               	andwf	(___ftmul@f2+2)^(0+128),f
  3625  03B6  3000               	movlw	0
  3626  03B7  00B7               	movwf	___ftmul@f3_as_product^(0+128)
  3627  03B8  3000               	movlw	0
  3628  03B9  00B8               	movwf	(___ftmul@f3_as_product+1)^(0+128)
  3629  03BA  3000               	movlw	0
  3630  03BB  00B9               	movwf	(___ftmul@f3_as_product+2)^(0+128)
  3631  03BC  3007               	movlw	7
  3632  03BD  00B2               	movwf	??___ftmul^(0+128)
  3633  03BE  0832               	movf	??___ftmul^(0+128),w
  3634  03BF  00BA               	movwf	___ftmul@cntr^(0+128)
  3635  03C0                     l2073:	
  3636  03C0  1C2C               	btfss	___ftmul@f1^(0+128),0
  3637  03C1  2BD0               	goto	l2077
  3638  03C2  082F               	movf	___ftmul@f2^(0+128),w
  3639  03C3  07B7               	addwf	___ftmul@f3_as_product^(0+128),f
  3640  03C4  0830               	movf	(___ftmul@f2+1)^(0+128),w
  3641  03C5  1103               	clrz
  3642  03C6  1803               	skipnc
  3643  03C7  0A30               	incf	(___ftmul@f2+1)^(0+128),w
  3644  03C8  1D03               	btfss	3,2
  3645  03C9  07B8               	addwf	(___ftmul@f3_as_product+1)^(0+128),f
  3646  03CA  0831               	movf	(___ftmul@f2+2)^(0+128),w
  3647  03CB  1103               	clrz
  3648  03CC  1803               	skipnc
  3649  03CD  0A31               	incf	(___ftmul@f2+2)^(0+128),w
  3650  03CE  1D03               	btfss	3,2
  3651  03CF  07B9               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  3652  03D0                     l2077:	
  3653  03D0  3001               	movlw	1
  3654  03D1                     u2415:	
  3655  03D1  1003               	clrc
  3656  03D2  0CAE               	rrf	(___ftmul@f1+2)^(0+128),f
  3657  03D3  0CAD               	rrf	(___ftmul@f1+1)^(0+128),f
  3658  03D4  0CAC               	rrf	___ftmul@f1^(0+128),f
  3659  03D5  3EFF               	addlw	-1
  3660  03D6  1D03               	skipz
  3661  03D7  2BD1               	goto	u2415
  3662  03D8  3001               	movlw	1
  3663  03D9                     u2425:	
  3664  03D9  1003               	clrc
  3665  03DA  0DAF               	rlf	___ftmul@f2^(0+128),f
  3666  03DB  0DB0               	rlf	(___ftmul@f2+1)^(0+128),f
  3667  03DC  0DB1               	rlf	(___ftmul@f2+2)^(0+128),f
  3668  03DD  3EFF               	addlw	-1
  3669  03DE  1D03               	skipz
  3670  03DF  2BD9               	goto	u2425
  3671  03E0  3001               	movlw	1
  3672  03E1  02BA               	subwf	___ftmul@cntr^(0+128),f
  3673  03E2  1D03               	btfss	3,2
  3674  03E3  2BC0               	goto	l2073
  3675  03E4  3009               	movlw	9
  3676  03E5  00B2               	movwf	??___ftmul^(0+128)
  3677  03E6  0832               	movf	??___ftmul^(0+128),w
  3678  03E7  00BA               	movwf	___ftmul@cntr^(0+128)
  3679  03E8                     l2085:	
  3680  03E8  1C2C               	btfss	___ftmul@f1^(0+128),0
  3681  03E9  2BF8               	goto	l2089
  3682  03EA  082F               	movf	___ftmul@f2^(0+128),w
  3683  03EB  07B7               	addwf	___ftmul@f3_as_product^(0+128),f
  3684  03EC  0830               	movf	(___ftmul@f2+1)^(0+128),w
  3685  03ED  1103               	clrz
  3686  03EE  1803               	skipnc
  3687  03EF  0A30               	incf	(___ftmul@f2+1)^(0+128),w
  3688  03F0  1D03               	btfss	3,2
  3689  03F1  07B8               	addwf	(___ftmul@f3_as_product+1)^(0+128),f
  3690  03F2  0831               	movf	(___ftmul@f2+2)^(0+128),w
  3691  03F3  1103               	clrz
  3692  03F4  1803               	skipnc
  3693  03F5  0A31               	incf	(___ftmul@f2+2)^(0+128),w
  3694  03F6  1D03               	btfss	3,2
  3695  03F7  07B9               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  3696  03F8                     l2089:	
  3697  03F8  3001               	movlw	1
  3698  03F9                     u2465:	
  3699  03F9  1003               	clrc
  3700  03FA  0CAE               	rrf	(___ftmul@f1+2)^(0+128),f
  3701  03FB  0CAD               	rrf	(___ftmul@f1+1)^(0+128),f
  3702  03FC  0CAC               	rrf	___ftmul@f1^(0+128),f
  3703  03FD  3EFF               	addlw	-1
  3704  03FE  1D03               	skipz
  3705  03FF  2BF9               	goto	u2465
  3706  0400  3001               	movlw	1
  3707  0401                     u2475:	
  3708  0401  1003               	clrc
  3709  0402  0CB9               	rrf	(___ftmul@f3_as_product+2)^(0+128),f
  3710  0403  0CB8               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  3711  0404  0CB7               	rrf	___ftmul@f3_as_product^(0+128),f
  3712  0405  3EFF               	addlw	-1
  3713  0406  1D03               	skipz
  3714  0407  2C01               	goto	u2475
  3715  0408  3001               	movlw	1
  3716  0409  02BA               	subwf	___ftmul@cntr^(0+128),f
  3717  040A  1D03               	btfss	3,2
  3718  040B  2BE8               	goto	l2085
  3719  040C  0837               	movf	___ftmul@f3_as_product^(0+128),w
  3720  040D  00A0               	movwf	___ftpack@arg^(0+128)
  3721  040E  0838               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  3722  040F  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  3723  0410  0839               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  3724  0411  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  3725  0412  0836               	movf	___ftmul@exp^(0+128),w
  3726  0413  00B2               	movwf	??___ftmul^(0+128)
  3727  0414  0832               	movf	??___ftmul^(0+128),w
  3728  0415  00A3               	movwf	___ftpack@exp^(0+128)
  3729  0416  083B               	movf	___ftmul@sign^(0+128),w
  3730  0417  00B3               	movwf	(??___ftmul+1)^(0+128)
  3731  0418  0833               	movf	(??___ftmul+1)^(0+128),w
  3732  0419  00A4               	movwf	___ftpack@sign^(0+128)
  3733  041A  120A  158A  268B   	fcall	___ftpack
  3734  041D  1683               	bsf	3,5	;RP0=1, select bank1
  3735  041E  1303               	bcf	3,6	;RP1=0, select bank1
  3736  041F  0820               	movf	?___ftpack^(0+128),w
  3737  0420  00AC               	movwf	?___ftmul^(0+128)
  3738  0421  0821               	movf	(?___ftpack+1)^(0+128),w
  3739  0422  00AD               	movwf	(?___ftmul+1)^(0+128)
  3740  0423  0822               	movf	(?___ftpack+2)^(0+128),w
  3741  0424  00AE               	movwf	(?___ftmul+2)^(0+128)
  3742  0425  0008               	return
  3743  0426                     __end_of___ftmul:	
  3744                           
  3745                           	psect	text18
  3746  0E8B                     __ptext18:	
  3747 ;; *************** function ___ftpack *****************
  3748 ;; Defined at:
  3749 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;  arg             3    0[BANK1 ] unsigned um
  3752 ;;  exp             1    3[BANK1 ] unsigned char 
  3753 ;;  sign            1    4[BANK1 ] unsigned char 
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;		None
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  3    0[BANK1 ] float 
  3758 ;; Registers used:
  3759 ;;		wreg, status,2, status,0
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 0/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3765 ;;      Params:         0       0       5       0       0
  3766 ;;      Locals:         0       0       0       0       0
  3767 ;;      Temps:          0       0       3       0       0
  3768 ;;      Totals:         0       0       8       0       0
  3769 ;;Total ram usage:        8 bytes
  3770 ;; Hardware stack levels used:    1
  3771 ;; Hardware stack levels required when called:    4
  3772 ;; This function calls:
  3773 ;;		Nothing
  3774 ;; This function is called by:
  3775 ;;		___ftdiv
  3776 ;;		___ftmul
  3777 ;;		___lwtoft
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781                           
  3782                           ;psect for function ___ftpack
  3783  0E8B                     ___ftpack:	
  3784                           
  3785                           ;incstack = 0
  3786                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3787  0E8B  1683               	bsf	3,5	;RP0=1, select bank1
  3788  0E8C  1303               	bcf	3,6	;RP1=0, select bank1
  3789  0E8D  0823               	movf	___ftpack@exp^(0+128),w
  3790  0E8E  1903               	btfsc	3,2
  3791  0E8F  2E95               	goto	l1717
  3792  0E90  0822               	movf	(___ftpack@arg+2)^(0+128),w
  3793  0E91  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
  3794  0E92  0420               	iorwf	___ftpack@arg^(0+128),w
  3795  0E93  1D03               	skipz
  3796  0E94  2EA8               	goto	l1723
  3797  0E95                     l1717:	
  3798  0E95  3000               	movlw	0
  3799  0E96  00A0               	movwf	?___ftpack^(0+128)
  3800  0E97  3000               	movlw	0
  3801  0E98  00A1               	movwf	(?___ftpack+1)^(0+128)
  3802  0E99  3000               	movlw	0
  3803  0E9A  00A2               	movwf	(?___ftpack+2)^(0+128)
  3804  0E9B  0008               	return
  3805  0E9C                     l1721:	
  3806  0E9C  3001               	movlw	1
  3807  0E9D  00A5               	movwf	??___ftpack^(0+128)
  3808  0E9E  0825               	movf	??___ftpack^(0+128),w
  3809  0E9F  07A3               	addwf	___ftpack@exp^(0+128),f
  3810  0EA0  3001               	movlw	1
  3811  0EA1                     u1675:	
  3812  0EA1  1003               	clrc
  3813  0EA2  0CA2               	rrf	(___ftpack@arg+2)^(0+128),f
  3814  0EA3  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
  3815  0EA4  0CA0               	rrf	___ftpack@arg^(0+128),f
  3816  0EA5  3EFF               	addlw	-1
  3817  0EA6  1D03               	skipz
  3818  0EA7  2EA1               	goto	u1675
  3819  0EA8                     l1723:	
  3820  0EA8  30FE               	movlw	254
  3821  0EA9  0522               	andwf	(___ftpack@arg+2)^(0+128),w
  3822  0EAA  1903               	btfsc	3,2
  3823  0EAB  2EC3               	goto	l584
  3824  0EAC  2E9C               	goto	l1721
  3825  0EAD                     l1725:	
  3826  0EAD  3001               	movlw	1
  3827  0EAE  00A5               	movwf	??___ftpack^(0+128)
  3828  0EAF  0825               	movf	??___ftpack^(0+128),w
  3829  0EB0  07A3               	addwf	___ftpack@exp^(0+128),f
  3830  0EB1  3001               	movlw	1
  3831  0EB2  07A0               	addwf	___ftpack@arg^(0+128),f
  3832  0EB3  3000               	movlw	0
  3833  0EB4  1803               	skipnc
  3834  0EB5  3001               	movlw	1
  3835  0EB6  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
  3836  0EB7  3000               	movlw	0
  3837  0EB8  1803               	skipnc
  3838  0EB9  3001               	movlw	1
  3839  0EBA  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
  3840  0EBB  3001               	movlw	1
  3841  0EBC                     u1695:	
  3842  0EBC  1003               	clrc
  3843  0EBD  0CA2               	rrf	(___ftpack@arg+2)^(0+128),f
  3844  0EBE  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
  3845  0EBF  0CA0               	rrf	___ftpack@arg^(0+128),f
  3846  0EC0  3EFF               	addlw	-1
  3847  0EC1  1D03               	skipz
  3848  0EC2  2EBC               	goto	u1695
  3849  0EC3                     l584:	
  3850  0EC3  30FF               	movlw	255
  3851  0EC4  0522               	andwf	(___ftpack@arg+2)^(0+128),w
  3852  0EC5  1903               	btfsc	3,2
  3853  0EC6  2ED2               	goto	l1733
  3854  0EC7  2EAD               	goto	l1725
  3855  0EC8                     l1731:	
  3856  0EC8  3001               	movlw	1
  3857  0EC9  02A3               	subwf	___ftpack@exp^(0+128),f
  3858  0ECA  3001               	movlw	1
  3859  0ECB                     u1715:	
  3860  0ECB  1003               	clrc
  3861  0ECC  0DA0               	rlf	___ftpack@arg^(0+128),f
  3862  0ECD  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
  3863  0ECE  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
  3864  0ECF  3EFF               	addlw	-1
  3865  0ED0  1D03               	skipz
  3866  0ED1  2ECB               	goto	u1715
  3867  0ED2                     l1733:	
  3868  0ED2  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
  3869  0ED3  2ED8               	goto	l591
  3870  0ED4  3002               	movlw	2
  3871  0ED5  0223               	subwf	___ftpack@exp^(0+128),w
  3872  0ED6  1803               	skipnc
  3873  0ED7  2EC8               	goto	l1731
  3874  0ED8                     l591:	
  3875  0ED8  1823               	btfsc	___ftpack@exp^(0+128),0
  3876  0ED9  2EE0               	goto	l592
  3877  0EDA  30FF               	movlw	255
  3878  0EDB  05A0               	andwf	___ftpack@arg^(0+128),f
  3879  0EDC  307F               	movlw	127
  3880  0EDD  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
  3881  0EDE  30FF               	movlw	255
  3882  0EDF  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
  3883  0EE0                     l592:	
  3884  0EE0  1003               	clrc
  3885  0EE1  0CA3               	rrf	___ftpack@exp^(0+128),f
  3886  0EE2  0823               	movf	___ftpack@exp^(0+128),w
  3887  0EE3  00A5               	movwf	??___ftpack^(0+128)
  3888  0EE4  01A6               	clrf	(??___ftpack^(0+128)+1)
  3889  0EE5  01A7               	clrf	(??___ftpack^(0+128)+2)
  3890  0EE6  3010               	movlw	16
  3891  0EE7                     u1755:	
  3892  0EE7  1003               	clrc
  3893  0EE8  0DA5               	rlf	??___ftpack^(0+128),f
  3894  0EE9  0DA6               	rlf	(??___ftpack^(0+128)+1),f
  3895  0EEA  0DA7               	rlf	(??___ftpack^(0+128)+2),f
  3896  0EEB  3EFF               	addlw	-1
  3897  0EEC  1D03               	skipz
  3898  0EED  2EE7               	goto	u1755
  3899  0EEE  0825               	movf	??___ftpack^(0+128),w
  3900  0EEF  04A0               	iorwf	___ftpack@arg^(0+128),f
  3901  0EF0  0826               	movf	(??___ftpack+1)^(0+128),w
  3902  0EF1  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
  3903  0EF2  0827               	movf	(??___ftpack+2)^(0+128),w
  3904  0EF3  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
  3905  0EF4  0824               	movf	___ftpack@sign^(0+128),w
  3906  0EF5  1903               	btfsc	3,2
  3907  0EF6  0008               	return
  3908  0EF7  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
  3909  0EF8  0008               	return
  3910  0EF9                     __end_of___ftpack:	
  3911                           
  3912                           	psect	text19
  3913  0BE1                     __ptext19:	
  3914 ;; *************** function _calculaVelocidade *****************
  3915 ;; Defined at:
  3916 ;;		line 46 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\stepper.c"
  3917 ;; Parameters:    Size  Location     Type
  3918 ;;		None
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;		None
  3921 ;; Return value:  Size  Location     Type
  3922 ;;                  1    wreg      void 
  3923 ;; Registers used:
  3924 ;;		wreg, status,2, status,0, pclath, cstack
  3925 ;; Tracked objects:
  3926 ;;		On entry : 0/0
  3927 ;;		On exit  : 0/0
  3928 ;;		Unchanged: 0/0
  3929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3930 ;;      Params:         0       0       0       0       0
  3931 ;;      Locals:         0       0       2       0       0
  3932 ;;      Temps:          0       0       2       0       0
  3933 ;;      Totals:         0       0       4       0       0
  3934 ;;Total ram usage:        4 bytes
  3935 ;; Hardware stack levels used:    1
  3936 ;; Hardware stack levels required when called:    5
  3937 ;; This function calls:
  3938 ;;		___awdiv
  3939 ;;		___wmul
  3940 ;; This function is called by:
  3941 ;;		_main
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           
  3946                           ;psect for function _calculaVelocidade
  3947  0BE1                     _calculaVelocidade:	
  3948                           
  3949                           ;stepper.c: 47: speed = (error == 0) ? 0 : (4314/PR2)*100/81;
  3950                           
  3951                           ;incstack = 0
  3952                           ; Regs used in _calculaVelocidade: [wreg+status,2+status,0+pclath+cstack]
  3953  0BE1  1683               	bsf	3,5	;RP0=1, select bank1
  3954  0BE2  1303               	bcf	3,6	;RP1=0, select bank1
  3955  0BE3  085D               	movf	_error^(0+128),w
  3956  0BE4  045E               	iorwf	(_error+1)^(0+128),w
  3957  0BE5  1903               	btfsc	3,2
  3958  0BE6  2C1E               	goto	l2255
  3959  0BE7  0812               	movf	18,w	;volatile
  3960  0BE8  00AF               	movwf	??_calculaVelocidade^(0+128)
  3961  0BE9  01B0               	clrf	(??_calculaVelocidade^(0+128)+1)
  3962  0BEA  082F               	movf	??_calculaVelocidade^(0+128),w
  3963  0BEB  00A0               	movwf	___awdiv@divisor^(0+128)
  3964  0BEC  0830               	movf	(??_calculaVelocidade+1)^(0+128),w
  3965  0BED  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  3966  0BEE  30DA               	movlw	218
  3967  0BEF  00A2               	movwf	___awdiv@dividend^(0+128)
  3968  0BF0  3010               	movlw	16
  3969  0BF1  00A3               	movwf	(___awdiv@dividend^(0+128)+1)
  3970  0BF2  120A  158A  2562  120A  158A  	fcall	___awdiv
  3971  0BF7  1683               	bsf	3,5	;RP0=1, select bank1
  3972  0BF8  1303               	bcf	3,6	;RP1=0, select bank1
  3973  0BF9  0821               	movf	(?___awdiv+1)^(0+128),w
  3974  0BFA  00AA               	movwf	(___wmul@multiplier+1)^(0+128)
  3975  0BFB  0820               	movf	?___awdiv^(0+128),w
  3976  0BFC  00A9               	movwf	___wmul@multiplier^(0+128)
  3977  0BFD  3064               	movlw	100
  3978  0BFE  00AB               	movwf	___wmul@multiplicand^(0+128)
  3979  0BFF  3000               	movlw	0
  3980  0C00  00AC               	movwf	(___wmul@multiplicand^(0+128)+1)
  3981  0C01  120A  118A  2015  120A  158A  	fcall	___wmul
  3982  0C06  1683               	bsf	3,5	;RP0=1, select bank1
  3983  0C07  1303               	bcf	3,6	;RP1=0, select bank1
  3984  0C08  082A               	movf	(?___wmul+1)^(0+128),w
  3985  0C09  00B2               	movwf	(_calculaVelocidade$991+1)^(0+128)
  3986  0C0A  0829               	movf	?___wmul^(0+128),w
  3987  0C0B  00B1               	movwf	_calculaVelocidade$991^(0+128)
  3988  0C0C  3051               	movlw	81
  3989  0C0D  00A0               	movwf	___awdiv@divisor^(0+128)
  3990  0C0E  3000               	movlw	0
  3991  0C0F  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
  3992  0C10  0832               	movf	(_calculaVelocidade$991+1)^(0+128),w
  3993  0C11  00A3               	movwf	(___awdiv@dividend+1)^(0+128)
  3994  0C12  0831               	movf	_calculaVelocidade$991^(0+128),w
  3995  0C13  00A2               	movwf	___awdiv@dividend^(0+128)
  3996  0C14  120A  158A  2562   	fcall	___awdiv
  3997  0C17  1683               	bsf	3,5	;RP0=1, select bank1
  3998  0C18  1303               	bcf	3,6	;RP1=0, select bank1
  3999  0C19  0821               	movf	(?___awdiv+1)^(0+128),w
  4000  0C1A  00DC               	movwf	(_speed+1)^(0+128)
  4001  0C1B  0820               	movf	?___awdiv^(0+128),w
  4002  0C1C  00DB               	movwf	_speed^(0+128)
  4003  0C1D  0008               	return
  4004  0C1E                     l2255:	
  4005  0C1E  01DB               	clrf	_speed^(0+128)
  4006  0C1F  01DC               	clrf	(_speed+1)^(0+128)
  4007  0C20  0008               	return
  4008  0C21                     __end_of_calculaVelocidade:	
  4009                           
  4010                           	psect	text20
  4011  0015                     __ptext20:	
  4012 ;; *************** function ___wmul *****************
  4013 ;; Defined at:
  4014 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  4015 ;; Parameters:    Size  Location     Type
  4016 ;;  multiplier      2    9[BANK1 ] unsigned int 
  4017 ;;  multiplicand    2   11[BANK1 ] unsigned int 
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;  product         2   13[BANK1 ] unsigned int 
  4020 ;; Return value:  Size  Location     Type
  4021 ;;                  2    9[BANK1 ] unsigned int 
  4022 ;; Registers used:
  4023 ;;		wreg, status,2, status,0
  4024 ;; Tracked objects:
  4025 ;;		On entry : 0/0
  4026 ;;		On exit  : 0/0
  4027 ;;		Unchanged: 0/0
  4028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4029 ;;      Params:         0       0       4       0       0
  4030 ;;      Locals:         0       0       2       0       0
  4031 ;;      Temps:          0       0       0       0       0
  4032 ;;      Totals:         0       0       6       0       0
  4033 ;;Total ram usage:        6 bytes
  4034 ;; Hardware stack levels used:    1
  4035 ;; Hardware stack levels required when called:    4
  4036 ;; This function calls:
  4037 ;;		Nothing
  4038 ;; This function is called by:
  4039 ;;		_calculaVelocidade
  4040 ;;		_int2char_
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           
  4045                           ;psect for function ___wmul
  4046  0015                     ___wmul:	
  4047                           
  4048                           ;incstack = 0
  4049                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4050  0015  1683               	bsf	3,5	;RP0=1, select bank1
  4051  0016  1303               	bcf	3,6	;RP1=0, select bank1
  4052  0017  01AD               	clrf	___wmul@product^(0+128)
  4053  0018  01AE               	clrf	(___wmul@product+1)^(0+128)
  4054  0019                     l1993:	
  4055  0019  1C29               	btfss	___wmul@multiplier^(0+128),0
  4056  001A  2821               	goto	l419
  4057  001B  082B               	movf	___wmul@multiplicand^(0+128),w
  4058  001C  07AD               	addwf	___wmul@product^(0+128),f
  4059  001D  1803               	skipnc
  4060  001E  0AAE               	incf	(___wmul@product+1)^(0+128),f
  4061  001F  082C               	movf	(___wmul@multiplicand+1)^(0+128),w
  4062  0020  07AE               	addwf	(___wmul@product+1)^(0+128),f
  4063  0021                     l419:	
  4064  0021  3001               	movlw	1
  4065  0022                     u2225:	
  4066  0022  1003               	clrc
  4067  0023  0DAB               	rlf	___wmul@multiplicand^(0+128),f
  4068  0024  0DAC               	rlf	(___wmul@multiplicand+1)^(0+128),f
  4069  0025  3EFF               	addlw	-1
  4070  0026  1D03               	skipz
  4071  0027  2822               	goto	u2225
  4072  0028  3001               	movlw	1
  4073  0029                     u2235:	
  4074  0029  1003               	clrc
  4075  002A  0CAA               	rrf	(___wmul@multiplier+1)^(0+128),f
  4076  002B  0CA9               	rrf	___wmul@multiplier^(0+128),f
  4077  002C  3EFF               	addlw	-1
  4078  002D  1D03               	skipz
  4079  002E  2829               	goto	u2235
  4080  002F  0829               	movf	___wmul@multiplier^(0+128),w
  4081  0030  042A               	iorwf	(___wmul@multiplier+1)^(0+128),w
  4082  0031  1D03               	btfss	3,2
  4083  0032  2819               	goto	l1993
  4084  0033  082E               	movf	(___wmul@product+1)^(0+128),w
  4085  0034  00AA               	movwf	(?___wmul+1)^(0+128)
  4086  0035  082D               	movf	___wmul@product^(0+128),w
  4087  0036  00A9               	movwf	?___wmul^(0+128)
  4088  0037  0008               	return
  4089  0038                     __end_of___wmul:	
  4090                           
  4091                           	psect	text21
  4092  0D62                     __ptext21:	
  4093 ;; *************** function ___awdiv *****************
  4094 ;; Defined at:
  4095 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4096 ;; Parameters:    Size  Location     Type
  4097 ;;  divisor         2    0[BANK1 ] int 
  4098 ;;  dividend        2    2[BANK1 ] int 
  4099 ;; Auto vars:     Size  Location     Type
  4100 ;;  quotient        2    7[BANK1 ] int 
  4101 ;;  sign            1    6[BANK1 ] unsigned char 
  4102 ;;  counter         1    5[BANK1 ] unsigned char 
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  2    0[BANK1 ] int 
  4105 ;; Registers used:
  4106 ;;		wreg, status,2, status,0
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4112 ;;      Params:         0       0       4       0       0
  4113 ;;      Locals:         0       0       4       0       0
  4114 ;;      Temps:          0       0       1       0       0
  4115 ;;      Totals:         0       0       9       0       0
  4116 ;;Total ram usage:        9 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    4
  4119 ;; This function calls:
  4120 ;;		Nothing
  4121 ;; This function is called by:
  4122 ;;		_calculaVelocidade
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           
  4127                           ;psect for function ___awdiv
  4128  0D62                     ___awdiv:	
  4129                           
  4130                           ;incstack = 0
  4131                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4132  0D62  1683               	bsf	3,5	;RP0=1, select bank1
  4133  0D63  1303               	bcf	3,6	;RP1=0, select bank1
  4134  0D64  01A6               	clrf	___awdiv@sign^(0+128)
  4135  0D65  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
  4136  0D66  2D6E               	goto	l2013
  4137  0D67  09A0               	comf	___awdiv@divisor^(0+128),f
  4138  0D68  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
  4139  0D69  0AA0               	incf	___awdiv@divisor^(0+128),f
  4140  0D6A  1903               	skipnz
  4141  0D6B  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
  4142  0D6C  01A6               	clrf	___awdiv@sign^(0+128)
  4143  0D6D  0AA6               	incf	___awdiv@sign^(0+128),f
  4144  0D6E                     l2013:	
  4145  0D6E  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
  4146  0D6F  2D79               	goto	l2019
  4147  0D70  09A2               	comf	___awdiv@dividend^(0+128),f
  4148  0D71  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
  4149  0D72  0AA2               	incf	___awdiv@dividend^(0+128),f
  4150  0D73  1903               	skipnz
  4151  0D74  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
  4152  0D75  3001               	movlw	1
  4153  0D76  00A4               	movwf	??___awdiv^(0+128)
  4154  0D77  0824               	movf	??___awdiv^(0+128),w
  4155  0D78  06A6               	xorwf	___awdiv@sign^(0+128),f
  4156  0D79                     l2019:	
  4157  0D79  01A7               	clrf	___awdiv@quotient^(0+128)
  4158  0D7A  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
  4159  0D7B  0820               	movf	___awdiv@divisor^(0+128),w
  4160  0D7C  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
  4161  0D7D  1903               	btfsc	3,2
  4162  0D7E  2DB0               	goto	l2041
  4163  0D7F  01A5               	clrf	___awdiv@counter^(0+128)
  4164  0D80  0AA5               	incf	___awdiv@counter^(0+128),f
  4165  0D81                     l2029:	
  4166  0D81  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
  4167  0D82  2D8F               	goto	l2031
  4168  0D83  3001               	movlw	1
  4169  0D84                     u2285:	
  4170  0D84  1003               	clrc
  4171  0D85  0DA0               	rlf	___awdiv@divisor^(0+128),f
  4172  0D86  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
  4173  0D87  3EFF               	addlw	-1
  4174  0D88  1D03               	skipz
  4175  0D89  2D84               	goto	u2285
  4176  0D8A  3001               	movlw	1
  4177  0D8B  00A4               	movwf	??___awdiv^(0+128)
  4178  0D8C  0824               	movf	??___awdiv^(0+128),w
  4179  0D8D  07A5               	addwf	___awdiv@counter^(0+128),f
  4180  0D8E  2D81               	goto	l2029
  4181  0D8F                     l2031:	
  4182  0D8F  3001               	movlw	1
  4183  0D90                     u2305:	
  4184  0D90  1003               	clrc
  4185  0D91  0DA7               	rlf	___awdiv@quotient^(0+128),f
  4186  0D92  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
  4187  0D93  3EFF               	addlw	-1
  4188  0D94  1D03               	skipz
  4189  0D95  2D90               	goto	u2305
  4190  0D96  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  4191  0D97  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
  4192  0D98  1D03               	skipz
  4193  0D99  2D9C               	goto	u2315
  4194  0D9A  0820               	movf	___awdiv@divisor^(0+128),w
  4195  0D9B  0222               	subwf	___awdiv@dividend^(0+128),w
  4196  0D9C                     u2315:	
  4197  0D9C  1C03               	skipc
  4198  0D9D  2DA5               	goto	l2037
  4199  0D9E  0820               	movf	___awdiv@divisor^(0+128),w
  4200  0D9F  02A2               	subwf	___awdiv@dividend^(0+128),f
  4201  0DA0  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  4202  0DA1  1C03               	skipc
  4203  0DA2  03A3               	decf	(___awdiv@dividend+1)^(0+128),f
  4204  0DA3  02A3               	subwf	(___awdiv@dividend+1)^(0+128),f
  4205  0DA4  1427               	bsf	___awdiv@quotient^(0+128),0
  4206  0DA5                     l2037:	
  4207  0DA5  3001               	movlw	1
  4208  0DA6                     u2325:	
  4209  0DA6  1003               	clrc
  4210  0DA7  0CA1               	rrf	(___awdiv@divisor+1)^(0+128),f
  4211  0DA8  0CA0               	rrf	___awdiv@divisor^(0+128),f
  4212  0DA9  3EFF               	addlw	-1
  4213  0DAA  1D03               	skipz
  4214  0DAB  2DA6               	goto	u2325
  4215  0DAC  3001               	movlw	1
  4216  0DAD  02A5               	subwf	___awdiv@counter^(0+128),f
  4217  0DAE  1D03               	btfss	3,2
  4218  0DAF  2D8F               	goto	l2031
  4219  0DB0                     l2041:	
  4220  0DB0  0826               	movf	___awdiv@sign^(0+128),w
  4221  0DB1  1903               	btfsc	3,2
  4222  0DB2  2DB8               	goto	l2045
  4223  0DB3  09A7               	comf	___awdiv@quotient^(0+128),f
  4224  0DB4  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
  4225  0DB5  0AA7               	incf	___awdiv@quotient^(0+128),f
  4226  0DB6  1903               	skipnz
  4227  0DB7  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
  4228  0DB8                     l2045:	
  4229  0DB8  0828               	movf	(___awdiv@quotient+1)^(0+128),w
  4230  0DB9  00A1               	movwf	(?___awdiv+1)^(0+128)
  4231  0DBA  0827               	movf	___awdiv@quotient^(0+128),w
  4232  0DBB  00A0               	movwf	?___awdiv^(0+128)
  4233  0DBC  0008               	return
  4234  0DBD                     __end_of___awdiv:	
  4235                           
  4236                           	psect	text22
  4237  0EF9                     __ptext22:	
  4238 ;; *************** function _LCD_sendString *****************
  4239 ;; Defined at:
  4240 ;;		line 141 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\lcd.c"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;  string          2   25[BANK1 ] PTR unsigned char 
  4243 ;;		 -> STR_3(5), STR_2(4), c_int_value_(5), STR_1(4), 
  4244 ;;  linha           1   27[BANK1 ] unsigned char 
  4245 ;;  coluna          1   28[BANK1 ] unsigned char 
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;  i               1   31[BANK1 ] unsigned char 
  4248 ;;  i               1   32[BANK1 ] unsigned char 
  4249 ;;  col             1   30[BANK1 ] unsigned char 
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      void 
  4252 ;; Registers used:
  4253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4259 ;;      Params:         0       0       4       0       0
  4260 ;;      Locals:         0       0       3       0       0
  4261 ;;      Temps:          0       0       1       0       0
  4262 ;;      Totals:         0       0       8       0       0
  4263 ;;Total ram usage:        8 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    7
  4266 ;; This function calls:
  4267 ;;		_LCD_SendByte
  4268 ;;		_LCD_SetCursor
  4269 ;; This function is called by:
  4270 ;;		_main
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           
  4275                           ;psect for function _LCD_sendString
  4276  0EF9                     _LCD_sendString:	
  4277                           
  4278                           ;lcd.c: 142: if(coluna == 0){
  4279                           
  4280                           ;incstack = 0
  4281 ;; using string table level
  4282                           ; Regs used in _LCD_sendString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4283  0EF9  1683               	bsf	3,5	;RP0=1, select bank1
  4284  0EFA  1303               	bcf	3,6	;RP1=0, select bank1
  4285  0EFB  083C               	movf	LCD_sendString@coluna^(0+128),w
  4286  0EFC  1D03               	btfss	3,2
  4287  0EFD  2F2C               	goto	l2301
  4288                           
  4289                           ;lcd.c: 143: for(uint8_t i = 0; i < 17; i++, coluna++){
  4290  0EFE  01BF               	clrf	LCD_sendString@i^(0+128)
  4291  0EFF  3011               	movlw	17
  4292  0F00  023F               	subwf	LCD_sendString@i^(0+128),w
  4293  0F01  1803               	btfsc	3,0
  4294  0F02  2F22               	goto	l2297
  4295  0F03                     l2289:	
  4296                           
  4297                           ;lcd.c: 144: if(string[i] == '\0') break;
  4298  0F03  083F               	movf	LCD_sendString@i^(0+128),w
  4299  0F04  0739               	addwf	LCD_sendString@string^(0+128),w
  4300  0F05  0084               	movwf	4
  4301  0F06  083A               	movf	(LCD_sendString@string+1)^(0+128),w
  4302  0F07  1803               	skipnc
  4303  0F08  0A3A               	incf	(LCD_sendString@string+1)^(0+128),w
  4304  0F09  1283               	bcf	3,5	;RP0=0, select bank0
  4305  0F0A  1303               	bcf	3,6	;RP1=0, select bank0
  4306  0F0B  00FF               	movwf	127
  4307  0F0C  120A  158A  2000  120A  158A  	fcall	stringtab
  4308  0F11  3A00               	xorlw	0
  4309  0F12  1903               	btfsc	3,2
  4310  0F13  2F22               	goto	l2297
  4311  0F14  3001               	movlw	1
  4312  0F15  1683               	bsf	3,5	;RP0=1, select bank1
  4313  0F16  1303               	bcf	3,6	;RP1=0, select bank1
  4314  0F17  00BD               	movwf	??_LCD_sendString^(0+128)
  4315  0F18  083D               	movf	??_LCD_sendString^(0+128),w
  4316  0F19  07BF               	addwf	LCD_sendString@i^(0+128),f
  4317  0F1A  3001               	movlw	1
  4318  0F1B  00BD               	movwf	??_LCD_sendString^(0+128)
  4319  0F1C  083D               	movf	??_LCD_sendString^(0+128),w
  4320  0F1D  07BC               	addwf	LCD_sendString@coluna^(0+128),f
  4321  0F1E  3011               	movlw	17
  4322  0F1F  023F               	subwf	LCD_sendString@i^(0+128),w
  4323  0F20  1C03               	skipc
  4324  0F21  2F03               	goto	l2289
  4325  0F22                     l2297:	
  4326                           
  4327                           ;lcd.c: 145: }
  4328                           ;lcd.c: 146: uint8_t col = 18 - coluna;
  4329  0F22  1683               	bsf	3,5	;RP0=1, select bank1
  4330  0F23  1303               	bcf	3,6	;RP1=0, select bank1
  4331  0F24  033C               	decf	LCD_sendString@coluna^(0+128),w
  4332  0F25  3AFF               	xorlw	255
  4333  0F26  3E12               	addlw	18
  4334  0F27  00BD               	movwf	??_LCD_sendString^(0+128)
  4335  0F28  083D               	movf	??_LCD_sendString^(0+128),w
  4336  0F29  00BE               	movwf	LCD_sendString@col^(0+128)
  4337                           
  4338                           ;lcd.c: 147: LCD_SetCursor(linha, col);
  4339  0F2A  083E               	movf	LCD_sendString@col^(0+128),w
  4340  0F2B  2F2F               	goto	L1
  4341  0F2C                     l2301:	
  4342                           ;lcd.c: 148: } else{
  4343                           
  4344                           
  4345                           ;lcd.c: 149: LCD_SetCursor(linha, coluna);
  4346  0F2C  1683               	bsf	3,5	;RP0=1, select bank1
  4347  0F2D  1303               	bcf	3,6	;RP1=0, select bank1
  4348  0F2E  083C               	movf	LCD_sendString@coluna^(0+128),w
  4349  0F2F                     L1:	
  4350  0F2F  00BD               	movwf	??_LCD_sendString^(0+128)
  4351  0F30  083D               	movf	??_LCD_sendString^(0+128),w
  4352  0F31  00B5               	movwf	LCD_SetCursor@coluna^(0+128)
  4353  0F32  083B               	movf	LCD_sendString@linha^(0+128),w
  4354  0F33  120A  158A  2240  120A  158A  	fcall	_LCD_SetCursor
  4355                           
  4356                           ;lcd.c: 150: }
  4357                           ;lcd.c: 152: for(uint8_t i = 0; i < 17; i++){
  4358  0F38  1683               	bsf	3,5	;RP0=1, select bank1
  4359  0F39  1303               	bcf	3,6	;RP1=0, select bank1
  4360  0F3A  01C0               	clrf	LCD_sendString@i_386^(0+128)
  4361  0F3B                     L2:	
  4362  0F3B  3011               	movlw	17
  4363  0F3C  0240               	subwf	LCD_sendString@i_386^(0+128),w
  4364  0F3D  1803               	btfsc	3,0
  4365  0F3E  0008               	return
  4366                           
  4367                           ;lcd.c: 153: if(string[i] == '\0') break;
  4368  0F3F  0840               	movf	LCD_sendString@i_386^(0+128),w
  4369  0F40  0739               	addwf	LCD_sendString@string^(0+128),w
  4370  0F41  0084               	movwf	4
  4371  0F42  083A               	movf	(LCD_sendString@string+1)^(0+128),w
  4372  0F43  1803               	skipnc
  4373  0F44  0A3A               	incf	(LCD_sendString@string+1)^(0+128),w
  4374  0F45  1283               	bcf	3,5	;RP0=0, select bank0
  4375  0F46  1303               	bcf	3,6	;RP1=0, select bank0
  4376  0F47  00FF               	movwf	127
  4377  0F48  120A  158A  2000  120A  158A  	fcall	stringtab
  4378  0F4D  3A00               	xorlw	0
  4379  0F4E  1903               	btfsc	3,2
  4380  0F4F  0008               	return
  4381                           
  4382                           ;lcd.c: 154: LCD_SendByte(1, string[i]);
  4383  0F50  1683               	bsf	3,5	;RP0=1, select bank1
  4384  0F51  1303               	bcf	3,6	;RP1=0, select bank1
  4385  0F52  0840               	movf	LCD_sendString@i_386^(0+128),w
  4386  0F53  0739               	addwf	LCD_sendString@string^(0+128),w
  4387  0F54  0084               	movwf	4
  4388  0F55  083A               	movf	(LCD_sendString@string+1)^(0+128),w
  4389  0F56  1803               	skipnc
  4390  0F57  0A3A               	incf	(LCD_sendString@string+1)^(0+128),w
  4391  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  4392  0F59  1303               	bcf	3,6	;RP1=0, select bank0
  4393  0F5A  00FF               	movwf	127
  4394  0F5B  120A  158A  2000  120A  158A  	fcall	stringtab
  4395  0F60  1683               	bsf	3,5	;RP0=1, select bank1
  4396  0F61  1303               	bcf	3,6	;RP1=0, select bank1
  4397  0F62  00BD               	movwf	??_LCD_sendString^(0+128)
  4398  0F63  083D               	movf	??_LCD_sendString^(0+128),w
  4399  0F64  00AD               	movwf	LCD_SendByte@byte^(0+128)
  4400  0F65  3001               	movlw	1
  4401  0F66  120A  158A  2421  120A  158A  	fcall	_LCD_SendByte
  4402  0F6B  3001               	movlw	1
  4403  0F6C  1683               	bsf	3,5	;RP0=1, select bank1
  4404  0F6D  1303               	bcf	3,6	;RP1=0, select bank1
  4405  0F6E  00BD               	movwf	??_LCD_sendString^(0+128)
  4406  0F6F  083D               	movf	??_LCD_sendString^(0+128),w
  4407  0F70  07C0               	addwf	LCD_sendString@i_386^(0+128),f
  4408  0F71  2F3B               	goto	L2
  4409  0F72                     __end_of_LCD_sendString:	
  4410                           
  4411                           	psect	text23
  4412  0A40                     __ptext23:	
  4413 ;; *************** function _LCD_SetCursor *****************
  4414 ;; Defined at:
  4415 ;;		line 121 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\lcd.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;  linha           1    wreg     unsigned char 
  4418 ;;  coluna          1   21[BANK1 ] unsigned char 
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;  linha           1   23[BANK1 ] unsigned char 
  4421 ;;  aux             1   24[BANK1 ] unsigned char 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  1    wreg      void 
  4424 ;; Registers used:
  4425 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4431 ;;      Params:         0       0       1       0       0
  4432 ;;      Locals:         0       0       2       0       0
  4433 ;;      Temps:          0       0       1       0       0
  4434 ;;      Totals:         0       0       4       0       0
  4435 ;;Total ram usage:        4 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; Hardware stack levels required when called:    6
  4438 ;; This function calls:
  4439 ;;		_LCD_SendByte
  4440 ;; This function is called by:
  4441 ;;		_LCD_sendString
  4442 ;;		_LCD_sendChar
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           
  4447                           ;psect for function _LCD_SetCursor
  4448  0A40                     _LCD_SetCursor:	
  4449                           
  4450                           ;incstack = 0
  4451                           ; Regs used in _LCD_SetCursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4452                           ;LCD_SetCursor@linha stored from wreg
  4453  0A40  1683               	bsf	3,5	;RP0=1, select bank1
  4454  0A41  1303               	bcf	3,6	;RP1=0, select bank1
  4455  0A42  00B7               	movwf	LCD_SetCursor@linha^(0+128)
  4456                           
  4457                           ;lcd.c: 122: uint8_t aux;
  4458                           ;lcd.c: 124: if(linha == 2)
  4459  0A43  3002               	movlw	2
  4460  0A44  0637               	xorwf	LCD_SetCursor@linha^(0+128),w
  4461  0A45  1D03               	btfss	3,2
  4462  0A46  2A4C               	goto	l1985
  4463                           
  4464                           ;lcd.c: 125: aux = 0x40;
  4465  0A47  3040               	movlw	64
  4466  0A48  00B6               	movwf	??_LCD_SetCursor^(0+128)
  4467  0A49  0836               	movf	??_LCD_SetCursor^(0+128),w
  4468  0A4A  00B8               	movwf	LCD_SetCursor@aux^(0+128)
  4469  0A4B  2A4D               	goto	l1987
  4470  0A4C                     l1985:	
  4471                           
  4472                           ;lcd.c: 126: else
  4473                           ;lcd.c: 127: aux = 0;
  4474  0A4C  01B8               	clrf	LCD_SetCursor@aux^(0+128)
  4475  0A4D                     l1987:	
  4476                           
  4477                           ;lcd.c: 129: aux += coluna - 1;
  4478  0A4D  0835               	movf	LCD_SetCursor@coluna^(0+128),w
  4479  0A4E  3EFF               	addlw	255
  4480  0A4F  00B6               	movwf	??_LCD_SetCursor^(0+128)
  4481  0A50  0836               	movf	??_LCD_SetCursor^(0+128),w
  4482  0A51  07B8               	addwf	LCD_SetCursor@aux^(0+128),f
  4483                           
  4484                           ;lcd.c: 131: LCD_SendByte(0, 0x80 | aux);
  4485  0A52  0838               	movf	LCD_SetCursor@aux^(0+128),w
  4486  0A53  3880               	iorlw	128
  4487  0A54  00B6               	movwf	??_LCD_SetCursor^(0+128)
  4488  0A55  0836               	movf	??_LCD_SetCursor^(0+128),w
  4489  0A56  00AD               	movwf	LCD_SendByte@byte^(0+128)
  4490  0A57  3000               	movlw	0
  4491  0A58  120A  158A  2421   	fcall	_LCD_SendByte
  4492  0A5B  0008               	return
  4493  0A5C                     __end_of_LCD_SetCursor:	
  4494                           
  4495                           	psect	text24
  4496  0C21                     __ptext24:	
  4497 ;; *************** function _LCD_SendByte *****************
  4498 ;; Defined at:
  4499 ;;		line 111 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\lcd.c"
  4500 ;; Parameters:    Size  Location     Type
  4501 ;;  reg             1    wreg     unsigned char 
  4502 ;;  byte            1   13[BANK1 ] unsigned char 
  4503 ;; Auto vars:     Size  Location     Type
  4504 ;;  reg             1   18[BANK1 ] unsigned char 
  4505 ;; Return value:  Size  Location     Type
  4506 ;;                  1    wreg      void 
  4507 ;; Registers used:
  4508 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/0
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4514 ;;      Params:         0       0       1       0       0
  4515 ;;      Locals:         0       0       3       0       0
  4516 ;;      Temps:          0       0       4       0       0
  4517 ;;      Totals:         0       0       8       0       0
  4518 ;;Total ram usage:        8 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; Hardware stack levels required when called:    5
  4521 ;; This function calls:
  4522 ;;		_LCD_SendNb
  4523 ;; This function is called by:
  4524 ;;		_LCD_Setup
  4525 ;;		_LCD_SetCursor
  4526 ;;		_LCD_sendString
  4527 ;;		_LCD_ClearDisplay
  4528 ;;		_LCD_Home
  4529 ;;		_LCD_DisplayOn
  4530 ;;		_LCD_DisplayOff
  4531 ;;		_LCD_CursorOn
  4532 ;;		_LCD_CursorOff
  4533 ;;		_LCD_DisplayRight
  4534 ;;		_LCD_DisplayLeft
  4535 ;;		_LCD_sendChar
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           
  4540                           ;psect for function _LCD_SendByte
  4541  0C21                     _LCD_SendByte:	
  4542                           
  4543                           ;incstack = 0
  4544                           ; Regs used in _LCD_SendByte: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4545                           ;LCD_SendByte@reg stored from wreg
  4546  0C21  1683               	bsf	3,5	;RP0=1, select bank1
  4547  0C22  1303               	bcf	3,6	;RP1=0, select bank1
  4548  0C23  00B2               	movwf	LCD_SendByte@reg^(0+128)
  4549                           
  4550                           ;lcd.c: 112: *LCD_PORT = reg ? (*LCD_PORT | (1 << 4)) : (*LCD_PORT & ~(1 << 4));
  4551  0C24  0832               	movf	LCD_SendByte@reg^(0+128),w
  4552  0C25  1D03               	btfss	3,2
  4553  0C26  2C37               	goto	l1749
  4554  0C27  086D               	movf	_LCD_PORT^(0+128),w
  4555  0C28  0084               	movwf	4
  4556  0C29  1783               	bsf	3,7
  4557  0C2A  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  4558  0C2B  1383               	bcf	3,7
  4559  0C2C  0800               	movf	0,w
  4560  0C2D  00AE               	movwf	??_LCD_SendByte^(0+128)
  4561  0C2E  0A84               	incf	4,f
  4562  0C2F  0800               	movf	0,w
  4563  0C30  00AF               	movwf	(??_LCD_SendByte^(0+128)+1)
  4564  0C31  30EF               	movlw	239
  4565  0C32  052E               	andwf	??_LCD_SendByte^(0+128),w
  4566  0C33  00B0               	movwf	(??_LCD_SendByte+2)^(0+128)
  4567  0C34  30FF               	movlw	255
  4568  0C35  052F               	andwf	(??_LCD_SendByte+1)^(0+128),w
  4569  0C36  2C46               	goto	L3
  4570  0C37                     l1749:	
  4571  0C37  086D               	movf	_LCD_PORT^(0+128),w
  4572  0C38  0084               	movwf	4
  4573  0C39  1783               	bsf	3,7
  4574  0C3A  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  4575  0C3B  1383               	bcf	3,7
  4576  0C3C  0800               	movf	0,w
  4577  0C3D  00AE               	movwf	??_LCD_SendByte^(0+128)
  4578  0C3E  0A84               	incf	4,f
  4579  0C3F  0800               	movf	0,w
  4580  0C40  00AF               	movwf	(??_LCD_SendByte^(0+128)+1)
  4581  0C41  3010               	movlw	16
  4582  0C42  042E               	iorwf	??_LCD_SendByte^(0+128),w
  4583  0C43  00B0               	movwf	(??_LCD_SendByte+2)^(0+128)
  4584  0C44  3000               	movlw	0
  4585  0C45  042F               	iorwf	(??_LCD_SendByte+1)^(0+128),w
  4586  0C46                     L3:	
  4587  0C46  00B1               	movwf	(??_LCD_SendByte+3)^(0+128)
  4588  0C47  0830               	movf	(??_LCD_SendByte+2)^(0+128),w
  4589  0C48  00B3               	movwf	_LCD_SendByte$370^(0+128)	;volatile
  4590  0C49  0831               	movf	(??_LCD_SendByte+3)^(0+128),w
  4591  0C4A  00B4               	movwf	(_LCD_SendByte$370+1)^(0+128)	;volatile
  4592  0C4B  086D               	movf	_LCD_PORT^(0+128),w
  4593  0C4C  0084               	movwf	4
  4594  0C4D  1783               	bsf	3,7
  4595  0C4E  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  4596  0C4F  1383               	bcf	3,7
  4597  0C50  0833               	movf	_LCD_SendByte$370^(0+128),w	;volatile
  4598  0C51  0080               	movwf	0
  4599  0C52  0A84               	incf	4,f
  4600  0C53  0834               	movf	(_LCD_SendByte$370+1)^(0+128),w	;volatile
  4601  0C54  0080               	movwf	0
  4602                           
  4603                           ;lcd.c: 116: LCD_SendNb(byte >> 4);
  4604  0C55  082D               	movf	LCD_SendByte@byte^(0+128),w
  4605  0C56  00AE               	movwf	??_LCD_SendByte^(0+128)
  4606  0C57  3004               	movlw	4
  4607  0C58                     u1785:	
  4608  0C58  1003               	clrc
  4609  0C59  0CAE               	rrf	??_LCD_SendByte^(0+128),f
  4610  0C5A  3EFF               	addlw	-1
  4611  0C5B  1D03               	skipz
  4612  0C5C  2C58               	goto	u1785
  4613  0C5D  082E               	movf	??_LCD_SendByte^(0+128),w
  4614  0C5E  120A  118A  2426  120A  158A  	fcall	_LCD_SendNb
  4615                           
  4616                           ;lcd.c: 117: LCD_SendNb(byte & 0x0f);
  4617  0C63  1683               	bsf	3,5	;RP0=1, select bank1
  4618  0C64  1303               	bcf	3,6	;RP1=0, select bank1
  4619  0C65  082D               	movf	LCD_SendByte@byte^(0+128),w
  4620  0C66  390F               	andlw	15
  4621  0C67  120A  118A  2426   	fcall	_LCD_SendNb
  4622  0C6A  0008               	return
  4623  0C6B                     __end_of_LCD_SendByte:	
  4624                           
  4625                           	psect	text25
  4626  0426                     __ptext25:	
  4627 ;; *************** function _LCD_SendNb *****************
  4628 ;; Defined at:
  4629 ;;		line 96 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\lcd.c"
  4630 ;; Parameters:    Size  Location     Type
  4631 ;;  NB              1    wreg     unsigned char 
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;  NB              1   12[BANK1 ] unsigned char 
  4634 ;; Return value:  Size  Location     Type
  4635 ;;                  1    wreg      void 
  4636 ;; Registers used:
  4637 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4638 ;; Tracked objects:
  4639 ;;		On entry : 0/0
  4640 ;;		On exit  : 0/0
  4641 ;;		Unchanged: 0/0
  4642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4643 ;;      Params:         0       0       0       0       0
  4644 ;;      Locals:         0       0       9       0       0
  4645 ;;      Temps:          0       0       4       0       0
  4646 ;;      Totals:         0       0      13       0       0
  4647 ;;Total ram usage:       13 bytes
  4648 ;; Hardware stack levels used:    1
  4649 ;; Hardware stack levels required when called:    4
  4650 ;; This function calls:
  4651 ;;		Nothing
  4652 ;; This function is called by:
  4653 ;;		_LCD_Setup
  4654 ;;		_LCD_SendByte
  4655 ;; This function uses a non-reentrant model
  4656 ;;
  4657                           
  4658                           
  4659                           ;psect for function _LCD_SendNb
  4660  0426                     _LCD_SendNb:	
  4661                           
  4662                           ;incstack = 0
  4663                           ; Regs used in _LCD_SendNb: [wreg-fsr0h+status,2+status,0]
  4664                           ;LCD_SendNb@NB stored from wreg
  4665  0426  1683               	bsf	3,5	;RP0=1, select bank1
  4666  0427  1303               	bcf	3,6	;RP1=0, select bank1
  4667  0428  00AC               	movwf	LCD_SendNb@NB^(0+128)
  4668                           
  4669                           ;lcd.c: 99: *LCD_PORT = (unsigned)((NB & 0b00000001) >> 0) ? (*LCD_PORT | (1 << 0)) : (*
      +                          LCD_PORT & ~(1 << 0));
  4670  0429  182C               	btfsc	LCD_SendNb@NB^(0+128),0
  4671  042A  2C3B               	goto	l1685
  4672  042B  086D               	movf	_LCD_PORT^(0+128),w
  4673  042C  0084               	movwf	4
  4674  042D  1783               	bsf	3,7
  4675  042E  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  4676  042F  1383               	bcf	3,7
  4677  0430  0800               	movf	0,w
  4678  0431  00A0               	movwf	??_LCD_SendNb^(0+128)
  4679  0432  0A84               	incf	4,f
  4680  0433  0800               	movf	0,w
  4681  0434  00A1               	movwf	(??_LCD_SendNb^(0+128)+1)
  4682  0435  30FE               	movlw	254
  4683  0436  0520               	andwf	??_LCD_SendNb^(0+128),w
  4684  0437  00A2               	movwf	(??_LCD_SendNb+2)^(0+128)
  4685  0438  30FF               	movlw	255
  4686  0439  0521               	andwf	(??_LCD_SendNb+1)^(0+128),w
  4687  043A  2C4A               	goto	L4
  4688  043B                     l1685:	
  4689  043B  086D               	movf	_LCD_PORT^(0+128),w
  4690  043C  0084               	movwf	4
  4691  043D  1783               	bsf	3,7
  4692  043E  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  4693  043F  1383               	bcf	3,7
  4694  0440  0800               	movf	0,w
  4695  0441  00A0               	movwf	??_LCD_SendNb^(0+128)
  4696  0442  0A84               	incf	4,f
  4697  0443  0800               	movf	0,w
  4698  0444  00A1               	movwf	(??_LCD_SendNb^(0+128)+1)
  4699  0445  3001               	movlw	1
  4700  0446  0420               	iorwf	??_LCD_SendNb^(0+128),w
  4701  0447  00A2               	movwf	(??_LCD_SendNb+2)^(0+128)
  4702  0448  3000               	movlw	0
  4703  0449  0421               	iorwf	(??_LCD_SendNb+1)^(0+128),w
  4704  044A                     L4:	
  4705  044A  00A3               	movwf	(??_LCD_SendNb+3)^(0+128)
  4706  044B  0822               	movf	(??_LCD_SendNb+2)^(0+128),w
  4707  044C  00A4               	movwf	_LCD_SendNb$363^(0+128)	;volatile
  4708  044D  0823               	movf	(??_LCD_SendNb+3)^(0+128),w
  4709  044E  00A5               	movwf	(_LCD_SendNb$363+1)^(0+128)	;volatile
  4710  044F  086D               	movf	_LCD_PORT^(0+128),w
  4711  0450  0084               	movwf	4
  4712  0451  1783               	bsf	3,7
  4713  0452  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  4714  0453  1383               	bcf	3,7
  4715  0454  0824               	movf	_LCD_SendNb$363^(0+128),w	;volatile
  4716  0455  0080               	movwf	0
  4717  0456  0A84               	incf	4,f
  4718  0457  0825               	movf	(_LCD_SendNb$363+1)^(0+128),w	;volatile
  4719  0458  0080               	movwf	0
  4720                           
  4721                           ;lcd.c: 100: *LCD_PORT = (unsigned)((NB & 0b00000010) >> 1) ? (*LCD_PORT | (1 << 1)) : (
      +                          *LCD_PORT & ~(1 << 1));
  4722  0459  082C               	movf	LCD_SendNb@NB^(0+128),w
  4723  045A  00A0               	movwf	??_LCD_SendNb^(0+128)
  4724  045B  3001               	movlw	1
  4725  045C                     u1595:	
  4726  045C  1003               	clrc
  4727  045D  0CA0               	rrf	??_LCD_SendNb^(0+128),f
  4728  045E  3EFF               	addlw	-1
  4729  045F  1D03               	skipz
  4730  0460  2C5C               	goto	u1595
  4731  0461  1820               	btfsc	??_LCD_SendNb^(0+128),0
  4732  0462  2C73               	goto	l1691
  4733  0463  086D               	movf	_LCD_PORT^(0+128),w
  4734  0464  0084               	movwf	4
  4735  0465  1783               	bsf	3,7
  4736  0466  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  4737  0467  1383               	bcf	3,7
  4738  0468  0800               	movf	0,w
  4739  0469  00A0               	movwf	??_LCD_SendNb^(0+128)
  4740  046A  0A84               	incf	4,f
  4741  046B  0800               	movf	0,w
  4742  046C  00A1               	movwf	(??_LCD_SendNb^(0+128)+1)
  4743  046D  30FD               	movlw	253
  4744  046E  0520               	andwf	??_LCD_SendNb^(0+128),w
  4745  046F  00A2               	movwf	(??_LCD_SendNb+2)^(0+128)
  4746  0470  30FF               	movlw	255
  4747  0471  0521               	andwf	(??_LCD_SendNb+1)^(0+128),w
  4748  0472  2C82               	goto	L5
  4749  0473                     l1691:	
  4750  0473  086D               	movf	_LCD_PORT^(0+128),w
  4751  0474  0084               	movwf	4
  4752  0475  1783               	bsf	3,7
  4753  0476  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  4754  0477  1383               	bcf	3,7
  4755  0478  0800               	movf	0,w
  4756  0479  00A0               	movwf	??_LCD_SendNb^(0+128)
  4757  047A  0A84               	incf	4,f
  4758  047B  0800               	movf	0,w
  4759  047C  00A1               	movwf	(??_LCD_SendNb^(0+128)+1)
  4760  047D  3002               	movlw	2
  4761  047E  0420               	iorwf	??_LCD_SendNb^(0+128),w
  4762  047F  00A2               	movwf	(??_LCD_SendNb+2)^(0+128)
  4763  0480  3000               	movlw	0
  4764  0481  0421               	iorwf	(??_LCD_SendNb+1)^(0+128),w
  4765  0482                     L5:	
  4766  0482  00A3               	movwf	(??_LCD_SendNb+3)^(0+128)
  4767  0483  0822               	movf	(??_LCD_SendNb+2)^(0+128),w
  4768  0484  00A6               	movwf	_LCD_SendNb$364^(0+128)	;volatile
  4769  0485  0823               	movf	(??_LCD_SendNb+3)^(0+128),w
  4770  0486  00A7               	movwf	(_LCD_SendNb$364+1)^(0+128)	;volatile
  4771  0487  086D               	movf	_LCD_PORT^(0+128),w
  4772  0488  0084               	movwf	4
  4773  0489  1783               	bsf	3,7
  4774  048A  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  4775  048B  1383               	bcf	3,7
  4776  048C  0826               	movf	_LCD_SendNb$364^(0+128),w	;volatile
  4777  048D  0080               	movwf	0
  4778  048E  0A84               	incf	4,f
  4779  048F  0827               	movf	(_LCD_SendNb$364+1)^(0+128),w	;volatile
  4780  0490  0080               	movwf	0
  4781                           
  4782                           ;lcd.c: 101: *LCD_PORT = (unsigned)((NB & 0b00000100) >> 2) ? (*LCD_PORT | (1 << 2)) : (
      +                          *LCD_PORT & ~(1 << 2));
  4783  0491  082C               	movf	LCD_SendNb@NB^(0+128),w
  4784  0492  00A0               	movwf	??_LCD_SendNb^(0+128)
  4785  0493  3002               	movlw	2
  4786  0494                     u1615:	
  4787  0494  1003               	clrc
  4788  0495  0CA0               	rrf	??_LCD_SendNb^(0+128),f
  4789  0496  3EFF               	addlw	-1
  4790  0497  1D03               	skipz
  4791  0498  2C94               	goto	u1615
  4792  0499  1820               	btfsc	??_LCD_SendNb^(0+128),0
  4793  049A  2CAB               	goto	l1697
  4794  049B  086D               	movf	_LCD_PORT^(0+128),w
  4795  049C  0084               	movwf	4
  4796  049D  1783               	bsf	3,7
  4797  049E  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  4798  049F  1383               	bcf	3,7
  4799  04A0  0800               	movf	0,w
  4800  04A1  00A0               	movwf	??_LCD_SendNb^(0+128)
  4801  04A2  0A84               	incf	4,f
  4802  04A3  0800               	movf	0,w
  4803  04A4  00A1               	movwf	(??_LCD_SendNb^(0+128)+1)
  4804  04A5  30FB               	movlw	251
  4805  04A6  0520               	andwf	??_LCD_SendNb^(0+128),w
  4806  04A7  00A2               	movwf	(??_LCD_SendNb+2)^(0+128)
  4807  04A8  30FF               	movlw	255
  4808  04A9  0521               	andwf	(??_LCD_SendNb+1)^(0+128),w
  4809  04AA  2CBA               	goto	L6
  4810  04AB                     l1697:	
  4811  04AB  086D               	movf	_LCD_PORT^(0+128),w
  4812  04AC  0084               	movwf	4
  4813  04AD  1783               	bsf	3,7
  4814  04AE  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  4815  04AF  1383               	bcf	3,7
  4816  04B0  0800               	movf	0,w
  4817  04B1  00A0               	movwf	??_LCD_SendNb^(0+128)
  4818  04B2  0A84               	incf	4,f
  4819  04B3  0800               	movf	0,w
  4820  04B4  00A1               	movwf	(??_LCD_SendNb^(0+128)+1)
  4821  04B5  3004               	movlw	4
  4822  04B6  0420               	iorwf	??_LCD_SendNb^(0+128),w
  4823  04B7  00A2               	movwf	(??_LCD_SendNb+2)^(0+128)
  4824  04B8  3000               	movlw	0
  4825  04B9  0421               	iorwf	(??_LCD_SendNb+1)^(0+128),w
  4826  04BA                     L6:	
  4827  04BA  00A3               	movwf	(??_LCD_SendNb+3)^(0+128)
  4828  04BB  0822               	movf	(??_LCD_SendNb+2)^(0+128),w
  4829  04BC  00A8               	movwf	_LCD_SendNb$365^(0+128)	;volatile
  4830  04BD  0823               	movf	(??_LCD_SendNb+3)^(0+128),w
  4831  04BE  00A9               	movwf	(_LCD_SendNb$365+1)^(0+128)	;volatile
  4832  04BF  086D               	movf	_LCD_PORT^(0+128),w
  4833  04C0  0084               	movwf	4
  4834  04C1  1783               	bsf	3,7
  4835  04C2  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  4836  04C3  1383               	bcf	3,7
  4837  04C4  0828               	movf	_LCD_SendNb$365^(0+128),w	;volatile
  4838  04C5  0080               	movwf	0
  4839  04C6  0A84               	incf	4,f
  4840  04C7  0829               	movf	(_LCD_SendNb$365+1)^(0+128),w	;volatile
  4841  04C8  0080               	movwf	0
  4842                           
  4843                           ;lcd.c: 102: *LCD_PORT = (unsigned)((NB & 0b00001000) >> 3) ? (*LCD_PORT | (1 << 3)) : (
      +                          *LCD_PORT & ~(1 << 3));
  4844  04C9  082C               	movf	LCD_SendNb@NB^(0+128),w
  4845  04CA  00A0               	movwf	??_LCD_SendNb^(0+128)
  4846  04CB  3003               	movlw	3
  4847  04CC                     u1635:	
  4848  04CC  1003               	clrc
  4849  04CD  0CA0               	rrf	??_LCD_SendNb^(0+128),f
  4850  04CE  3EFF               	addlw	-1
  4851  04CF  1D03               	skipz
  4852  04D0  2CCC               	goto	u1635
  4853  04D1  1820               	btfsc	??_LCD_SendNb^(0+128),0
  4854  04D2  2CE3               	goto	l1703
  4855  04D3  086D               	movf	_LCD_PORT^(0+128),w
  4856  04D4  0084               	movwf	4
  4857  04D5  1783               	bsf	3,7
  4858  04D6  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  4859  04D7  1383               	bcf	3,7
  4860  04D8  0800               	movf	0,w
  4861  04D9  00A0               	movwf	??_LCD_SendNb^(0+128)
  4862  04DA  0A84               	incf	4,f
  4863  04DB  0800               	movf	0,w
  4864  04DC  00A1               	movwf	(??_LCD_SendNb^(0+128)+1)
  4865  04DD  30F7               	movlw	247
  4866  04DE  0520               	andwf	??_LCD_SendNb^(0+128),w
  4867  04DF  00A2               	movwf	(??_LCD_SendNb+2)^(0+128)
  4868  04E0  30FF               	movlw	255
  4869  04E1  0521               	andwf	(??_LCD_SendNb+1)^(0+128),w
  4870  04E2  2CF2               	goto	L7
  4871  04E3                     l1703:	
  4872  04E3  086D               	movf	_LCD_PORT^(0+128),w
  4873  04E4  0084               	movwf	4
  4874  04E5  1783               	bsf	3,7
  4875  04E6  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  4876  04E7  1383               	bcf	3,7
  4877  04E8  0800               	movf	0,w
  4878  04E9  00A0               	movwf	??_LCD_SendNb^(0+128)
  4879  04EA  0A84               	incf	4,f
  4880  04EB  0800               	movf	0,w
  4881  04EC  00A1               	movwf	(??_LCD_SendNb^(0+128)+1)
  4882  04ED  3008               	movlw	8
  4883  04EE  0420               	iorwf	??_LCD_SendNb^(0+128),w
  4884  04EF  00A2               	movwf	(??_LCD_SendNb+2)^(0+128)
  4885  04F0  3000               	movlw	0
  4886  04F1  0421               	iorwf	(??_LCD_SendNb+1)^(0+128),w
  4887  04F2                     L7:	
  4888  04F2  00A3               	movwf	(??_LCD_SendNb+3)^(0+128)
  4889  04F3  0822               	movf	(??_LCD_SendNb+2)^(0+128),w
  4890  04F4  00AA               	movwf	_LCD_SendNb$366^(0+128)	;volatile
  4891  04F5  0823               	movf	(??_LCD_SendNb+3)^(0+128),w
  4892  04F6  00AB               	movwf	(_LCD_SendNb$366+1)^(0+128)	;volatile
  4893  04F7  086D               	movf	_LCD_PORT^(0+128),w
  4894  04F8  0084               	movwf	4
  4895  04F9  1783               	bsf	3,7
  4896  04FA  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  4897  04FB  1383               	bcf	3,7
  4898  04FC  082A               	movf	_LCD_SendNb$366^(0+128),w	;volatile
  4899  04FD  0080               	movwf	0
  4900  04FE  0A84               	incf	4,f
  4901  04FF  082B               	movf	(_LCD_SendNb$366+1)^(0+128),w	;volatile
  4902  0500  0080               	movwf	0
  4903                           
  4904                           ;lcd.c: 104: *LCD_PORT |= 1 << 5;
  4905  0501  086D               	movf	_LCD_PORT^(0+128),w
  4906  0502  0084               	movwf	4
  4907  0503  1783               	bsf	3,7
  4908  0504  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  4909  0505  1383               	bcf	3,7
  4910  0506  3020               	movlw	32
  4911  0507  0480               	iorwf	0,f
  4912  0508  0A84               	incf	4,f
  4913  0509  3000               	movlw	0
  4914  050A  0480               	iorwf	0,f
  4915                           
  4916                           ;lcd.c: 105: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4917  050B  0000               	nop
  4918                           
  4919                           ;lcd.c: 106: *LCD_PORT &= ~(1 << 5);
  4920  050C  1683               	bsf	3,5	;RP0=1, select bank1
  4921  050D  1303               	bcf	3,6	;RP1=0, select bank1
  4922  050E  086D               	movf	_LCD_PORT^(0+128),w
  4923  050F  0084               	movwf	4
  4924  0510  1783               	bsf	3,7
  4925  0511  1C6E               	btfss	(_LCD_PORT+1)^(0+128),0
  4926  0512  1383               	bcf	3,7
  4927  0513  30DF               	movlw	223
  4928  0514  0580               	andwf	0,f
  4929  0515  0A84               	incf	4,f
  4930  0516  30FF               	movlw	255
  4931  0517  0580               	andwf	0,f
  4932                           
  4933                           ;lcd.c: 107: _delay((unsigned long)((50)*(4000000/4000000.0)));
  4934  0518  300F               	movlw	15
  4935  0519  1683               	bsf	3,5	;RP0=1, select bank1
  4936  051A  1303               	bcf	3,6	;RP1=0, select bank1
  4937  051B  00A0               	movwf	??_LCD_SendNb^(0+128)
  4938  051C                     u3187:	
  4939  051C  0BA0               	decfsz	??_LCD_SendNb^(0+128),f
  4940  051D  2D1C               	goto	u3187
  4941  051E  2D1F               	nop2
  4942  051F  0008               	return
  4943  0520                     __end_of_LCD_SendNb:	
  4944                           
  4945                           	psect	text26
  4946  0520                     __ptext26:	
  4947 ;; *************** function _ISR *****************
  4948 ;; Defined at:
  4949 ;;		line 19 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\main.c"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;		None
  4952 ;; Auto vars:     Size  Location     Type
  4953 ;;  dado            1   47[BANK0 ] unsigned char 
  4954 ;; Return value:  Size  Location     Type
  4955 ;;                  1    wreg      void 
  4956 ;; Registers used:
  4957 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4958 ;; Tracked objects:
  4959 ;;		On entry : 0/0
  4960 ;;		On exit  : 0/0
  4961 ;;		Unchanged: 0/0
  4962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4963 ;;      Params:         0       0       0       0       0
  4964 ;;      Locals:         0       9       0       0       0
  4965 ;;      Temps:          0       7       0       0       0
  4966 ;;      Totals:         0      16       0       0       0
  4967 ;;Total ram usage:       16 bytes
  4968 ;; Hardware stack levels used:    1
  4969 ;; Hardware stack levels required when called:    3
  4970 ;; This function calls:
  4971 ;;		_calculaErro
  4972 ;;		_char2int_
  4973 ;;		_getChar_
  4974 ;;		i1_setPosicaoDesejada
  4975 ;; This function is called by:
  4976 ;;		Interrupt level 1
  4977 ;; This function uses a non-reentrant model
  4978 ;;
  4979                           
  4980                           
  4981                           ;psect for function _ISR
  4982  0520                     _ISR:	
  4983                           
  4984                           ;main.c: 21: if(PIR1bits.TMR2IF == 1){
  4985  0520  1C8C               	btfss	12,1	;volatile
  4986  0521  2E10               	goto	i1l2417
  4987                           
  4988                           ;main.c: 22: calculaErro();
  4989  0522  120A  158A  24B9  120A  118A  	fcall	_calculaErro
  4990                           
  4991                           ;main.c: 24: if(speed_ramp <= 100 && error !=0){
  4992  0527  3065               	movlw	101
  4993  0528  1283               	bcf	3,5	;RP0=0, select bank0
  4994  0529  1303               	bcf	3,6	;RP1=0, select bank0
  4995  052A  025D               	subwf	_speed_ramp,w
  4996  052B  1803               	skipnc
  4997  052C  2D3B               	goto	i1l133
  4998  052D  1683               	bsf	3,5	;RP0=1, select bank1
  4999  052E  1303               	bcf	3,6	;RP1=0, select bank1
  5000  052F  085D               	movf	_error^(0+128),w
  5001  0530  045E               	iorwf	(_error+1)^(0+128),w
  5002  0531  1903               	btfsc	3,2
  5003  0532  2D3B               	goto	i1l133
  5004                           
  5005                           ;main.c: 25: PR2-= 2;
  5006  0533  3002               	movlw	2
  5007  0534  0292               	subwf	18,f	;volatile
  5008                           
  5009                           ;main.c: 26: speed_ramp++;
  5010  0535  3001               	movlw	1
  5011  0536  1283               	bcf	3,5	;RP0=0, select bank0
  5012  0537  1303               	bcf	3,6	;RP1=0, select bank0
  5013  0538  00C0               	movwf	??_ISR
  5014  0539  0840               	movf	??_ISR,w
  5015  053A  07DD               	addwf	_speed_ramp,f
  5016  053B                     i1l133:	
  5017                           
  5018                           ;main.c: 27: }
  5019                           ;main.c: 29: if(error == 0){
  5020  053B  1683               	bsf	3,5	;RP0=1, select bank1
  5021  053C  1303               	bcf	3,6	;RP1=0, select bank1
  5022  053D  085D               	movf	_error^(0+128),w
  5023  053E  045E               	iorwf	(_error+1)^(0+128),w
  5024  053F  1D03               	btfss	3,2
  5025  0540  2D48               	goto	i1l2367
  5026                           
  5027                           ;main.c: 30: speed_ramp=0;
  5028  0541  1283               	bcf	3,5	;RP0=0, select bank0
  5029  0542  1303               	bcf	3,6	;RP1=0, select bank0
  5030  0543  01DD               	clrf	_speed_ramp
  5031                           
  5032                           ;main.c: 31: PR2 = 255;
  5033  0544  30FF               	movlw	255
  5034  0545  1683               	bsf	3,5	;RP0=1, select bank1
  5035  0546  1303               	bcf	3,6	;RP1=0, select bank1
  5036  0547  0092               	movwf	18	;volatile
  5037  0548                     i1l2367:	
  5038                           
  5039                           ;main.c: 32: }
  5040                           ;main.c: 34: if(error > 0){
  5041  0548  085E               	movf	(_error+1)^(0+128),w
  5042  0549  3A80               	xorlw	128
  5043  054A  00FF               	movwf	127
  5044  054B  3080               	movlw	128
  5045  054C  027F               	subwf	127,w
  5046  054D  1D03               	skipz
  5047  054E  2D51               	goto	u295_25
  5048  054F  3001               	movlw	1
  5049  0550  025D               	subwf	_error^(0+128),w
  5050  0551                     u295_25:	
  5051  0551  1C03               	skipc
  5052  0552  2DAB               	goto	i1l2391
  5053                           
  5054                           ;main.c: 35: STATUSbits.C = 0;
  5055  0553  1283               	bcf	3,5	;RP0=0, select bank0
  5056  0554  1303               	bcf	3,6	;RP1=0, select bank0
  5057  0555  1003               	bcf	3,0	;volatile
  5058                           
  5059                           ;main.c: 36: phase = (phase == 0) ? 1 : phase;
  5060  0556  085E               	movf	_phase,w
  5061  0557  1903               	btfsc	3,2
  5062  0558  2D60               	goto	i1l2375
  5063  0559  085E               	movf	_phase,w
  5064  055A  00C0               	movwf	??_ISR
  5065  055B  01C1               	clrf	??_ISR+1
  5066  055C  0840               	movf	??_ISR,w
  5067  055D  00C7               	movwf	_ISR$287
  5068  055E  0841               	movf	??_ISR+1,w
  5069  055F  2D63               	goto	L8
  5070  0560                     i1l2375:	
  5071  0560  3001               	movlw	1
  5072  0561  00C7               	movwf	_ISR$287
  5073  0562  3000               	movlw	0
  5074  0563                     L8:	
  5075  0563  00C8               	movwf	_ISR$287+1
  5076  0564  0847               	movf	_ISR$287,w
  5077  0565  00C0               	movwf	??_ISR
  5078  0566  0840               	movf	??_ISR,w
  5079  0567  00DE               	movwf	_phase
  5080                           
  5081                           ;main.c: 37: phase = (phase == 8) ? phase >> 3 : phase << 1;
  5082  0568  3008               	movlw	8
  5083  0569  065E               	xorwf	_phase,w
  5084  056A  1903               	btfsc	3,2
  5085  056B  2D74               	goto	i1l2381
  5086  056C  085E               	movf	_phase,w
  5087  056D  00C0               	movwf	??_ISR
  5088  056E  01C1               	clrf	??_ISR+1
  5089  056F  1003               	clrc
  5090  0570  0D40               	rlf	??_ISR,w
  5091  0571  00C9               	movwf	_ISR$288
  5092  0572  0D41               	rlf	??_ISR+1,w
  5093  0573  2D82               	goto	L9
  5094  0574                     i1l2381:	
  5095  0574  085E               	movf	_phase,w
  5096  0575  00C0               	movwf	??_ISR
  5097  0576  3003               	movlw	3
  5098  0577                     u298_25:	
  5099  0577  1003               	clrc
  5100  0578  0CC0               	rrf	??_ISR,f
  5101  0579  3EFF               	addlw	-1
  5102  057A  1D03               	skipz
  5103  057B  2D77               	goto	u298_25
  5104  057C  0840               	movf	??_ISR,w
  5105  057D  00C1               	movwf	??_ISR+1
  5106  057E  01C2               	clrf	??_ISR+2
  5107  057F  0841               	movf	??_ISR+1,w
  5108  0580  00C9               	movwf	_ISR$288
  5109  0581  0842               	movf	??_ISR+2,w
  5110  0582                     L9:	
  5111  0582  00CA               	movwf	_ISR$288+1
  5112  0583  0849               	movf	_ISR$288,w
  5113  0584  00C0               	movwf	??_ISR
  5114  0585  0840               	movf	??_ISR,w
  5115  0586  00DE               	movwf	_phase
  5116                           
  5117                           ;main.c: 38: position = ((position + 1)== 2048) ? 0 : (position + 1);
  5118  0587  1683               	bsf	3,5	;RP0=1, select bank1
  5119  0588  1303               	bcf	3,6	;RP1=0, select bank1
  5120  0589  085F               	movf	_position^(0+128),w
  5121  058A  3E01               	addlw	1
  5122  058B  1283               	bcf	3,5	;RP0=0, select bank0
  5123  058C  1303               	bcf	3,6	;RP1=0, select bank0
  5124  058D  00C0               	movwf	??_ISR
  5125  058E  1683               	bsf	3,5	;RP0=1, select bank1
  5126  058F  1303               	bcf	3,6	;RP1=0, select bank1
  5127  0590  0860               	movf	(_position+1)^(0+128),w
  5128  0591  1803               	skipnc
  5129  0592  3E01               	addlw	1
  5130  0593  3E00               	addlw	0
  5131  0594  1283               	bcf	3,5	;RP0=0, select bank0
  5132  0595  1303               	bcf	3,6	;RP1=0, select bank0
  5133  0596  00C1               	movwf	??_ISR+1
  5134  0597  3008               	movlw	8
  5135  0598  0641               	xorwf	??_ISR+1,w
  5136  0599  0440               	iorwf	??_ISR,w
  5137  059A  1903               	btfsc	3,2
  5138  059B  2DA7               	goto	i1l2389
  5139  059C  1683               	bsf	3,5	;RP0=1, select bank1
  5140  059D  1303               	bcf	3,6	;RP1=0, select bank1
  5141  059E  085F               	movf	_position^(0+128),w
  5142  059F  3E01               	addlw	1
  5143  05A0  00DF               	movwf	_position^(0+128)
  5144  05A1  0860               	movf	(_position+1)^(0+128),w
  5145  05A2  1803               	skipnc
  5146  05A3  3E01               	addlw	1
  5147  05A4  3E00               	addlw	0
  5148  05A5  00E0               	movwf	(_position+1)^(0+128)
  5149  05A6  2DAB               	goto	i1l2391
  5150  05A7                     i1l2389:	
  5151  05A7  1683               	bsf	3,5	;RP0=1, select bank1
  5152  05A8  1303               	bcf	3,6	;RP1=0, select bank1
  5153  05A9  01DF               	clrf	_position^(0+128)
  5154  05AA  01E0               	clrf	(_position+1)^(0+128)
  5155  05AB                     i1l2391:	
  5156                           
  5157                           ;main.c: 39: }
  5158                           ;main.c: 41: if(error < 0){
  5159  05AB  1683               	bsf	3,5	;RP0=1, select bank1
  5160  05AC  1303               	bcf	3,6	;RP1=0, select bank1
  5161  05AD  1FDE               	btfss	(_error+1)^(0+128),7
  5162  05AE  2E0B               	goto	i1l148
  5163                           
  5164                           ;main.c: 42: STATUSbits.C = 0;
  5165  05AF  1283               	bcf	3,5	;RP0=0, select bank0
  5166  05B0  1303               	bcf	3,6	;RP1=0, select bank0
  5167  05B1  1003               	bcf	3,0	;volatile
  5168                           
  5169                           ;main.c: 43: phase = (phase == 0) ? 8 : phase;
  5170  05B2  085E               	movf	_phase,w
  5171  05B3  1903               	btfsc	3,2
  5172  05B4  2DBC               	goto	i1l2399
  5173  05B5  085E               	movf	_phase,w
  5174  05B6  00C0               	movwf	??_ISR
  5175  05B7  01C1               	clrf	??_ISR+1
  5176  05B8  0840               	movf	??_ISR,w
  5177  05B9  00CB               	movwf	_ISR$289
  5178  05BA  0841               	movf	??_ISR+1,w
  5179  05BB  2DBF               	goto	L10
  5180  05BC                     i1l2399:	
  5181  05BC  3008               	movlw	8
  5182  05BD  00CB               	movwf	_ISR$289
  5183  05BE  3000               	movlw	0
  5184  05BF                     L10:	
  5185  05BF  00CC               	movwf	_ISR$289+1
  5186  05C0  084B               	movf	_ISR$289,w
  5187  05C1  00C0               	movwf	??_ISR
  5188  05C2  0840               	movf	??_ISR,w
  5189  05C3  00DE               	movwf	_phase
  5190                           
  5191                           ;main.c: 44: phase = (phase == 1) ? phase << 3 : phase >> 1;
  5192  05C4  035E               	decf	_phase,w
  5193  05C5  1903               	btfsc	3,2
  5194  05C6  2DD1               	goto	i1l2405
  5195  05C7  085E               	movf	_phase,w
  5196  05C8  00C0               	movwf	??_ISR
  5197  05C9  1003               	clrc
  5198  05CA  0C40               	rrf	??_ISR,w
  5199  05CB  00C1               	movwf	??_ISR+1
  5200  05CC  01C2               	clrf	??_ISR+2
  5201  05CD  0841               	movf	??_ISR+1,w
  5202  05CE  00CD               	movwf	_ISR$290
  5203  05CF  0842               	movf	??_ISR+2,w
  5204  05D0  2DE0               	goto	L11
  5205  05D1                     i1l2405:	
  5206  05D1  085E               	movf	_phase,w
  5207  05D2  00C0               	movwf	??_ISR
  5208  05D3  01C1               	clrf	??_ISR+1
  5209  05D4  1003               	clrc
  5210  05D5  0DC0               	rlf	??_ISR,f
  5211  05D6  0DC1               	rlf	??_ISR+1,f
  5212  05D7  1003               	clrc
  5213  05D8  0DC0               	rlf	??_ISR,f
  5214  05D9  0DC1               	rlf	??_ISR+1,f
  5215  05DA  1003               	clrc
  5216  05DB  0DC0               	rlf	??_ISR,f
  5217  05DC  0DC1               	rlf	??_ISR+1,f
  5218  05DD  0840               	movf	??_ISR,w
  5219  05DE  00CD               	movwf	_ISR$290
  5220  05DF  0841               	movf	??_ISR+1,w
  5221  05E0                     L11:	
  5222  05E0  00CE               	movwf	_ISR$290+1
  5223  05E1  084D               	movf	_ISR$290,w
  5224  05E2  00C0               	movwf	??_ISR
  5225  05E3  0840               	movf	??_ISR,w
  5226  05E4  00DE               	movwf	_phase
  5227                           
  5228                           ;main.c: 45: position = ((position - 1)== -1) ? 2047 : (position - 1);
  5229  05E5  1683               	bsf	3,5	;RP0=1, select bank1
  5230  05E6  1303               	bcf	3,6	;RP1=0, select bank1
  5231  05E7  085F               	movf	_position^(0+128),w
  5232  05E8  3EFF               	addlw	255
  5233  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  5234  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  5235  05EB  00C0               	movwf	??_ISR
  5236  05EC  1683               	bsf	3,5	;RP0=1, select bank1
  5237  05ED  1303               	bcf	3,6	;RP1=0, select bank1
  5238  05EE  0860               	movf	(_position+1)^(0+128),w
  5239  05EF  1803               	skipnc
  5240  05F0  3E01               	addlw	1
  5241  05F1  3EFF               	addlw	255
  5242  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  5243  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  5244  05F4  00C1               	movwf	??_ISR+1
  5245  05F5  0A40               	incf	??_ISR,w
  5246  05F6  1903               	btfsc	3,2
  5247  05F7  0A41               	incf	??_ISR+1,w
  5248  05F8  1903               	btfsc	3,2
  5249  05F9  2E05               	goto	i1l2413
  5250  05FA  1683               	bsf	3,5	;RP0=1, select bank1
  5251  05FB  1303               	bcf	3,6	;RP1=0, select bank1
  5252  05FC  085F               	movf	_position^(0+128),w
  5253  05FD  3EFF               	addlw	255
  5254  05FE  00DF               	movwf	_position^(0+128)
  5255  05FF  0860               	movf	(_position+1)^(0+128),w
  5256  0600  1803               	skipnc
  5257  0601  3E01               	addlw	1
  5258  0602  3EFF               	addlw	255
  5259  0603  00E0               	movwf	(_position+1)^(0+128)
  5260  0604  2E0B               	goto	i1l148
  5261  0605                     i1l2413:	
  5262  0605  30FF               	movlw	255
  5263  0606  1683               	bsf	3,5	;RP0=1, select bank1
  5264  0607  1303               	bcf	3,6	;RP1=0, select bank1
  5265  0608  00DF               	movwf	_position^(0+128)
  5266  0609  3007               	movlw	7
  5267  060A  00E0               	movwf	(_position^(0+128)+1)
  5268  060B                     i1l148:	
  5269                           
  5270                           ;main.c: 46: }
  5271                           ;main.c: 48: PORTD = phase;
  5272  060B  1283               	bcf	3,5	;RP0=0, select bank0
  5273  060C  1303               	bcf	3,6	;RP1=0, select bank0
  5274  060D  085E               	movf	_phase,w
  5275  060E  0088               	movwf	8	;volatile
  5276                           
  5277                           ;main.c: 50: PIR1bits.TMR2IF = 0;
  5278  060F  108C               	bcf	12,1	;volatile
  5279  0610                     i1l2417:	
  5280                           
  5281                           ;main.c: 51: }
  5282                           ;main.c: 53: if (PIR1bits.RCIF == 1)
  5283  0610  1E8C               	btfss	12,5	;volatile
  5284  0611  2E47               	goto	i1l163
  5285                           
  5286                           ;main.c: 54: {
  5287                           ;main.c: 55: char dado;
  5288                           ;main.c: 56: dado = getChar_();
  5289  0612  120A  158A  21BC  120A  118A  	fcall	_getChar_
  5290  0617  1283               	bcf	3,5	;RP0=0, select bank0
  5291  0618  1303               	bcf	3,6	;RP1=0, select bank0
  5292  0619  00C0               	movwf	??_ISR
  5293  061A  0840               	movf	??_ISR,w
  5294  061B  00CF               	movwf	ISR@dado
  5295                           
  5296                           ;main.c: 57: data_recived[i] = dado;
  5297  061C  084F               	movf	ISR@dado,w
  5298  061D  00C0               	movwf	??_ISR
  5299  061E  085C               	movf	_i,w
  5300  061F  3E50               	addlw	(low (_data_recived| 0))& (0+255)
  5301  0620  0084               	movwf	4
  5302  0621  0840               	movf	??_ISR,w
  5303  0622  1383               	bcf	3,7	;select IRP bank0
  5304  0623  0080               	movwf	0
  5305                           
  5306                           ;main.c: 58: i++;
  5307  0624  3001               	movlw	1
  5308  0625  00C0               	movwf	??_ISR
  5309  0626  0840               	movf	??_ISR,w
  5310  0627  07DC               	addwf	_i,f
  5311                           
  5312                           ;main.c: 59: if(dado == 0x0D){
  5313  0628  300D               	movlw	13
  5314  0629  064F               	xorwf	ISR@dado,w
  5315  062A  1D03               	btfss	3,2
  5316  062B  2E46               	goto	i1l2441
  5317                           
  5318                           ;main.c: 60: data_recived[i]='\0';
  5319  062C  085C               	movf	_i,w
  5320  062D  3E50               	addlw	(low (_data_recived| 0))& (0+255)
  5321  062E  0084               	movwf	4
  5322  062F  0180               	clrf	0
  5323                           
  5324                           ;main.c: 61: char2int_();
  5325  0630  120A  158A  250C  120A  118A  	fcall	_char2int_
  5326                           
  5327                           ;main.c: 62: setPosicaoDesejada(int_value);
  5328  0635  1283               	bcf	3,5	;RP0=0, select bank0
  5329  0636  1303               	bcf	3,6	;RP1=0, select bank0
  5330  0637  085B               	movf	_int_value+1,w
  5331  0638  00BF               	movwf	i1setPosicaoDesejada@posicao_desejada+1
  5332  0639  085A               	movf	_int_value,w
  5333  063A  00BE               	movwf	i1setPosicaoDesejada@posicao_desejada
  5334  063B  120A  158A  2334  120A  118A  	fcall	i1_setPosicaoDesejada
  5335                           
  5336                           ;main.c: 63: i=0;
  5337  0640  1283               	bcf	3,5	;RP0=0, select bank0
  5338  0641  1303               	bcf	3,6	;RP1=0, select bank0
  5339  0642  01DC               	clrf	_i
  5340                           
  5341                           ;main.c: 64: data_recived[0]=0;
  5342  0643  01D0               	clrf	_data_recived
  5343                           
  5344                           ;main.c: 65: data_recived[1]=0;
  5345  0644  01D1               	clrf	_data_recived+1
  5346                           
  5347                           ;main.c: 66: data_recived[2]=0;
  5348  0645  01D2               	clrf	_data_recived+2
  5349  0646                     i1l2441:	
  5350                           
  5351                           ;main.c: 69: }
  5352                           ;main.c: 71: PIR1bits.RCIF = 0;
  5353  0646  128C               	bcf	12,5	;volatile
  5354  0647                     i1l163:	
  5355  0647  0846               	movf	??_ISR+6,w
  5356  0648  00FF               	movwf	127
  5357  0649  0845               	movf	??_ISR+5,w
  5358  064A  008A               	movwf	10
  5359  064B  0844               	movf	??_ISR+4,w
  5360  064C  0084               	movwf	4
  5361  064D  0E43               	swapf	(??_ISR+3)^0,w
  5362  064E  0083               	movwf	3
  5363  064F  0EFE               	swapf	126,f
  5364  0650  0E7E               	swapf	126,w
  5365  0651  0009               	retfie
  5366  0652                     __end_of_ISR:	
  5367                           
  5368                           	psect	intentry
  5369  0004                     __pintentry:	
  5370                           ;incstack = 0
  5371                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5372                           
  5373  0004                     interrupt_function:	
  5374  007E                     saved_w	set	btemp
  5375  0004  00FE               	movwf	btemp
  5376  0005  0E03               	swapf	3,w
  5377  0006  1283               	bcf	3,5	;RP0=0, select bank0
  5378  0007  1303               	bcf	3,6	;RP1=0, select bank0
  5379  0008  00C3               	movwf	??_ISR+3
  5380  0009  0804               	movf	4,w
  5381  000A  00C4               	movwf	??_ISR+4
  5382  000B  080A               	movf	10,w
  5383  000C  00C5               	movwf	??_ISR+5
  5384  000D  087F               	movf	btemp+1,w
  5385  000E  00C6               	movwf	??_ISR+6
  5386  000F  120A  118A  2D20   	ljmp	_ISR
  5387                           
  5388                           	psect	text27
  5389  0B34                     __ptext27:	
  5390 ;; *************** function i1_setPosicaoDesejada *****************
  5391 ;; Defined at:
  5392 ;;		line 28 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\stepper.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;  posicao_dese    2   30[BANK0 ] unsigned int 
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;		None
  5397 ;; Return value:  Size  Location     Type
  5398 ;;                  1    wreg      void 
  5399 ;; Registers used:
  5400 ;;		wreg, status,2, status,0, pclath, cstack
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5406 ;;      Params:         0       2       0       0       0
  5407 ;;      Locals:         0       0       0       0       0
  5408 ;;      Temps:          0       0       0       0       0
  5409 ;;      Totals:         0       2       0       0       0
  5410 ;;Total ram usage:        2 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    2
  5413 ;; This function calls:
  5414 ;;		i1___ftdiv
  5415 ;;		i1___fttol
  5416 ;;		i1___lwtoft
  5417 ;; This function is called by:
  5418 ;;		_ISR
  5419 ;; This function uses a non-reentrant model
  5420 ;;
  5421                           
  5422                           
  5423                           ;psect for function i1_setPosicaoDesejada
  5424  0B34                     i1_setPosicaoDesejada:	
  5425                           
  5426                           ;stepper.c: 29: setpoint = posicao_desejada/(5.625/32);
  5427                           
  5428                           ;incstack = 0
  5429                           ; Regs used in i1_setPosicaoDesejada: [wreg+status,2+status,0+pclath+cstack]
  5430  0B34  1283               	bcf	3,5	;RP0=0, select bank0
  5431  0B35  1303               	bcf	3,6	;RP1=0, select bank0
  5432  0B36  083F               	movf	i1setPosicaoDesejada@posicao_desejada+1,w
  5433  0B37  00FA               	movwf	i1___lwtoft@c+1
  5434  0B38  083E               	movf	i1setPosicaoDesejada@posicao_desejada,w
  5435  0B39  00F9               	movwf	i1___lwtoft@c
  5436  0B3A  120A  158A  21FE  120A  158A  	fcall	i1___lwtoft
  5437  0B3F  0879               	movf	?i1___lwtoft,w
  5438  0B40  1283               	bcf	3,5	;RP0=0, select bank0
  5439  0B41  1303               	bcf	3,6	;RP1=0, select bank0
  5440  0B42  00A3               	movwf	i1___ftdiv@f1
  5441  0B43  087A               	movf	?i1___lwtoft+1,w
  5442  0B44  00A4               	movwf	i1___ftdiv@f1+1
  5443  0B45  087B               	movf	?i1___lwtoft+2,w
  5444  0B46  00A5               	movwf	i1___ftdiv@f1+2
  5445  0B47  3000               	movlw	0
  5446  0B48  00A0               	movwf	i1___ftdiv@f2
  5447  0B49  3034               	movlw	52
  5448  0B4A  00A1               	movwf	i1___ftdiv@f2+1
  5449  0B4B  303E               	movlw	62
  5450  0B4C  00A2               	movwf	i1___ftdiv@f2+2
  5451  0B4D  120A  118A  21E3  120A  158A  	fcall	i1___ftdiv
  5452  0B52  1283               	bcf	3,5	;RP0=0, select bank0
  5453  0B53  1303               	bcf	3,6	;RP1=0, select bank0
  5454  0B54  0820               	movf	?i1___ftdiv,w
  5455  0B55  00B0               	movwf	i1___fttol@f1
  5456  0B56  0821               	movf	?i1___ftdiv+1,w
  5457  0B57  00B1               	movwf	i1___fttol@f1+1
  5458  0B58  0822               	movf	?i1___ftdiv+2,w
  5459  0B59  00B2               	movwf	i1___fttol@f1+2
  5460  0B5A  120A  158A  2772   	fcall	i1___fttol
  5461  0B5D  1283               	bcf	3,5	;RP0=0, select bank0
  5462  0B5E  1303               	bcf	3,6	;RP1=0, select bank0
  5463  0B5F  0831               	movf	?i1___fttol+1,w
  5464  0B60  1683               	bsf	3,5	;RP0=1, select bank1
  5465  0B61  1303               	bcf	3,6	;RP1=0, select bank1
  5466  0B62  00E2               	movwf	(_setpoint+1)^(0+128)
  5467  0B63  1283               	bcf	3,5	;RP0=0, select bank0
  5468  0B64  1303               	bcf	3,6	;RP1=0, select bank0
  5469  0B65  0830               	movf	?i1___fttol,w
  5470  0B66  1683               	bsf	3,5	;RP0=1, select bank1
  5471  0B67  1303               	bcf	3,6	;RP1=0, select bank1
  5472  0B68  00E1               	movwf	_setpoint^(0+128)
  5473  0B69  0008               	return
  5474  0B6A                     __end_ofi1_setPosicaoDesejada:	
  5475                           
  5476                           	psect	text28
  5477  09FE                     __ptext28:	
  5478 ;; *************** function i1___lwtoft *****************
  5479 ;; Defined at:
  5480 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;  c               2    8[COMMON] unsigned int 
  5483 ;; Auto vars:     Size  Location     Type
  5484 ;;		None
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  3    8[COMMON] float 
  5487 ;; Registers used:
  5488 ;;		wreg, status,2, status,0, pclath, cstack
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5494 ;;      Params:         3       0       0       0       0
  5495 ;;      Locals:         0       0       0       0       0
  5496 ;;      Temps:          1       0       0       0       0
  5497 ;;      Totals:         4       0       0       0       0
  5498 ;;Total ram usage:        4 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; Hardware stack levels required when called:    1
  5501 ;; This function calls:
  5502 ;;		i1___ftpack
  5503 ;; This function is called by:
  5504 ;;		i1_setPosicaoDesejada
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           
  5509                           ;psect for function i1___lwtoft
  5510  09FE                     i1___lwtoft:	
  5511                           
  5512                           ;incstack = 0
  5513                           ; Regs used in i1___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5514  09FE  0879               	movf	i1___lwtoft@c,w
  5515  09FF  00F1               	movwf	i1___ftpack@arg
  5516  0A00  087A               	movf	i1___lwtoft@c+1,w
  5517  0A01  00F2               	movwf	i1___ftpack@arg+1
  5518  0A02  01F3               	clrf	i1___ftpack@arg+2
  5519  0A03  308E               	movlw	142
  5520  0A04  00FC               	movwf	??i1___lwtoft
  5521  0A05  087C               	movf	??i1___lwtoft,w
  5522  0A06  00F4               	movwf	i1___ftpack@exp
  5523  0A07  01F5               	clrf	i1___ftpack@sign
  5524  0A08  120A  158A  261F   	fcall	i1___ftpack
  5525  0A0B  0871               	movf	?i1___ftpack,w
  5526  0A0C  00F9               	movwf	?i1___lwtoft
  5527  0A0D  0872               	movf	?i1___ftpack+1,w
  5528  0A0E  00FA               	movwf	?i1___lwtoft+1
  5529  0A0F  0873               	movf	?i1___ftpack+2,w
  5530  0A10  00FB               	movwf	?i1___lwtoft+2
  5531  0A11  0008               	return
  5532  0A12                     __end_ofi1___lwtoft:	
  5533                           
  5534                           	psect	text29
  5535  0F72                     __ptext29:	
  5536 ;; *************** function i1___fttol *****************
  5537 ;; Defined at:
  5538 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  5539 ;; Parameters:    Size  Location     Type
  5540 ;;  f1              3   16[BANK0 ] float 
  5541 ;; Auto vars:     Size  Location     Type
  5542 ;;  __fttol         4   25[BANK0 ] unsigned long 
  5543 ;;  __fttol         1   29[BANK0 ] unsigned char 
  5544 ;;  __fttol         1   24[BANK0 ] unsigned char 
  5545 ;; Return value:  Size  Location     Type
  5546 ;;                  4   16[BANK0 ] long 
  5547 ;; Registers used:
  5548 ;;		wreg, status,2, status,0
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5554 ;;      Params:         0       4       0       0       0
  5555 ;;      Locals:         0       6       0       0       0
  5556 ;;      Temps:          0       4       0       0       0
  5557 ;;      Totals:         0      14       0       0       0
  5558 ;;Total ram usage:       14 bytes
  5559 ;; Hardware stack levels used:    1
  5560 ;; This function calls:
  5561 ;;		Nothing
  5562 ;; This function is called by:
  5563 ;;		i1_setPosicaoDesejada
  5564 ;; This function uses a non-reentrant model
  5565 ;;
  5566                           
  5567                           
  5568                           ;psect for function i1___fttol
  5569  0F72                     i1___fttol:	
  5570                           
  5571                           ;incstack = 0
  5572                           ; Regs used in i1___fttol: [wreg+status,2+status,0]
  5573  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  5574  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  5575  0F74  0830               	movf	i1___fttol@f1,w
  5576  0F75  00B4               	movwf	??i1___fttol
  5577  0F76  0831               	movf	i1___fttol@f1+1,w
  5578  0F77  00B5               	movwf	??i1___fttol+1
  5579  0F78  0832               	movf	i1___fttol@f1+2,w
  5580  0F79  00B6               	movwf	??i1___fttol+2
  5581  0F7A  1003               	clrc
  5582  0F7B  0D35               	rlf	??i1___fttol+1,w
  5583  0F7C  0D36               	rlf	??i1___fttol+2,w
  5584  0F7D  00B7               	movwf	??i1___fttol+3
  5585  0F7E  0837               	movf	??i1___fttol+3,w
  5586  0F7F  00BD               	movwf	i1___fttol@exp1
  5587  0F80  083D               	movf	i1___fttol@exp1,w
  5588  0F81  1D03               	btfss	3,2
  5589  0F82  2F8C               	goto	i1l2187
  5590  0F83  3000               	movlw	0
  5591  0F84  00B3               	movwf	?i1___fttol+3
  5592  0F85  3000               	movlw	0
  5593  0F86  00B2               	movwf	?i1___fttol+2
  5594  0F87  3000               	movlw	0
  5595  0F88  00B1               	movwf	?i1___fttol+1
  5596  0F89  3000               	movlw	0
  5597  0F8A  00B0               	movwf	?i1___fttol
  5598  0F8B  0008               	return
  5599  0F8C                     i1l2187:	
  5600  0F8C  0830               	movf	i1___fttol@f1,w
  5601  0F8D  00B4               	movwf	??i1___fttol
  5602  0F8E  0831               	movf	i1___fttol@f1+1,w
  5603  0F8F  00B5               	movwf	??i1___fttol+1
  5604  0F90  0832               	movf	i1___fttol@f1+2,w
  5605  0F91  00B6               	movwf	??i1___fttol+2
  5606  0F92  3017               	movlw	23
  5607  0F93                     u269_25:	
  5608  0F93  1003               	clrc
  5609  0F94  0CB6               	rrf	??i1___fttol+2,f
  5610  0F95  0CB5               	rrf	??i1___fttol+1,f
  5611  0F96  0CB4               	rrf	??i1___fttol,f
  5612  0F97  3EFF               	addlw	-1
  5613  0F98  1D03               	skipz
  5614  0F99  2F93               	goto	u269_25
  5615  0F9A  0834               	movf	??i1___fttol,w
  5616  0F9B  00B7               	movwf	??i1___fttol+3
  5617  0F9C  0837               	movf	??i1___fttol+3,w
  5618  0F9D  00B8               	movwf	i1___fttol@sign1
  5619  0F9E  17B1               	bsf	i1___fttol@f1+1,7
  5620  0F9F  30FF               	movlw	255
  5621  0FA0  05B0               	andwf	i1___fttol@f1,f
  5622  0FA1  30FF               	movlw	255
  5623  0FA2  05B1               	andwf	i1___fttol@f1+1,f
  5624  0FA3  3000               	movlw	0
  5625  0FA4  05B2               	andwf	i1___fttol@f1+2,f
  5626  0FA5  0830               	movf	i1___fttol@f1,w
  5627  0FA6  00B9               	movwf	i1___fttol@lval
  5628  0FA7  0831               	movf	i1___fttol@f1+1,w
  5629  0FA8  00BA               	movwf	i1___fttol@lval+1
  5630  0FA9  0832               	movf	i1___fttol@f1+2,w
  5631  0FAA  00BB               	movwf	i1___fttol@lval+2
  5632  0FAB  01BC               	clrf	i1___fttol@lval+3
  5633  0FAC  308E               	movlw	142
  5634  0FAD  02BD               	subwf	i1___fttol@exp1,f
  5635  0FAE  1FBD               	btfss	i1___fttol@exp1,7
  5636  0FAF  2FCE               	goto	i1l2207
  5637  0FB0  083D               	movf	i1___fttol@exp1,w
  5638  0FB1  3A80               	xorlw	128
  5639  0FB2  3E8F               	addlw	143
  5640  0FB3  1803               	skipnc
  5641  0FB4  2FBE               	goto	i1l2205
  5642  0FB5  3000               	movlw	0
  5643  0FB6  00B3               	movwf	?i1___fttol+3
  5644  0FB7  3000               	movlw	0
  5645  0FB8  00B2               	movwf	?i1___fttol+2
  5646  0FB9  3000               	movlw	0
  5647  0FBA  00B1               	movwf	?i1___fttol+1
  5648  0FBB  3000               	movlw	0
  5649  0FBC  00B0               	movwf	?i1___fttol
  5650  0FBD  0008               	return
  5651  0FBE                     i1l2205:	
  5652  0FBE  3001               	movlw	1
  5653  0FBF                     u272_25:	
  5654  0FBF  1003               	clrc
  5655  0FC0  0CBC               	rrf	i1___fttol@lval+3,f
  5656  0FC1  0CBB               	rrf	i1___fttol@lval+2,f
  5657  0FC2  0CBA               	rrf	i1___fttol@lval+1,f
  5658  0FC3  0CB9               	rrf	i1___fttol@lval,f
  5659  0FC4  3EFF               	addlw	-1
  5660  0FC5  1D03               	skipz
  5661  0FC6  2FBF               	goto	u272_25
  5662  0FC7  3001               	movlw	1
  5663  0FC8  00B4               	movwf	??i1___fttol
  5664  0FC9  0834               	movf	??i1___fttol,w
  5665  0FCA  07BD               	addwf	i1___fttol@exp1,f
  5666  0FCB  1903               	btfsc	3,2
  5667  0FCC  2FE9               	goto	i1l2215
  5668  0FCD  2FBE               	goto	i1l2205
  5669  0FCE                     i1l2207:	
  5670  0FCE  3018               	movlw	24
  5671  0FCF  023D               	subwf	i1___fttol@exp1,w
  5672  0FD0  1C03               	skipc
  5673  0FD1  2FE6               	goto	i1l675
  5674  0FD2  3000               	movlw	0
  5675  0FD3  00B3               	movwf	?i1___fttol+3
  5676  0FD4  3000               	movlw	0
  5677  0FD5  00B2               	movwf	?i1___fttol+2
  5678  0FD6  3000               	movlw	0
  5679  0FD7  00B1               	movwf	?i1___fttol+1
  5680  0FD8  3000               	movlw	0
  5681  0FD9  00B0               	movwf	?i1___fttol
  5682  0FDA  0008               	return
  5683  0FDB                     i1l2213:	
  5684  0FDB  3001               	movlw	1
  5685  0FDC  00B4               	movwf	??i1___fttol
  5686  0FDD                     u275_25:	
  5687  0FDD  1003               	clrc
  5688  0FDE  0DB9               	rlf	i1___fttol@lval,f
  5689  0FDF  0DBA               	rlf	i1___fttol@lval+1,f
  5690  0FE0  0DBB               	rlf	i1___fttol@lval+2,f
  5691  0FE1  0DBC               	rlf	i1___fttol@lval+3,f
  5692  0FE2  0BB4               	decfsz	??i1___fttol,f
  5693  0FE3  2FDD               	goto	u275_25
  5694  0FE4  3001               	movlw	1
  5695  0FE5  02BD               	subwf	i1___fttol@exp1,f
  5696  0FE6                     i1l675:	
  5697  0FE6  083D               	movf	i1___fttol@exp1,w
  5698  0FE7  1D03               	btfss	3,2
  5699  0FE8  2FDB               	goto	i1l2213
  5700  0FE9                     i1l2215:	
  5701  0FE9  0838               	movf	i1___fttol@sign1,w
  5702  0FEA  1903               	btfsc	3,2
  5703  0FEB  2FF7               	goto	i1l2219
  5704  0FEC  09B9               	comf	i1___fttol@lval,f
  5705  0FED  09BA               	comf	i1___fttol@lval+1,f
  5706  0FEE  09BB               	comf	i1___fttol@lval+2,f
  5707  0FEF  09BC               	comf	i1___fttol@lval+3,f
  5708  0FF0  0AB9               	incf	i1___fttol@lval,f
  5709  0FF1  1903               	skipnz
  5710  0FF2  0ABA               	incf	i1___fttol@lval+1,f
  5711  0FF3  1903               	skipnz
  5712  0FF4  0ABB               	incf	i1___fttol@lval+2,f
  5713  0FF5  1903               	skipnz
  5714  0FF6  0ABC               	incf	i1___fttol@lval+3,f
  5715  0FF7                     i1l2219:	
  5716  0FF7  083C               	movf	i1___fttol@lval+3,w
  5717  0FF8  00B3               	movwf	?i1___fttol+3
  5718  0FF9  083B               	movf	i1___fttol@lval+2,w
  5719  0FFA  00B2               	movwf	?i1___fttol+2
  5720  0FFB  083A               	movf	i1___fttol@lval+1,w
  5721  0FFC  00B1               	movwf	?i1___fttol+1
  5722  0FFD  0839               	movf	i1___fttol@lval,w
  5723  0FFE  00B0               	movwf	?i1___fttol
  5724  0FFF  0008               	return
  5725  1000                     __end_ofi1___fttol:	
  5726                           
  5727                           	psect	text30
  5728  01E3                     __ptext30:	
  5729 ;; *************** function i1___ftdiv *****************
  5730 ;; Defined at:
  5731 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  5732 ;; Parameters:    Size  Location     Type
  5733 ;;  f2              3    0[BANK0 ] float 
  5734 ;;  f1              3    3[BANK0 ] float 
  5735 ;; Auto vars:     Size  Location     Type
  5736 ;;  __ftdiv         3   11[BANK0 ] float 
  5737 ;;  __ftdiv         1   15[BANK0 ] unsigned char 
  5738 ;;  __ftdiv         1   14[BANK0 ] unsigned char 
  5739 ;;  __ftdiv         1   10[BANK0 ] unsigned char 
  5740 ;; Return value:  Size  Location     Type
  5741 ;;                  3    0[BANK0 ] float 
  5742 ;; Registers used:
  5743 ;;		wreg, status,2, status,0, pclath, cstack
  5744 ;; Tracked objects:
  5745 ;;		On entry : 0/0
  5746 ;;		On exit  : 0/0
  5747 ;;		Unchanged: 0/0
  5748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5749 ;;      Params:         0       6       0       0       0
  5750 ;;      Locals:         0       6       0       0       0
  5751 ;;      Temps:          0       4       0       0       0
  5752 ;;      Totals:         0      16       0       0       0
  5753 ;;Total ram usage:       16 bytes
  5754 ;; Hardware stack levels used:    1
  5755 ;; Hardware stack levels required when called:    1
  5756 ;; This function calls:
  5757 ;;		i1___ftpack
  5758 ;; This function is called by:
  5759 ;;		i1_setPosicaoDesejada
  5760 ;; This function uses a non-reentrant model
  5761 ;;
  5762                           
  5763                           
  5764                           ;psect for function i1___ftdiv
  5765  01E3                     i1___ftdiv:	
  5766                           
  5767                           ;incstack = 0
  5768                           ; Regs used in i1___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5769  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  5770  01E4  1303               	bcf	3,6	;RP1=0, select bank0
  5771  01E5  0823               	movf	i1___ftdiv@f1,w
  5772  01E6  00A6               	movwf	??i1___ftdiv
  5773  01E7  0824               	movf	i1___ftdiv@f1+1,w
  5774  01E8  00A7               	movwf	??i1___ftdiv+1
  5775  01E9  0825               	movf	i1___ftdiv@f1+2,w
  5776  01EA  00A8               	movwf	??i1___ftdiv+2
  5777  01EB  1003               	clrc
  5778  01EC  0D27               	rlf	??i1___ftdiv+1,w
  5779  01ED  0D28               	rlf	??i1___ftdiv+2,w
  5780  01EE  00A9               	movwf	??i1___ftdiv+3
  5781  01EF  0829               	movf	??i1___ftdiv+3,w
  5782  01F0  00AE               	movwf	i1___ftdiv@exp
  5783  01F1  082E               	movf	i1___ftdiv@exp,w
  5784  01F2  1D03               	btfss	3,2
  5785  01F3  29FB               	goto	i1l2145
  5786  01F4  3000               	movlw	0
  5787  01F5  00A0               	movwf	?i1___ftdiv
  5788  01F6  3000               	movlw	0
  5789  01F7  00A1               	movwf	?i1___ftdiv+1
  5790  01F8  3000               	movlw	0
  5791  01F9  00A2               	movwf	?i1___ftdiv+2
  5792  01FA  0008               	return
  5793  01FB                     i1l2145:	
  5794  01FB  0820               	movf	i1___ftdiv@f2,w
  5795  01FC  00A6               	movwf	??i1___ftdiv
  5796  01FD  0821               	movf	i1___ftdiv@f2+1,w
  5797  01FE  00A7               	movwf	??i1___ftdiv+1
  5798  01FF  0822               	movf	i1___ftdiv@f2+2,w
  5799  0200  00A8               	movwf	??i1___ftdiv+2
  5800  0201  1003               	clrc
  5801  0202  0D27               	rlf	??i1___ftdiv+1,w
  5802  0203  0D28               	rlf	??i1___ftdiv+2,w
  5803  0204  00A9               	movwf	??i1___ftdiv+3
  5804  0205  0829               	movf	??i1___ftdiv+3,w
  5805  0206  00AF               	movwf	i1___ftdiv@sign
  5806  0207  082F               	movf	i1___ftdiv@sign,w
  5807  0208  1D03               	btfss	3,2
  5808  0209  2A11               	goto	i1l2151
  5809  020A  3000               	movlw	0
  5810  020B  00A0               	movwf	?i1___ftdiv
  5811  020C  3000               	movlw	0
  5812  020D  00A1               	movwf	?i1___ftdiv+1
  5813  020E  3000               	movlw	0
  5814  020F  00A2               	movwf	?i1___ftdiv+2
  5815  0210  0008               	return
  5816  0211                     i1l2151:	
  5817  0211  3000               	movlw	0
  5818  0212  00AB               	movwf	i1___ftdiv@f3
  5819  0213  3000               	movlw	0
  5820  0214  00AC               	movwf	i1___ftdiv@f3+1
  5821  0215  3000               	movlw	0
  5822  0216  00AD               	movwf	i1___ftdiv@f3+2
  5823  0217  3089               	movlw	137
  5824  0218  072F               	addwf	i1___ftdiv@sign,w
  5825  0219  00A6               	movwf	??i1___ftdiv
  5826  021A  0826               	movf	??i1___ftdiv,w
  5827  021B  02AE               	subwf	i1___ftdiv@exp,f
  5828  021C  0823               	movf	i1___ftdiv@f1,w
  5829  021D  00A6               	movwf	??i1___ftdiv
  5830  021E  0824               	movf	i1___ftdiv@f1+1,w
  5831  021F  00A7               	movwf	??i1___ftdiv+1
  5832  0220  0825               	movf	i1___ftdiv@f1+2,w
  5833  0221  00A8               	movwf	??i1___ftdiv+2
  5834  0222  3010               	movlw	16
  5835  0223                     u262_25:	
  5836  0223  1003               	clrc
  5837  0224  0CA8               	rrf	??i1___ftdiv+2,f
  5838  0225  0CA7               	rrf	??i1___ftdiv+1,f
  5839  0226  0CA6               	rrf	??i1___ftdiv,f
  5840  0227  3EFF               	addlw	-1
  5841  0228  1D03               	skipz
  5842  0229  2A23               	goto	u262_25
  5843  022A  0826               	movf	??i1___ftdiv,w
  5844  022B  00A9               	movwf	??i1___ftdiv+3
  5845  022C  0829               	movf	??i1___ftdiv+3,w
  5846  022D  00AF               	movwf	i1___ftdiv@sign
  5847  022E  0820               	movf	i1___ftdiv@f2,w
  5848  022F  00A6               	movwf	??i1___ftdiv
  5849  0230  0821               	movf	i1___ftdiv@f2+1,w
  5850  0231  00A7               	movwf	??i1___ftdiv+1
  5851  0232  0822               	movf	i1___ftdiv@f2+2,w
  5852  0233  00A8               	movwf	??i1___ftdiv+2
  5853  0234  3010               	movlw	16
  5854  0235                     u263_25:	
  5855  0235  1003               	clrc
  5856  0236  0CA8               	rrf	??i1___ftdiv+2,f
  5857  0237  0CA7               	rrf	??i1___ftdiv+1,f
  5858  0238  0CA6               	rrf	??i1___ftdiv,f
  5859  0239  3EFF               	addlw	-1
  5860  023A  1D03               	skipz
  5861  023B  2A35               	goto	u263_25
  5862  023C  0826               	movf	??i1___ftdiv,w
  5863  023D  00A9               	movwf	??i1___ftdiv+3
  5864  023E  0829               	movf	??i1___ftdiv+3,w
  5865  023F  06AF               	xorwf	i1___ftdiv@sign,f
  5866  0240  3080               	movlw	128
  5867  0241  00A6               	movwf	??i1___ftdiv
  5868  0242  0826               	movf	??i1___ftdiv,w
  5869  0243  05AF               	andwf	i1___ftdiv@sign,f
  5870  0244  17A4               	bsf	i1___ftdiv@f1+1,7
  5871  0245  30FF               	movlw	255
  5872  0246  05A3               	andwf	i1___ftdiv@f1,f
  5873  0247  30FF               	movlw	255
  5874  0248  05A4               	andwf	i1___ftdiv@f1+1,f
  5875  0249  3000               	movlw	0
  5876  024A  05A5               	andwf	i1___ftdiv@f1+2,f
  5877  024B  17A1               	bsf	i1___ftdiv@f2+1,7
  5878  024C  30FF               	movlw	255
  5879  024D  05A0               	andwf	i1___ftdiv@f2,f
  5880  024E  30FF               	movlw	255
  5881  024F  05A1               	andwf	i1___ftdiv@f2+1,f
  5882  0250  3000               	movlw	0
  5883  0251  05A2               	andwf	i1___ftdiv@f2+2,f
  5884  0252  3018               	movlw	24
  5885  0253  00A6               	movwf	??i1___ftdiv
  5886  0254  0826               	movf	??i1___ftdiv,w
  5887  0255  00AA               	movwf	i1___ftdiv@cntr
  5888  0256                     i1l2165:	
  5889  0256  3001               	movlw	1
  5890  0257                     u264_25:	
  5891  0257  1003               	clrc
  5892  0258  0DAB               	rlf	i1___ftdiv@f3,f
  5893  0259  0DAC               	rlf	i1___ftdiv@f3+1,f
  5894  025A  0DAD               	rlf	i1___ftdiv@f3+2,f
  5895  025B  3EFF               	addlw	-1
  5896  025C  1D03               	skipz
  5897  025D  2A57               	goto	u264_25
  5898  025E  0822               	movf	i1___ftdiv@f2+2,w
  5899  025F  0225               	subwf	i1___ftdiv@f1+2,w
  5900  0260  1D03               	skipz
  5901  0261  2A68               	goto	u265_25
  5902  0262  0821               	movf	i1___ftdiv@f2+1,w
  5903  0263  0224               	subwf	i1___ftdiv@f1+1,w
  5904  0264  1D03               	skipz
  5905  0265  2A68               	goto	u265_25
  5906  0266  0820               	movf	i1___ftdiv@f2,w
  5907  0267  0223               	subwf	i1___ftdiv@f1,w
  5908  0268                     u265_25:	
  5909  0268  1C03               	skipc
  5910  0269  2A75               	goto	i1l2173
  5911  026A  0820               	movf	i1___ftdiv@f2,w
  5912  026B  02A3               	subwf	i1___ftdiv@f1,f
  5913  026C  0821               	movf	i1___ftdiv@f2+1,w
  5914  026D  1C03               	skipc
  5915  026E  0F21               	incfsz	i1___ftdiv@f2+1,w
  5916  026F  02A4               	subwf	i1___ftdiv@f1+1,f
  5917  0270  0822               	movf	i1___ftdiv@f2+2,w
  5918  0271  1C03               	skipc
  5919  0272  0A22               	incf	i1___ftdiv@f2+2,w
  5920  0273  02A5               	subwf	i1___ftdiv@f1+2,f
  5921  0274  142B               	bsf	i1___ftdiv@f3,0
  5922  0275                     i1l2173:	
  5923  0275  3001               	movlw	1
  5924  0276                     u266_25:	
  5925  0276  1003               	clrc
  5926  0277  0DA3               	rlf	i1___ftdiv@f1,f
  5927  0278  0DA4               	rlf	i1___ftdiv@f1+1,f
  5928  0279  0DA5               	rlf	i1___ftdiv@f1+2,f
  5929  027A  3EFF               	addlw	-1
  5930  027B  1D03               	skipz
  5931  027C  2A76               	goto	u266_25
  5932  027D  3001               	movlw	1
  5933  027E  02AA               	subwf	i1___ftdiv@cntr,f
  5934  027F  1D03               	btfss	3,2
  5935  0280  2A56               	goto	i1l2165
  5936  0281  082B               	movf	i1___ftdiv@f3,w
  5937  0282  00F1               	movwf	i1___ftpack@arg
  5938  0283  082C               	movf	i1___ftdiv@f3+1,w
  5939  0284  00F2               	movwf	i1___ftpack@arg+1
  5940  0285  082D               	movf	i1___ftdiv@f3+2,w
  5941  0286  00F3               	movwf	i1___ftpack@arg+2
  5942  0287  082E               	movf	i1___ftdiv@exp,w
  5943  0288  00A6               	movwf	??i1___ftdiv
  5944  0289  0826               	movf	??i1___ftdiv,w
  5945  028A  00F4               	movwf	i1___ftpack@exp
  5946  028B  082F               	movf	i1___ftdiv@sign,w
  5947  028C  00A7               	movwf	??i1___ftdiv+1
  5948  028D  0827               	movf	??i1___ftdiv+1,w
  5949  028E  00F5               	movwf	i1___ftpack@sign
  5950  028F  120A  158A  261F   	fcall	i1___ftpack
  5951  0292  0871               	movf	?i1___ftpack,w
  5952  0293  1283               	bcf	3,5	;RP0=0, select bank0
  5953  0294  1303               	bcf	3,6	;RP1=0, select bank0
  5954  0295  00A0               	movwf	?i1___ftdiv
  5955  0296  0872               	movf	?i1___ftpack+1,w
  5956  0297  00A1               	movwf	?i1___ftdiv+1
  5957  0298  0873               	movf	?i1___ftpack+2,w
  5958  0299  00A2               	movwf	?i1___ftdiv+2
  5959  029A  0008               	return
  5960  029B                     __end_ofi1___ftdiv:	
  5961                           
  5962                           	psect	text31
  5963  0E1F                     __ptext31:	
  5964 ;; *************** function i1___ftpack *****************
  5965 ;; Defined at:
  5966 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;  arg             3    0[COMMON] unsigned um
  5969 ;;  exp             1    3[COMMON] unsigned char 
  5970 ;;  sign            1    4[COMMON] unsigned char 
  5971 ;; Auto vars:     Size  Location     Type
  5972 ;;		None
  5973 ;; Return value:  Size  Location     Type
  5974 ;;                  3    0[COMMON] float 
  5975 ;; Registers used:
  5976 ;;		wreg, status,2, status,0
  5977 ;; Tracked objects:
  5978 ;;		On entry : 0/0
  5979 ;;		On exit  : 0/0
  5980 ;;		Unchanged: 0/0
  5981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5982 ;;      Params:         5       0       0       0       0
  5983 ;;      Locals:         0       0       0       0       0
  5984 ;;      Temps:          3       0       0       0       0
  5985 ;;      Totals:         8       0       0       0       0
  5986 ;;Total ram usage:        8 bytes
  5987 ;; Hardware stack levels used:    1
  5988 ;; This function calls:
  5989 ;;		Nothing
  5990 ;; This function is called by:
  5991 ;;		i1___ftdiv
  5992 ;;		i1___lwtoft
  5993 ;; This function uses a non-reentrant model
  5994 ;;
  5995                           
  5996                           
  5997                           ;psect for function i1___ftpack
  5998  0E1F                     i1___ftpack:	
  5999                           
  6000                           ;incstack = 0
  6001                           ; Regs used in i1___ftpack: [wreg+status,2+status,0]
  6002  0E1F  0874               	movf	i1___ftpack@exp,w
  6003  0E20  1903               	btfsc	3,2
  6004  0E21  2E27               	goto	i1l1887
  6005  0E22  0873               	movf	i1___ftpack@arg+2,w
  6006  0E23  0472               	iorwf	i1___ftpack@arg+1,w
  6007  0E24  0471               	iorwf	i1___ftpack@arg,w
  6008  0E25  1D03               	skipz
  6009  0E26  2E3A               	goto	i1l1893
  6010  0E27                     i1l1887:	
  6011  0E27  3000               	movlw	0
  6012  0E28  00F1               	movwf	?i1___ftpack
  6013  0E29  3000               	movlw	0
  6014  0E2A  00F2               	movwf	?i1___ftpack+1
  6015  0E2B  3000               	movlw	0
  6016  0E2C  00F3               	movwf	?i1___ftpack+2
  6017  0E2D  0008               	return
  6018  0E2E                     i1l1891:	
  6019  0E2E  3001               	movlw	1
  6020  0E2F  00F6               	movwf	??i1___ftpack
  6021  0E30  0876               	movf	??i1___ftpack,w
  6022  0E31  07F4               	addwf	i1___ftpack@exp,f
  6023  0E32  3001               	movlw	1
  6024  0E33                     u209_25:	
  6025  0E33  1003               	clrc
  6026  0E34  0CF3               	rrf	i1___ftpack@arg+2,f
  6027  0E35  0CF2               	rrf	i1___ftpack@arg+1,f
  6028  0E36  0CF1               	rrf	i1___ftpack@arg,f
  6029  0E37  3EFF               	addlw	-1
  6030  0E38  1D03               	skipz
  6031  0E39  2E33               	goto	u209_25
  6032  0E3A                     i1l1893:	
  6033  0E3A  30FE               	movlw	254
  6034  0E3B  0573               	andwf	i1___ftpack@arg+2,w
  6035  0E3C  1903               	btfsc	3,2
  6036  0E3D  2E55               	goto	i1l584
  6037  0E3E  2E2E               	goto	i1l1891
  6038  0E3F                     i1l1895:	
  6039  0E3F  3001               	movlw	1
  6040  0E40  00F6               	movwf	??i1___ftpack
  6041  0E41  0876               	movf	??i1___ftpack,w
  6042  0E42  07F4               	addwf	i1___ftpack@exp,f
  6043  0E43  3001               	movlw	1
  6044  0E44  07F1               	addwf	i1___ftpack@arg,f
  6045  0E45  3000               	movlw	0
  6046  0E46  1803               	skipnc
  6047  0E47  3001               	movlw	1
  6048  0E48  07F2               	addwf	i1___ftpack@arg+1,f
  6049  0E49  3000               	movlw	0
  6050  0E4A  1803               	skipnc
  6051  0E4B  3001               	movlw	1
  6052  0E4C  07F3               	addwf	i1___ftpack@arg+2,f
  6053  0E4D  3001               	movlw	1
  6054  0E4E                     u211_25:	
  6055  0E4E  1003               	clrc
  6056  0E4F  0CF3               	rrf	i1___ftpack@arg+2,f
  6057  0E50  0CF2               	rrf	i1___ftpack@arg+1,f
  6058  0E51  0CF1               	rrf	i1___ftpack@arg,f
  6059  0E52  3EFF               	addlw	-1
  6060  0E53  1D03               	skipz
  6061  0E54  2E4E               	goto	u211_25
  6062  0E55                     i1l584:	
  6063  0E55  30FF               	movlw	255
  6064  0E56  0573               	andwf	i1___ftpack@arg+2,w
  6065  0E57  1903               	btfsc	3,2
  6066  0E58  2E64               	goto	i1l1903
  6067  0E59  2E3F               	goto	i1l1895
  6068  0E5A                     i1l1901:	
  6069  0E5A  3001               	movlw	1
  6070  0E5B  02F4               	subwf	i1___ftpack@exp,f
  6071  0E5C  3001               	movlw	1
  6072  0E5D                     u213_25:	
  6073  0E5D  1003               	clrc
  6074  0E5E  0DF1               	rlf	i1___ftpack@arg,f
  6075  0E5F  0DF2               	rlf	i1___ftpack@arg+1,f
  6076  0E60  0DF3               	rlf	i1___ftpack@arg+2,f
  6077  0E61  3EFF               	addlw	-1
  6078  0E62  1D03               	skipz
  6079  0E63  2E5D               	goto	u213_25
  6080  0E64                     i1l1903:	
  6081  0E64  1BF2               	btfsc	i1___ftpack@arg+1,7
  6082  0E65  2E6A               	goto	i1l591
  6083  0E66  3002               	movlw	2
  6084  0E67  0274               	subwf	i1___ftpack@exp,w
  6085  0E68  1803               	skipnc
  6086  0E69  2E5A               	goto	i1l1901
  6087  0E6A                     i1l591:	
  6088  0E6A  1874               	btfsc	i1___ftpack@exp,0
  6089  0E6B  2E72               	goto	i1l592
  6090  0E6C  30FF               	movlw	255
  6091  0E6D  05F1               	andwf	i1___ftpack@arg,f
  6092  0E6E  307F               	movlw	127
  6093  0E6F  05F2               	andwf	i1___ftpack@arg+1,f
  6094  0E70  30FF               	movlw	255
  6095  0E71  05F3               	andwf	i1___ftpack@arg+2,f
  6096  0E72                     i1l592:	
  6097  0E72  1003               	clrc
  6098  0E73  0CF4               	rrf	i1___ftpack@exp,f
  6099  0E74  0874               	movf	i1___ftpack@exp,w
  6100  0E75  00F6               	movwf	??i1___ftpack
  6101  0E76  01F7               	clrf	??i1___ftpack+1
  6102  0E77  01F8               	clrf	??i1___ftpack+2
  6103  0E78  3010               	movlw	16
  6104  0E79                     u217_25:	
  6105  0E79  1003               	clrc
  6106  0E7A  0DF6               	rlf	??i1___ftpack,f
  6107  0E7B  0DF7               	rlf	??i1___ftpack+1,f
  6108  0E7C  0DF8               	rlf	??i1___ftpack+2,f
  6109  0E7D  3EFF               	addlw	-1
  6110  0E7E  1D03               	skipz
  6111  0E7F  2E79               	goto	u217_25
  6112  0E80  0876               	movf	??i1___ftpack,w
  6113  0E81  04F1               	iorwf	i1___ftpack@arg,f
  6114  0E82  0877               	movf	??i1___ftpack+1,w
  6115  0E83  04F2               	iorwf	i1___ftpack@arg+1,f
  6116  0E84  0878               	movf	??i1___ftpack+2,w
  6117  0E85  04F3               	iorwf	i1___ftpack@arg+2,f
  6118  0E86  0875               	movf	i1___ftpack@sign,w
  6119  0E87  1903               	btfsc	3,2
  6120  0E88  0008               	return
  6121  0E89  17F3               	bsf	i1___ftpack@arg+2,7
  6122  0E8A  0008               	return
  6123  0E8B                     __end_ofi1___ftpack:	
  6124                           
  6125                           	psect	text32
  6126  09BC                     __ptext32:	
  6127 ;; *************** function _getChar_ *****************
  6128 ;; Defined at:
  6129 ;;		line 25 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\serial.c"
  6130 ;; Parameters:    Size  Location     Type
  6131 ;;		None
  6132 ;; Auto vars:     Size  Location     Type
  6133 ;;		None
  6134 ;; Return value:  Size  Location     Type
  6135 ;;                  1    wreg      unsigned char 
  6136 ;; Registers used:
  6137 ;;		wreg
  6138 ;; Tracked objects:
  6139 ;;		On entry : 0/0
  6140 ;;		On exit  : 0/0
  6141 ;;		Unchanged: 0/0
  6142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6143 ;;      Params:         0       0       0       0       0
  6144 ;;      Locals:         0       0       0       0       0
  6145 ;;      Temps:          0       0       0       0       0
  6146 ;;      Totals:         0       0       0       0       0
  6147 ;;Total ram usage:        0 bytes
  6148 ;; Hardware stack levels used:    1
  6149 ;; This function calls:
  6150 ;;		Nothing
  6151 ;; This function is called by:
  6152 ;;		_ISR
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           
  6157                           ;psect for function _getChar_
  6158  09BC                     _getChar_:	
  6159                           
  6160                           ;serial.c: 27: return RCREG;
  6161                           
  6162                           ;incstack = 0
  6163                           ; Regs used in _getChar_: [wreg]
  6164  09BC  1283               	bcf	3,5	;RP0=0, select bank0
  6165  09BD  1303               	bcf	3,6	;RP1=0, select bank0
  6166  09BE  081A               	movf	26,w	;volatile
  6167  09BF  0008               	return
  6168  09C0                     __end_of_getChar_:	
  6169                           
  6170                           	psect	text33
  6171  0D0C                     __ptext33:	
  6172 ;; *************** function _char2int_ *****************
  6173 ;; Defined at:
  6174 ;;		line 47 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\serial.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;		None
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;  int_value2      2    4[BANK0 ] unsigned int 
  6179 ;;  int_value1      2    2[BANK0 ] unsigned int 
  6180 ;;  int_value0      2    0[BANK0 ] unsigned int 
  6181 ;; Return value:  Size  Location     Type
  6182 ;;                  1    wreg      void 
  6183 ;; Registers used:
  6184 ;;		wreg, status,2, status,0, pclath, cstack
  6185 ;; Tracked objects:
  6186 ;;		On entry : 0/0
  6187 ;;		On exit  : 0/0
  6188 ;;		Unchanged: 0/0
  6189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6190 ;;      Params:         0       0       0       0       0
  6191 ;;      Locals:         0       6       0       0       0
  6192 ;;      Temps:          6       0       0       0       0
  6193 ;;      Totals:         6       6       0       0       0
  6194 ;;Total ram usage:       12 bytes
  6195 ;; Hardware stack levels used:    1
  6196 ;; Hardware stack levels required when called:    1
  6197 ;; This function calls:
  6198 ;;		i1___wmul
  6199 ;; This function is called by:
  6200 ;;		_ISR
  6201 ;; This function uses a non-reentrant model
  6202 ;;
  6203                           
  6204                           
  6205                           ;psect for function _char2int_
  6206  0D0C                     _char2int_:	
  6207                           
  6208                           ;serial.c: 48: uint16_t int_value0 = 0;
  6209                           
  6210                           ;incstack = 0
  6211                           ; Regs used in _char2int_: [wreg+status,2+status,0+pclath+cstack]
  6212  0D0C  1283               	bcf	3,5	;RP0=0, select bank0
  6213  0D0D  1303               	bcf	3,6	;RP1=0, select bank0
  6214  0D0E  01A0               	clrf	char2int_@int_value0
  6215  0D0F  01A1               	clrf	char2int_@int_value0+1
  6216                           
  6217                           ;serial.c: 49: uint16_t int_value1 = 0;
  6218  0D10  01A2               	clrf	char2int_@int_value1
  6219  0D11  01A3               	clrf	char2int_@int_value1+1
  6220                           
  6221                           ;serial.c: 50: uint16_t int_value2 = 0;
  6222  0D12  01A4               	clrf	char2int_@int_value2
  6223  0D13  01A5               	clrf	char2int_@int_value2+1
  6224                           
  6225                           ;serial.c: 52: int_value0 = data_recived[2] - 48;
  6226  0D14  0852               	movf	_data_recived+2,w
  6227  0D15  3ED0               	addlw	208
  6228  0D16  00A0               	movwf	char2int_@int_value0
  6229  0D17  30FF               	movlw	255
  6230  0D18  1803               	skipnc
  6231  0D19  3000               	movlw	0
  6232  0D1A  00A1               	movwf	char2int_@int_value0+1
  6233                           
  6234                           ;serial.c: 53: int_value1 = data_recived[1] - 48;
  6235  0D1B  0851               	movf	_data_recived+1,w
  6236  0D1C  3ED0               	addlw	208
  6237  0D1D  00A2               	movwf	char2int_@int_value1
  6238  0D1E  30FF               	movlw	255
  6239  0D1F  1803               	skipnc
  6240  0D20  3000               	movlw	0
  6241  0D21  00A3               	movwf	char2int_@int_value1+1
  6242                           
  6243                           ;serial.c: 54: int_value2 = data_recived[0] - 48;
  6244  0D22  0850               	movf	_data_recived,w
  6245  0D23  3ED0               	addlw	208
  6246  0D24  00A4               	movwf	char2int_@int_value2
  6247  0D25  30FF               	movlw	255
  6248  0D26  1803               	skipnc
  6249  0D27  3000               	movlw	0
  6250  0D28  00A5               	movwf	char2int_@int_value2+1
  6251                           
  6252                           ;serial.c: 56: int_value = int_value0 + int_value1*10 + int_value2*100 +1;
  6253  0D29  0823               	movf	char2int_@int_value1+1,w
  6254  0D2A  00F2               	movwf	i1___wmul@multiplier+1
  6255  0D2B  0822               	movf	char2int_@int_value1,w
  6256  0D2C  00F1               	movwf	i1___wmul@multiplier
  6257  0D2D  300A               	movlw	10
  6258  0D2E  00F3               	movwf	i1___wmul@multiplicand
  6259  0D2F  3000               	movlw	0
  6260  0D30  00F4               	movwf	i1___wmul@multiplicand+1
  6261  0D31  120A  158A  225C  120A  158A  	fcall	i1___wmul
  6262  0D36  0871               	movf	?i1___wmul,w
  6263  0D37  00F7               	movwf	??_char2int_
  6264  0D38  0872               	movf	?i1___wmul+1,w
  6265  0D39  00F8               	movwf	??_char2int_+1
  6266  0D3A  1283               	bcf	3,5	;RP0=0, select bank0
  6267  0D3B  1303               	bcf	3,6	;RP1=0, select bank0
  6268  0D3C  0825               	movf	char2int_@int_value2+1,w
  6269  0D3D  00F2               	movwf	i1___wmul@multiplier+1
  6270  0D3E  0824               	movf	char2int_@int_value2,w
  6271  0D3F  00F1               	movwf	i1___wmul@multiplier
  6272  0D40  3064               	movlw	100
  6273  0D41  00F3               	movwf	i1___wmul@multiplicand
  6274  0D42  3000               	movlw	0
  6275  0D43  00F4               	movwf	i1___wmul@multiplicand+1
  6276  0D44  120A  158A  225C   	fcall	i1___wmul
  6277  0D47  0871               	movf	?i1___wmul,w
  6278  0D48  0777               	addwf	??_char2int_,w
  6279  0D49  00F9               	movwf	??_char2int_+2
  6280  0D4A  0872               	movf	?i1___wmul+1,w
  6281  0D4B  1803               	skipnc
  6282  0D4C  0A72               	incf	?i1___wmul+1,w
  6283  0D4D  0778               	addwf	??_char2int_+1,w
  6284  0D4E  00FA               	movwf	??_char2int_+3
  6285  0D4F  1283               	bcf	3,5	;RP0=0, select bank0
  6286  0D50  1303               	bcf	3,6	;RP1=0, select bank0
  6287  0D51  0820               	movf	char2int_@int_value0,w
  6288  0D52  0779               	addwf	??_char2int_+2,w
  6289  0D53  00FB               	movwf	??_char2int_+4
  6290  0D54  0821               	movf	char2int_@int_value0+1,w
  6291  0D55  1803               	skipnc
  6292  0D56  0A21               	incf	char2int_@int_value0+1,w
  6293  0D57  077A               	addwf	??_char2int_+3,w
  6294  0D58  00FC               	movwf	??_char2int_+5
  6295  0D59  087B               	movf	??_char2int_+4,w
  6296  0D5A  3E01               	addlw	1
  6297  0D5B  00DA               	movwf	_int_value
  6298  0D5C  087C               	movf	??_char2int_+5,w
  6299  0D5D  1803               	skipnc
  6300  0D5E  3E01               	addlw	1
  6301  0D5F  3E00               	addlw	0
  6302  0D60  00DB               	movwf	_int_value+1
  6303  0D61  0008               	return
  6304  0D62                     __end_of_char2int_:	
  6305                           
  6306                           	psect	text34
  6307  0A5C                     __ptext34:	
  6308 ;; *************** function i1___wmul *****************
  6309 ;; Defined at:
  6310 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  6311 ;; Parameters:    Size  Location     Type
  6312 ;;  multiplier      2    0[COMMON] unsigned int 
  6313 ;;  multiplicand    2    2[COMMON] unsigned int 
  6314 ;; Auto vars:     Size  Location     Type
  6315 ;;  __wmul          2    4[COMMON] unsigned int 
  6316 ;; Return value:  Size  Location     Type
  6317 ;;                  2    0[COMMON] unsigned int 
  6318 ;; Registers used:
  6319 ;;		wreg, status,2, status,0
  6320 ;; Tracked objects:
  6321 ;;		On entry : 0/0
  6322 ;;		On exit  : 0/0
  6323 ;;		Unchanged: 0/0
  6324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6325 ;;      Params:         4       0       0       0       0
  6326 ;;      Locals:         2       0       0       0       0
  6327 ;;      Temps:          0       0       0       0       0
  6328 ;;      Totals:         6       0       0       0       0
  6329 ;;Total ram usage:        6 bytes
  6330 ;; Hardware stack levels used:    1
  6331 ;; This function calls:
  6332 ;;		Nothing
  6333 ;; This function is called by:
  6334 ;;		_char2int_
  6335 ;; This function uses a non-reentrant model
  6336 ;;
  6337                           
  6338                           
  6339                           ;psect for function i1___wmul
  6340  0A5C                     i1___wmul:	
  6341                           
  6342                           ;incstack = 0
  6343                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  6344  0A5C  01F5               	clrf	i1___wmul@product
  6345  0A5D  01F6               	clrf	i1___wmul@product+1
  6346  0A5E                     i1l2127:	
  6347  0A5E  1C71               	btfss	i1___wmul@multiplier,0
  6348  0A5F  2A66               	goto	i1l419
  6349  0A60  0873               	movf	i1___wmul@multiplicand,w
  6350  0A61  07F5               	addwf	i1___wmul@product,f
  6351  0A62  1803               	skipnc
  6352  0A63  0AF6               	incf	i1___wmul@product+1,f
  6353  0A64  0874               	movf	i1___wmul@multiplicand+1,w
  6354  0A65  07F6               	addwf	i1___wmul@product+1,f
  6355  0A66                     i1l419:	
  6356  0A66  3001               	movlw	1
  6357  0A67                     u257_25:	
  6358  0A67  1003               	clrc
  6359  0A68  0DF3               	rlf	i1___wmul@multiplicand,f
  6360  0A69  0DF4               	rlf	i1___wmul@multiplicand+1,f
  6361  0A6A  3EFF               	addlw	-1
  6362  0A6B  1D03               	skipz
  6363  0A6C  2A67               	goto	u257_25
  6364  0A6D  3001               	movlw	1
  6365  0A6E                     u258_25:	
  6366  0A6E  1003               	clrc
  6367  0A6F  0CF2               	rrf	i1___wmul@multiplier+1,f
  6368  0A70  0CF1               	rrf	i1___wmul@multiplier,f
  6369  0A71  3EFF               	addlw	-1
  6370  0A72  1D03               	skipz
  6371  0A73  2A6E               	goto	u258_25
  6372  0A74  0871               	movf	i1___wmul@multiplier,w
  6373  0A75  0472               	iorwf	i1___wmul@multiplier+1,w
  6374  0A76  1D03               	btfss	3,2
  6375  0A77  2A5E               	goto	i1l2127
  6376  0A78  0876               	movf	i1___wmul@product+1,w
  6377  0A79  00F2               	movwf	?i1___wmul+1
  6378  0A7A  0875               	movf	i1___wmul@product,w
  6379  0A7B  00F1               	movwf	?i1___wmul
  6380  0A7C  0008               	return
  6381  0A7D                     __end_ofi1___wmul:	
  6382                           
  6383                           	psect	text35
  6384  0CB9                     __ptext35:	
  6385 ;; *************** function _calculaErro *****************
  6386 ;; Defined at:
  6387 ;;		line 32 in file "C:\Users\Aluno.PC-17\Desktop\stepper_motor\stepper.c"
  6388 ;; Parameters:    Size  Location     Type
  6389 ;;		None
  6390 ;; Auto vars:     Size  Location     Type
  6391 ;;		None
  6392 ;; Return value:  Size  Location     Type
  6393 ;;                  1    wreg      void 
  6394 ;; Registers used:
  6395 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6396 ;; Tracked objects:
  6397 ;;		On entry : 0/0
  6398 ;;		On exit  : 0/0
  6399 ;;		Unchanged: 0/0
  6400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6401 ;;      Params:         0       0       0       0       0
  6402 ;;      Locals:         0       0       0       0       0
  6403 ;;      Temps:          2       0       0       0       0
  6404 ;;      Totals:         2       0       0       0       0
  6405 ;;Total ram usage:        2 bytes
  6406 ;; Hardware stack levels used:    1
  6407 ;; Hardware stack levels required when called:    1
  6408 ;; This function calls:
  6409 ;;		_abs
  6410 ;; This function is called by:
  6411 ;;		_ISR
  6412 ;; This function uses a non-reentrant model
  6413 ;;
  6414                           
  6415                           
  6416                           ;psect for function _calculaErro
  6417  0CB9                     _calculaErro:	
  6418                           
  6419                           ;stepper.c: 33: error = abs(position - setpoint);
  6420                           
  6421                           ;incstack = 0
  6422                           ; Regs used in _calculaErro: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6423  0CB9  1683               	bsf	3,5	;RP0=1, select bank1
  6424  0CBA  1303               	bcf	3,6	;RP1=0, select bank1
  6425  0CBB  0961               	comf	_setpoint^(0+128),w
  6426  0CBC  00F5               	movwf	??_calculaErro
  6427  0CBD  0962               	comf	(_setpoint+1)^(0+128),w
  6428  0CBE  00F6               	movwf	??_calculaErro+1
  6429  0CBF  0AF5               	incf	??_calculaErro,f
  6430  0CC0  1903               	skipnz
  6431  0CC1  0AF6               	incf	??_calculaErro+1,f
  6432  0CC2  085F               	movf	_position^(0+128),w
  6433  0CC3  0775               	addwf	??_calculaErro,w
  6434  0CC4  00F1               	movwf	abs@a
  6435  0CC5  0860               	movf	(_position+1)^(0+128),w
  6436  0CC6  1803               	skipnc
  6437  0CC7  0A60               	incf	(_position+1)^(0+128),w
  6438  0CC8  0776               	addwf	??_calculaErro+1,w
  6439  0CC9  00F2               	movwf	abs@a+1
  6440  0CCA  120A  158A  21DF  120A  158A  	fcall	_abs
  6441  0CCF  0872               	movf	?_abs+1,w
  6442  0CD0  1683               	bsf	3,5	;RP0=1, select bank1
  6443  0CD1  1303               	bcf	3,6	;RP1=0, select bank1
  6444  0CD2  00DE               	movwf	(_error+1)^(0+128)
  6445  0CD3  0871               	movf	?_abs,w
  6446  0CD4  00DD               	movwf	_error^(0+128)
  6447                           
  6448                           ;stepper.c: 35: if(setpoint > position && error > 2048)
  6449  0CD5  0862               	movf	(_setpoint+1)^(0+128),w
  6450  0CD6  0260               	subwf	(_position+1)^(0+128),w
  6451  0CD7  1D03               	skipz
  6452  0CD8  2CDB               	goto	u278_25
  6453  0CD9  0861               	movf	_setpoint^(0+128),w
  6454  0CDA  025F               	subwf	_position^(0+128),w
  6455  0CDB                     u278_25:	
  6456  0CDB  1803               	skipnc
  6457  0CDC  2CEF               	goto	i1l2241
  6458  0CDD  085E               	movf	(_error+1)^(0+128),w
  6459  0CDE  3A80               	xorlw	128
  6460  0CDF  00FF               	movwf	127
  6461  0CE0  3088               	movlw	136
  6462  0CE1  027F               	subwf	127,w
  6463  0CE2  1D03               	skipz
  6464  0CE3  2CE6               	goto	u279_25
  6465  0CE4  3001               	movlw	1
  6466  0CE5  025D               	subwf	_error^(0+128),w
  6467  0CE6                     u279_25:	
  6468  0CE6  1C03               	skipc
  6469  0CE7  2CEF               	goto	i1l2241
  6470                           
  6471                           ;stepper.c: 36: error = -error;
  6472  0CE8  1683               	bsf	3,5	;RP0=1, select bank1
  6473  0CE9  1303               	bcf	3,6	;RP1=0, select bank1
  6474  0CEA  09DD               	comf	_error^(0+128),f
  6475  0CEB  09DE               	comf	(_error+1)^(0+128),f
  6476  0CEC  0ADD               	incf	_error^(0+128),f
  6477  0CED  1903               	skipnz
  6478  0CEE  0ADE               	incf	(_error+1)^(0+128),f
  6479  0CEF                     i1l2241:	
  6480                           
  6481                           ;stepper.c: 38: if(setpoint < position && error < 2048)
  6482  0CEF  1683               	bsf	3,5	;RP0=1, select bank1
  6483  0CF0  1303               	bcf	3,6	;RP1=0, select bank1
  6484  0CF1  0860               	movf	(_position+1)^(0+128),w
  6485  0CF2  0262               	subwf	(_setpoint+1)^(0+128),w
  6486  0CF3  1D03               	skipz
  6487  0CF4  2CF7               	goto	u280_25
  6488  0CF5  085F               	movf	_position^(0+128),w
  6489  0CF6  0261               	subwf	_setpoint^(0+128),w
  6490  0CF7                     u280_25:	
  6491  0CF7  1803               	skipnc
  6492  0CF8  0008               	return
  6493  0CF9  085E               	movf	(_error+1)^(0+128),w
  6494  0CFA  3A80               	xorlw	128
  6495  0CFB  00FF               	movwf	127
  6496  0CFC  3088               	movlw	136
  6497  0CFD  027F               	subwf	127,w
  6498  0CFE  1D03               	skipz
  6499  0CFF  2D02               	goto	u281_25
  6500  0D00  3000               	movlw	0
  6501  0D01  025D               	subwf	_error^(0+128),w
  6502  0D02                     u281_25:	
  6503  0D02  1803               	skipnc
  6504  0D03  0008               	return
  6505                           
  6506                           ;stepper.c: 39: error = -error;
  6507  0D04  1683               	bsf	3,5	;RP0=1, select bank1
  6508  0D05  1303               	bcf	3,6	;RP1=0, select bank1
  6509  0D06  09DD               	comf	_error^(0+128),f
  6510  0D07  09DE               	comf	(_error+1)^(0+128),f
  6511  0D08  0ADD               	incf	_error^(0+128),f
  6512  0D09  1903               	skipnz
  6513  0D0A  0ADE               	incf	(_error+1)^(0+128),f
  6514  0D0B  0008               	return
  6515  0D0C                     __end_of_calculaErro:	
  6516                           
  6517                           	psect	text36
  6518  09DF                     __ptext36:	
  6519 ;; *************** function _abs *****************
  6520 ;; Defined at:
  6521 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;  a               2    0[COMMON] int 
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;		None
  6526 ;; Return value:  Size  Location     Type
  6527 ;;                  2    0[COMMON] int 
  6528 ;; Registers used:
  6529 ;;		wreg, status,2, status,0
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6535 ;;      Params:         2       0       0       0       0
  6536 ;;      Locals:         0       0       0       0       0
  6537 ;;      Temps:          2       0       0       0       0
  6538 ;;      Totals:         4       0       0       0       0
  6539 ;;Total ram usage:        4 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; This function calls:
  6542 ;;		Nothing
  6543 ;; This function is called by:
  6544 ;;		_calculaErro
  6545 ;; This function uses a non-reentrant model
  6546 ;;
  6547                           
  6548                           
  6549                           ;psect for function _abs
  6550  09DF                     _abs:	
  6551                           
  6552                           ;incstack = 0
  6553                           ; Regs used in _abs: [wreg+status,2+status,0]
  6554  09DF  1FF2               	btfss	abs@a+1,7
  6555  09E0  0008               	return
  6556  09E1  0971               	comf	abs@a,w
  6557  09E2  00F3               	movwf	??_abs
  6558  09E3  0972               	comf	abs@a+1,w
  6559  09E4  00F4               	movwf	??_abs+1
  6560  09E5  0AF3               	incf	??_abs,f
  6561  09E6  1903               	skipnz
  6562  09E7  0AF4               	incf	??_abs+1,f
  6563  09E8  0873               	movf	??_abs,w
  6564  09E9  00F1               	movwf	?_abs
  6565  09EA  0874               	movf	??_abs+1,w
  6566  09EB  00F2               	movwf	?_abs+1
  6567  09EC  0008               	return
  6568  09ED                     __end_of_abs:	
  6569  007E                     btemp	set	126	;btemp
  6570  007E                     wtemp0	set	126


Data Sizes:
    Strings     48
    Constant    0
    Data        7
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     12      12
    BANK0            80     48      63
    BANK1            80     59      79
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sendString_@dado	PTR unsigned char  size(2) Largest target is 19
		 -> STR_5(CODE[19]), STR_4(CODE[16]), c_int_value_(BANK1[5]), 

    LCD_sendString@string	PTR unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[4]), c_int_value_(BANK1[5]), STR_1(CODE[4]), 

    LCD_TRIS	PTR volatile unsigned int  size(2) Largest target is 1
		 -> TRISB(SFR1[1]), 

    LCD_PORT	PTR volatile unsigned int  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_char2int_
    i1_setPosicaoDesejada->i1___lwtoft
    i1___lwtoft->i1___ftpack
    i1___fttol->i1___lwtoft
    i1___ftdiv->i1___lwtoft
    _char2int_->i1___wmul
    _calculaErro->_abs

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->i1_setPosicaoDesejada
    i1_setPosicaoDesejada->i1___fttol
    i1___fttol->i1___ftdiv

Critical Paths under _main in BANK1

    _main->_int2char_
    _setup->_setPosicaoAtual
    _setupSerial->___aldiv
    _setPosicaoAtual->___fttol
    _LCD_Setup->_LCD_SendByte
    _setPosicaoDesejada->___fttol
    ___ftdiv->___lwtoft
    _int2char_->_getPosicaoAtual
    _getPosicaoAtual->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    _calculaVelocidade->___wmul
    ___wmul->___awdiv
    _LCD_sendString->_LCD_SetCursor
    _LCD_SetCursor->_LCD_SendByte
    _LCD_SendByte->_LCD_SendNb

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   27606
                                             56 BANK1      3     3      0
                     _LCD_sendString
                            ___ftmul
                            ___fttol
                           ___lwtoft
                  _calculaVelocidade
                    _getPosicaoAtual
                      _getVelocidade
                          _int2char_
                          _sendChar_
                        _sendString_
                 _setPosicaoDesejada
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    6570
                          _LCD_Setup
                    _setPosicaoAtual
                        _setupSerial
                       _setupStepper
 ---------------------------------------------------------------------------------
 (2) _setupStepper                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupSerial                                          6     4      2     610
                                             15 BANK1      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     512
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (2) _setPosicaoAtual                                      2     0      2    4707
                                             42 BANK1      2     0      2
                            ___ftdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) _LCD_Setup                                            2     2      0    1253
                                             21 BANK1      2     2      0
                       _LCD_SendByte
                         _LCD_SendNb
 ---------------------------------------------------------------------------------
 (1) _setPosicaoDesejada                                   2     0      2    4840
                                             42 BANK1      2     0      2
                            ___ftdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    2160
                                             12 BANK1     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _sendString_                                          4     2      2     302
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _sendChar_                                            1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _int2char_                                           12    10      2    1467
                                             44 BANK1     12    10      2
                            ___ftmul (ARG)
                            ___fttol (ARG)
                            ___lwdiv
                           ___lwtoft (ARG)
                             ___wmul
                    _getPosicaoAtual (ARG)
                      _getVelocidade (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     374
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (1) _getVelocidade                                        2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getPosicaoAtual                                      2     0      2    4784
                                             42 BANK1      2     0      2
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             4     1      3    1955
                                              8 BANK1      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     517
                                             28 BANK1     14    10      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2312
                                             12 BANK1     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1668
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _calculaVelocidade                                    4     4      0    1159
                                             15 BANK1      4     4      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     624
                                              9 BANK1      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     512
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (1) _LCD_sendString                                       8     4      4    3678
                                             25 BANK1      8     4      4
                       _LCD_SendByte
                      _LCD_SetCursor
 ---------------------------------------------------------------------------------
 (2) _LCD_SetCursor                                        4     3      1    1297
                                             21 BANK1      4     3      1
                       _LCD_SendByte
 ---------------------------------------------------------------------------------
 (3) _LCD_SendByte                                         8     7      1    1069
                                             13 BANK1      8     7      1
                         _LCD_SendNb
 ---------------------------------------------------------------------------------
 (3) _LCD_SendNb                                          13    13      0     184
                                              0 BANK1     13    13      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 16    16      0    2008
                                             32 BANK0     16    16      0
                        _calculaErro
                          _char2int_
                           _getChar_
               i1_setPosicaoDesejada
 ---------------------------------------------------------------------------------
 (6) i1_setPosicaoDesejada                                 2     0      2    1480
                                             30 BANK0      2     0      2
                          i1___ftdiv
                          i1___fttol
                         i1___lwtoft
 ---------------------------------------------------------------------------------
 (7) i1___lwtoft                                           4     1      3     435
                                              8 COMMON     4     1      3
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (7) i1___fttol                                           14    10      4     278
                                             16 BANK0     14    10      4
                          i1___ftdiv (ARG)
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) i1___ftdiv                                           16    10      6     719
                                              0 BANK0     16    10      6
                         i1___ftpack
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) i1___ftpack                                           8     3      5     387
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (6) _getChar_                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _char2int_                                           12    12      0     268
                                              6 COMMON     6     6      0
                                              0 BANK0      6     6      0
                           i1___wmul
 ---------------------------------------------------------------------------------
 (7) i1___wmul                                             6     2      4     196
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) _calculaErro                                          2     2      0     119
                                              4 COMMON     2     2      0
                                _abs
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     119
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_sendString
     _LCD_SendByte
       _LCD_SendNb
     _LCD_SetCursor
       _LCD_SendByte
         _LCD_SendNb
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _calculaVelocidade
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _getPosicaoAtual
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _getVelocidade
   _int2char_
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwdiv (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
     _getPosicaoAtual (ARG)
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _getVelocidade (ARG)
   _sendChar_
   _sendString_
   _setPosicaoDesejada
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _setup
     _LCD_Setup
       _LCD_SendByte
         _LCD_SendNb
       _LCD_SendNb
     _setPosicaoAtual
       ___ftdiv
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _setupSerial
       ___aldiv
     _setupStepper

 _ISR (ROOT)
   _calculaErro
     _abs
   _char2int_
     i1___wmul
   _getChar_
   i1_setPosicaoDesejada
     i1___ftdiv
       i1___ftpack
       i1___lwtoft (ARG)
         i1___ftpack
     i1___fttol
       i1___ftdiv (ARG)
         i1___ftpack
         i1___lwtoft (ARG)
           i1___ftpack
       i1___lwtoft (ARG)
         i1___ftpack
     i1___lwtoft
       i1___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               55      0       0       9        0.0%
BITBANK3            55      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     3B      4F       7       98.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     30      3F       5       78.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               D      C       C       1       92.3%
BITCOMMON            D      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      9A      12        0.0%
ABS                  0      0      9A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jul 21 13:56:16 2022

                                   _i 005C                                     pc 0002  
                          i1___ftpack 0E1F                           ?_LCD_SendNb 0071  
                         __CFG_CP$OFF 0000                          ___awdiv@sign 00A6  
                          i1___lwtoft 09FE                                    fsr 0004  
                 ___wmul@multiplicand 00AB                      i1___wmul@product 0075  
                      _LCD_SendNb$363 00A4                        _LCD_SendNb$364 00A6  
                      _LCD_SendNb$365 00A8                        _LCD_SendNb$366 00AA  
                       _LCD_SetCursor 0A40                       ??_getVelocidade 00A2  
                                 l174 0683                                   l419 0021  
                                 l478 0166                                   l591 0ED8  
                                 l592 0EE0                                   l584 0EC3  
                                 l675 00AC                                   _PR2 0092  
                        __CFG_CPD$OFF 0000                                   _ISR 0520  
                                 _abs 09DF                                   fsr0 0004  
                        i1___ftdiv@f1 0023                          i1___ftdiv@f2 0020  
                        i1___ftdiv@f3 002B                                   indf 0000  
                        __CFG_IESO$ON 0000                          i1___fttol@f1 0030  
                        __CFG_LVP$OFF 0000                         ?_LCD_SendByte 00AD  
                                ?_ISR 0071                          ___ftdiv@cntr 00B6  
        __end_ofi1_setPosicaoDesejada 0B6A                          ___ftdiv@sign 00BB  
                                ?_abs 0071                                  l2013 0D6E  
                                l2031 0D8F                                  l2111 0BBB  
                                l2041 0DB0                                  l2121 0BDC  
                                l2019 0D79                                  l2301 0F2C  
                                l2045 0DB8                                  l2037 0DA5  
                                l2029 0D81                                  l2061 0381  
                                l2117 0BD1                                  l2109 0BAD  
                                l2055 036B                                  l2073 03C0  
                                l2085 03E8                                  l2077 03D0  
                                l1703 04E3                                  l2255 0C1E  
                                l1721 0E9C                                  l2089 03F8  
                                l2345 0B6D                                  l1801 02B3  
                                l1731 0EC8                                  l1723 0EA8  
                                l1733 0ED2                                  l1725 0EAD  
                                l1717 0E95                                  l1821 030E  
                                l2453 0674                                  l2445 0657  
                                l1807 02C9                                  l2297 0F22  
                                l2289 0F03                                  l2449 0665  
                                l1691 0473                                  l1843 0052  
                                l1685 043B                                  l1749 0C37  
                                l1861 0084                                  l1829 032D  
                                l1773 0187                                  l1765 0177  
                                l1871 00AF                                  l1863 0094  
                                l1791 01DA                                  l1783 01BF  
                                l1775 0197                                  l1697 04AB  
                                l1875 00BD                                  l1787 01CC  
                                l1869 00A1                                  l1985 0A4C  
                                l1993 0019                                  l1987 0A4D  
                                STR_1 083C                                  STR_2 0838  
                                STR_3 0833                                  STR_4 0823  
                                STR_5 0810                                  u2015 0085  
                                u2045 00A3                                  u2305 0D90  
                                u2225 0022                                  u2315 0D9C  
                                u2235 0029                                  u2325 0DA6  
                                u1615 0494                                  u2415 03D1  
                                u2425 03D9                                  u2505 0BB0  
                                u1635 04CC                                  u1715 0ECB  
                                u2285 0D84                                  u2525 0BBC  
                                u3157 074E                                  u2375 038D  
                                u2535 0BC8                                  u3167 0DD5  
                                u2465 03F9                                  u2385 039F  
                                u2545 0BD2                                  u3177 0B95  
                                u1825 018B                                  u3187 051C  
                                u1595 045C                                  u1755 0EE7  
                                u1675 0EA1                                  u2475 0401  
                                u1915 02DB                                  u1925 02ED  
                                u1845 0199                                  u1695 0EBC  
                                u1935 030F                                  u1855 01AE  
                                u1785 0C58                                  u1945 0320  
                                u1865 01C0                                  u1955 032E  
                                u1985 0059                          __CFG_WRT$OFF 0000  
                       __CFG_FCMEN$ON 0000                                  abs@a 0071  
                                _main 0652                          ___ftpack@arg 00A0  
                        ___ftpack@exp 00A3                          i1___lwtoft@c 0079  
                                btemp 007E                         __CFG_BOREN$ON 0000  
                       i1___ftdiv@exp 002E                    __size_of_LCD_Setup 0062  
                                start 0012                         __CFG_MCLRE$ON 0000  
                   ??_getPosicaoAtual 00CC                          ___ftmul@cntr 00BA  
                        ___ftmul@sign 00BB                                 ??_ISR 0040  
                        ___fttol@exp1 00C9                                 ??_abs 0073  
                        ___fttol@lval 00C5                        ?_LCD_SetCursor 00B5  
                __size_of_calculaErro 0053                       __end_of___aldiv 01E3  
                               ?_main 0071                       __end_of___awdiv 0DBD  
                       __CFG_WDTE$OFF 0000                       __end_of___ftdiv 0353  
                     __end_of___ftmul 0426                       ___awdiv@divisor 00A0  
                     __end_of___fttol 00C6                                 _T2CON 0012  
                      __CFG_DEBUG$OFF 0000                       __end_of___lwdiv 0BE1  
                               i1l133 053B                                 i1l163 0647  
                               i1l148 060B                                 i1l419 0A66  
                               i1l591 0E6A                                 i1l592 0E72  
                               i1l584 0E55                                 i1l675 0FE6  
                     ___awdiv@counter 00A5                                 _RCREG 001A  
                               _RCSTA 0018                                 _SPBRG 0099  
                               _PORTB 0006                                 _PORTD 0008  
                               _TRISB 0086                                 _TRISD 0088  
                               _TXREG 0019                                 _TXSTA 0098  
                      ??_LCD_SendByte 00AE                                 _error 00DD  
                               _phase 005E                         ___ftpack@sign 00A4  
                               _speed 00DB                                 _setup 0A7D  
                               pclath 000A               __size_of_LCD_sendString 0079  
                    __end_ofi1___wmul 0A7D                   __size_of_LCD_SendNb 00FA  
                      i1___ftdiv@cntr 002A                        i1___ftdiv@sign 002F  
                    _LCD_SendByte$370 00B3                                 status 0003  
                 i1___wmul@multiplier 0071                                 wtemp0 007E  
                   _calculaVelocidade 0BE1                    __size_ofi1___ftdiv 00B8  
                  __size_ofi1___fttol 008E                        i1___ftpack@arg 0071  
                      i1___ftpack@exp 0074                    ?_calculaVelocidade 0071  
                     __initialization 07E0                          __end_of_main 07E0  
                         ?i1___ftpack 0071                   ??_calculaVelocidade 00AF  
                         ?i1___lwtoft 0079                          LCD_SendNb@NB 00AC  
                      i1___fttol@exp1 003D                        i1___fttol@lval 0039  
                              ??_main 00D8                         ___fttol@sign1 00C4  
                   __end_of_LCD_Setup 0E1F              __size_of_setPosicaoAtual 0030  
                        ?_sendString_ 00A0                      ___awdiv@dividend 00A2  
                              ?_setup 0071                      __end_of___ftpack 0EF9  
                              _ANSELH 0189                                i1l2213 0FDB  
                              i1l2205 0FBE                                i1l2127 0A5E  
                              i1l2151 0211                                i1l2215 0FE9  
                              i1l2207 0FCE                                i1l2241 0CEF  
                              i1l2145 01FB                                i1l2219 0FF7  
                              i1l2173 0275                                i1l2165 0256  
                              i1l2413 0605                                i1l2405 05D1  
                              i1l2441 0646                                i1l2417 0610  
           __end_of_calculaVelocidade 0C21                                i1l2187 0F8C  
                              i1l1901 0E5A                                i1l2381 0574  
                              i1l1903 0E64                                i1l2375 0560  
                              i1l2391 05AB                                i1l2367 0548  
                              i1l2389 05A7                                i1l2399 05BC  
                              i1l1891 0E2E                                u211_25 0E4E  
                              i1l1893 0E3A                                i1l1895 0E3F  
                              i1l1887 0E27                                u213_25 0E5D  
                              u217_25 0E79                                u209_25 0E33  
                              u262_25 0223                                u263_25 0235  
                              u280_25 0CF7                                u264_25 0257  
                              u272_25 0FBF                                u281_25 0D02  
                              u257_25 0A67                                u265_25 0268  
                    __end_of___lwtoft 0A40                                u258_25 0A6E  
                              u266_25 0276                                u275_25 0FDD  
                              u269_25 0F93                                u278_25 0CDB  
                              u279_25 0CE6                                u295_25 0551  
                              u298_25 0577            __end_of_setPosicaoDesejada 0B04  
                    __end_of_getChar_ 09C0                        __CFG_PWRTE$OFF 0000  
                    _LCD_ShiftDisplay 00EA                             ??___aldiv 00A8  
                              ___wmul 0015                             ??___awdiv 00A4  
                 LCD_sendString@i_386 00C0                       ??_LCD_SetCursor 00B6  
                           ??___ftdiv 00B2                       LCD_SendByte@reg 00B2  
                           ??___ftmul 00B2                             ??___fttol 00C0  
                        _c_int_value_ 00E3                             ??___lwdiv 00A4  
                i1_setPosicaoDesejada 0B34                      ___awdiv@quotient 00A7  
                 LCD_sendString@linha 00BB                 ___ftmul@f3_as_product 00B7  
                   __end_ofi1___ftdiv 029B                     __end_ofi1___fttol 1000  
                              saved_w 007E                          ?_setupSerial 00AF  
                 __size_ofi1___ftpack 006C               __end_of__initialization 07FC  
                 __size_ofi1___lwtoft 0014                         sendChar_@dado 00A0  
                     i1___ftpack@sign 0075                            ___ftdiv@f1 00AF  
                          ___ftdiv@f2 00AC                            ___ftdiv@f3 00B7  
                          ___ftmul@f1 00AC                            ___ftmul@f2 00AF  
                  __size_of_char2int_ 0056                            ___fttol@f1 00BC  
                      __pcstackCOMMON 0071                          __pidataBANK1 09C7  
                __end_of_LCD_SendByte 0C6B                          ??_LCD_SendNb 00A0  
               ?i1_setPosicaoDesejada 003E                         __end_of_setup 0AA4  
                        _data_recived 0050                            ___lwtoft@c 00A8  
                           ?i1___wmul 0071                       i1___fttol@sign1 0038  
                  __size_of_int2char_ 008E                     LCD_sendString@col 00BE  
                             ??_setup 00CC                       _getPosicaoAtual 0AA4  
                      _LCD_sendString 0EF9                            __pbssBANK0 0050  
                          __pbssBANK1 00DB            __size_of_calculaVelocidade 0040  
                   ??_setPosicaoAtual 00CC                    __end_of_LCD_SendNb 0520  
                     LCD_sendString@i 00BF                               ISR@dado 004F  
                          __pmaintext 0652                    __size_of_sendChar_ 0009  
                             ?___wmul 00A9                            __pintentry 0004  
                           ?___ftpack 00A0                            ??i1___wmul 0075  
                           ?___lwtoft 00A8                               _ISR$290 004D  
                             _ISR$287 0047                               _ISR$288 0049  
                             _ISR$289 004B                 __end_of_getVelocidade 09C7  
                           ?_getChar_ 0071                     __end_of_char2int_ 0D62  
              __end_of_LCD_sendString 0F72                  __size_of_sendString_ 0039  
                          __stringtab 0800                ??i1_setPosicaoDesejada 007D  
                   __end_of_int2char_ 0154                               ___aldiv 0154  
                        ??i1___ftpack 0076                               ___awdiv 0D62  
                       ??_calculaErro 0075                               ___ftdiv 029B  
                     __size_of___wmul 0023                               ___ftmul 0353  
                             ___fttol 0038                               ___lwdiv 0BA3  
                        ??i1___lwtoft 007C                      LCD_SendByte@byte 00AD  
                          ??___ftpack 00A5                               __ptext1 0A7D  
                             __ptext2 0A12                               __ptext3 0C6B  
                             __ptext4 0154                               __ptext5 0B04  
                             __ptext6 0DBD                               __ptext7 0AD4  
                             __ptext8 029B                               __ptext9 0B6A  
i1setPosicaoDesejada@posicao_desejada 003E    setPosicaoDesejada@posicao_desejada 00CA  
                          ??___lwtoft 00AB                          __size_of_ISR 0132  
                        __size_of_abs 000E               __end_of_getPosicaoAtual 0AD4  
                LCD_sendString@coluna 00BC                      ___aldiv@dividend 00A4  
                          ??_getChar_ 0071                       ?_LCD_sendString 00B9  
                LCD_sendString@string 00B9                     __end_of_sendChar_ 09DF  
                           _LCD_Setup 0DBD                               clrloop0 09CF  
                end_of_initialization 07FC                  __size_of_setupSerial 004E  
                  __end_ofi1___ftpack 0E8B                      LCD_SetCursor@aux 00B8  
                  __end_ofi1___lwtoft 0A12                 __size_of_LCD_SendByte 004A  
                           _RCSTAbits 0018                      ___aldiv@quotient 00AB  
               i1___wmul@multiplicand 0073                    _setPosicaoDesejada 0AD4  
                          _speed_ramp 005D                         ?_setupStepper 0071  
                           _PORTDbits 0008                   __end_of_calculaErro 0D0C  
                        _LCD_Controle 00EB                   ?_setPosicaoDesejada 00CA  
                           _TRISCbits 0087                             i1___ftdiv 01E3  
                           i1___fttol 0F72                            ?_LCD_Setup 0071  
                        _LCD_SendByte 0C21                           ___ftdiv@exp 00BA  
                ??_setPosicaoDesejada 00CC                           ___ftmul@exp 00B6  
                      __end_of___wmul 0038                 __end_of_LCD_SetCursor 0A5C  
                      ??_setupStepper 00A0                           _BAUDCTLbits 0187  
                     _setPosicaoAtual 0B04                   start_initialization 07E0  
                    ?_getPosicaoAtual 00CA                     __size_ofi1___wmul 0021  
                         __end_of_ISR 0652                           __end_of_abs 09ED  
                          ?i1___ftdiv 0020                       _setupSerial$992 00B1  
                          ?i1___fttol 0030              __CFG_FOSC$INTRC_NOCLKOUT 0000  
                 LCD_SetCursor@coluna 00B5                           _c_int_value 0055  
                            ??___wmul 00AD                            init_fetch0 09ED  
                         _calculaErro 0CB9                           __pdataBANK1 00E8  
                   __size_of___ftpack 006E                             ___latbits 0002  
                   __size_of___lwtoft 0018                         __pcstackBANK0 0020  
                       __pcstackBANK1 00A0                           ??_LCD_Setup 00B5  
                   __size_of_getChar_ 0004                             _char2int_ 0D0C  
                    ___lwdiv@dividend 00A2                              ?___aldiv 00A0  
                            ?___awdiv 00A0                              ?___ftdiv 00AC  
                            ?___ftmul 00AC                              ?___fttol 00BC  
                            ?___lwdiv 00A0               __end_of_setPosicaoAtual 0B34  
                           _int2char_ 00C6                             __pstrings 0800  
                    ??_LCD_sendString 00BD                         ??_sendString_ 00A2  
                         ??i1___ftdiv 0026                           ??i1___fttol 0034  
                    ___lwdiv@quotient 00A5                        __size_of_setup 0027  
                           _int_value 005A                            ?_char2int_ 0071  
                            _LCD_PORT 00ED                       ___aldiv@divisor 00A0  
                            _LCD_TRIS 00E8                     interrupt_function 0004  
                           _sendChar_ 09D6                       ___aldiv@counter 00A9  
                __end_of_setupStepper 0A28                        ___wmul@product 00AD  
                           clear_ram0 09CE                              _PIE1bits 008C  
              __size_of_getVelocidade 0007                              _PIR1bits 000C  
                        sendString_@j 00A3         __size_ofi1_setPosicaoDesejada 0036  
                         _LCD_Entrada 00EC                            ?_int2char_ 00CC  
                         __stringbase 080F                     ___wmul@multiplier 00A9  
                            i1___wmul 0A5C                   char2int_@int_value0 0020  
                 char2int_@int_value1 0022                   char2int_@int_value2 0024  
                       ??_setupSerial 00B1                   __end_of_sendString_ 0BA3  
                          ?_sendChar_ 0071                    LCD_SetCursor@linha 00B7  
                    __size_of___aldiv 008F                      __size_of___awdiv 005B  
                    __size_of___ftdiv 00B8                      ?_setPosicaoAtual 00CA  
                    __size_of___ftmul 00D3                      __size_of___fttol 008E  
                    __size_of___lwdiv 003E                              ___ftpack 0E8B  
                  __end_of__stringtab 0810                              ___lwtoft 0A28  
                 setupSerial@baudrate 00AF                         _getVelocidade 09C0  
                            _getChar_ 09BC                       ___lwdiv@divisor 00A0  
                     ___lwdiv@counter 00A7                              __ptext10 09D6  
                            __ptext11 00C6                              __ptext20 0015  
                            __ptext12 0BA3                              __ptext21 0D62  
                            __ptext13 09C0                              __ptext30 01E3  
                            __ptext22 0EF9                              __ptext14 0AA4  
                            __ptext31 0E1F                              __ptext23 0A40  
                            __ptext15 0A28                              __ptext32 09BC  
                            __ptext24 0C21                              __ptext16 0038  
                            __ptext33 0D0C                              __ptext25 0426  
                            __ptext17 0353                              __ptext34 0A5C  
                            __ptext26 0520                              __ptext18 0E8B  
                            __ptext35 0CB9                              __ptext27 0B34  
                            __ptext19 0BE1                              __ptext36 09DF  
                            __ptext28 09FE                              __ptext29 0F72  
                   __CFG_BOR4V$BOR40V 0000                           ??_char2int_ 0077  
                       __size_of_main 018E                   __end_of_setupSerial 0CB9  
         __size_of_setPosicaoDesejada 0030                              _setpoint 00E1  
                            _position 00DF                          ?_calculaErro 0071  
                          _LCD_SendNb 0426                           ??_int2char_ 00CE  
        setPosicaoAtual@posicao_atual 00CA                        ?_getVelocidade 00A0  
                          _INTCONbits 000B                           _sendString_ 0B6A  
                            init_ram0 09F1                 __size_of_setupStepper 0016  
                            intlevel1 0000              __size_of_getPosicaoAtual 0030  
                         ??_sendChar_ 00A0                __size_of_LCD_SetCursor 001C  
               _calculaVelocidade$991 00B1                             stringcode 080A  
                     sendString_@dado 00A0                          _setupStepper 0A12  
                            stringdir 080A                              stringtab 0800  
                        ___aldiv@sign 00AA                           _setupSerial 0C6B  
                 int2char_@int_value0 00D2                   int2char_@int_value1 00D4  
                 int2char_@int_value2 00D6                   int2char_@int_value_ 00CC  
                          _STATUSbits 0003  
