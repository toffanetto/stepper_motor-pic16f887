

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jul 05 20:19:45 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 1.45
    18                           ; Generated 16/11/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F887 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0095                     	;# 
   104  0096                     	;# 
   105  0097                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  0105                     	;# 
   115  0107                     	;# 
   116  0108                     	;# 
   117  0109                     	;# 
   118  010C                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  0185                     	;# 
   124  0187                     	;# 
   125  0188                     	;# 
   126  0189                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129                           
   130                           	psect	idataBANK0
   131  0121                     __pidataBANK0:	
   132                           
   133                           ;initializer for _phase
   134  0121  3401               	retlw	1
   135                           
   136                           ;initializer for _error
   137  0122  3401               	retlw	1
   138  0008                     _PORTDbits	set	8
   139  0012                     _T2CON	set	18
   140  000B                     _INTCONbits	set	11
   141  000C                     _PIR1bits	set	12
   142  0008                     _PORTD	set	8
   143  0092                     _PR2	set	146
   144  008C                     _PIE1bits	set	140
   145  0088                     _TRISD	set	136
   146                           
   147                           ; #config settings
   148  0000                     
   149                           	psect	cinit
   150  0015                     start_initialization:	
   151  0015                     __initialization:	
   152                           
   153                           ; Initialize objects allocated to BANK0
   154  0015  120A  118A  2121  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   155  001A  00B2               	movwf	__pdataBANK0& (0+127)
   156  001B  120A  118A  2122   	fcall	__pidataBANK0+1	;fetch initializer
   157  001E  00B3               	movwf	(__pdataBANK0+1)& (0+127)
   158                           
   159                           ; Clear objects allocated to BANK0
   160  001F  01AF               	clrf	__pbssBANK0& (0+127)
   161  0020  01B0               	clrf	(__pbssBANK0+1)& (0+127)
   162  0021  01B1               	clrf	(__pbssBANK0+2)& (0+127)
   163  0022                     end_of_initialization:	
   164                           ;End of C runtime variable initialization code
   165                           
   166  0022                     __end_of__initialization:	
   167  0022  0183               	clrf	3
   168  0023  120A  118A  28BA   	ljmp	_main	;jump to C main() function
   169                           
   170                           	psect	bssBANK0
   171  002F                     __pbssBANK0:	
   172  002F                     _poscaler2:	
   173  002F                     	ds	1
   174  0030                     _position:	
   175  0030                     	ds	1
   176  0031                     _setpoint:	
   177  0031                     	ds	1
   178                           
   179                           	psect	dataBANK0
   180  0032                     __pdataBANK0:	
   181  0032                     _phase:	
   182  0032                     	ds	1
   183  0033                     _error:	
   184  0033                     	ds	1
   185                           
   186                           	psect	cstackCOMMON
   187  0070                     __pcstackCOMMON:	
   188  0070                     ?_ISR:	
   189  0070                     ??_ISR:	
   190                           ; 1 bytes @ 0x0
   191                           
   192  0070                     ?_setup:	
   193                           ; 1 bytes @ 0x0
   194                           
   195  0070                     ?_main:	
   196                           ; 1 bytes @ 0x0
   197                           
   198                           
   199                           ; 1 bytes @ 0x0
   200  0070                     	ds	7
   201  0077                     ??_setup:	
   202                           
   203                           	psect	cstackBANK0
   204  0020                     __pcstackBANK0:	
   205                           ; 1 bytes @ 0x7
   206                           
   207  0020                     _ISR$136:	
   208                           
   209                           ; 2 bytes @ 0x0
   210  0020                     	ds	2
   211  0022                     _ISR$137:	
   212                           
   213                           ; 2 bytes @ 0x2
   214  0022                     	ds	2
   215  0024                     _ISR$138:	
   216                           
   217                           ; 2 bytes @ 0x4
   218  0024                     	ds	2
   219  0026                     _ISR$139:	
   220                           
   221                           ; 2 bytes @ 0x6
   222  0026                     	ds	2
   223  0028                     ?_abs:	
   224  0028                     abs@a:	
   225                           ; 2 bytes @ 0x8
   226                           
   227                           
   228                           ; 2 bytes @ 0x8
   229  0028                     	ds	2
   230  002A                     ??_abs:	
   231                           
   232                           ; 1 bytes @ 0xA
   233  002A                     	ds	2
   234  002C                     ??_main:	
   235                           
   236                           ; 1 bytes @ 0xC
   237  002C                     	ds	3
   238                           
   239                           	psect	maintext
   240  00BA                     __pmaintext:	
   241 ;;
   242 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   243 ;;
   244 ;; *************** function _main *****************
   245 ;; Defined at:
   246 ;;		line 57 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor\main.c"
   247 ;; Parameters:    Size  Location     Type
   248 ;;		None
   249 ;; Auto vars:     Size  Location     Type
   250 ;;		None
   251 ;; Return value:  Size  Location     Type
   252 ;;                  1    wreg      void 
   253 ;; Registers used:
   254 ;;		wreg, status,2, status,0, pclath, cstack
   255 ;; Tracked objects:
   256 ;;		On entry : B00/0
   257 ;;		On exit  : 0/0
   258 ;;		Unchanged: 0/0
   259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   260 ;;      Params:         0       0       0       0       0
   261 ;;      Locals:         0       0       0       0       0
   262 ;;      Temps:          0       3       0       0       0
   263 ;;      Totals:         0       3       0       0       0
   264 ;;Total ram usage:        3 bytes
   265 ;; Hardware stack levels required when called:    2
   266 ;; This function calls:
   267 ;;		_abs
   268 ;;		_setup
   269 ;; This function is called by:
   270 ;;		Startup code after reset
   271 ;; This function uses a non-reentrant model
   272 ;;
   273                           
   274                           
   275                           ;psect for function _main
   276  00BA                     _main:	
   277                           
   278                           ;main.c: 59: setup();
   279                           
   280                           ;incstack = 0
   281                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   282  00BA  120A  118A  2100  120A  118A  	fcall	_setup
   283  00BF                     l694:	
   284                           ;main.c: 61: while(1){
   285                           
   286                           
   287                           ;main.c: 63: if(PORTDbits.RD4==1)
   288  00BF  1283               	bcf	3,5	;RP0=0, select bank0
   289  00C0  1303               	bcf	3,6	;RP1=0, select bank0
   290  00C1  1A08               	btfsc	8,4	;volatile
   291                           
   292                           ;main.c: 64: setpoint = 0;
   293  00C2  01B1               	clrf	_setpoint
   294                           
   295                           ;main.c: 65: if(PORTDbits.RD5==1)
   296  00C3  1E88               	btfss	8,5	;volatile
   297  00C4  28C9               	goto	l702
   298                           
   299                           ;main.c: 66: setpoint = 20;
   300  00C5  3014               	movlw	20
   301  00C6  00AC               	movwf	??_main
   302  00C7  082C               	movf	??_main,w
   303  00C8  00B1               	movwf	_setpoint
   304  00C9                     l702:	
   305                           
   306                           ;main.c: 67: if(PORTDbits.RD6==1)
   307  00C9  1F08               	btfss	8,6	;volatile
   308  00CA  28CF               	goto	l706
   309                           
   310                           ;main.c: 68: setpoint = 40;
   311  00CB  3028               	movlw	40
   312  00CC  00AC               	movwf	??_main
   313  00CD  082C               	movf	??_main,w
   314  00CE  00B1               	movwf	_setpoint
   315  00CF                     l706:	
   316                           
   317                           ;main.c: 70: error = abs(position - setpoint);
   318  00CF  0831               	movf	_setpoint,w
   319  00D0  00AC               	movwf	??_main
   320  00D1  01AD               	clrf	??_main+1
   321  00D2  09AC               	comf	??_main,f
   322  00D3  09AD               	comf	??_main+1,f
   323  00D4  0AAC               	incf	??_main,f
   324  00D5  1903               	skipnz
   325  00D6  0AAD               	incf	??_main+1,f
   326  00D7  0830               	movf	_position,w
   327  00D8  072C               	addwf	??_main,w
   328  00D9  00A8               	movwf	abs@a
   329  00DA  082D               	movf	??_main+1,w
   330  00DB  1803               	skipnc
   331  00DC  0A2D               	incf	??_main+1,w
   332  00DD  00A9               	movwf	abs@a+1
   333  00DE  120A  118A  2111  120A  118A  	fcall	_abs
   334  00E3  1283               	bcf	3,5	;RP0=0, select bank0
   335  00E4  1303               	bcf	3,6	;RP1=0, select bank0
   336  00E5  0828               	movf	?_abs,w
   337  00E6  00AE               	movwf	??_main+2
   338  00E7  082E               	movf	??_main+2,w
   339  00E8  00B3               	movwf	_error
   340                           
   341                           ;main.c: 72: if(setpoint > position && error > 32)
   342  00E9  0831               	movf	_setpoint,w
   343  00EA  0230               	subwf	_position,w
   344  00EB  1803               	skipnc
   345  00EC  28F4               	goto	l714
   346  00ED  0833               	movf	_error,w
   347  00EE  3A80               	xorlw	128
   348  00EF  3E5F               	addlw	-161
   349  00F0  1C03               	skipc
   350  00F1  28F4               	goto	l714
   351                           
   352                           ;main.c: 73: error = -error;
   353  00F2  09B3               	comf	_error,f
   354  00F3  0AB3               	incf	_error,f
   355  00F4                     l714:	
   356                           
   357                           ;main.c: 75: if(setpoint < position && error < 32)
   358  00F4  0830               	movf	_position,w
   359  00F5  0231               	subwf	_setpoint,w
   360  00F6  1803               	skipnc
   361  00F7  28BF               	goto	l694
   362  00F8  0833               	movf	_error,w
   363  00F9  3A80               	xorlw	128
   364  00FA  3E60               	addlw	-160
   365  00FB  1803               	skipnc
   366  00FC  28BF               	goto	l694
   367                           
   368                           ;main.c: 76: error = -error;
   369  00FD  09B3               	comf	_error,f
   370  00FE  0AB3               	incf	_error,f
   371  00FF  28BF               	goto	l694
   372  0100                     __end_of_main:	
   373                           
   374                           	psect	text1
   375  0100                     __ptext1:	
   376 ;; *************** function _setup *****************
   377 ;; Defined at:
   378 ;;		line 43 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor\main.c"
   379 ;; Parameters:    Size  Location     Type
   380 ;;		None
   381 ;; Auto vars:     Size  Location     Type
   382 ;;		None
   383 ;; Return value:  Size  Location     Type
   384 ;;                  1    wreg      void 
   385 ;; Registers used:
   386 ;;		wreg
   387 ;; Tracked objects:
   388 ;;		On entry : 0/0
   389 ;;		On exit  : 0/0
   390 ;;		Unchanged: 0/0
   391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   392 ;;      Params:         0       0       0       0       0
   393 ;;      Locals:         0       0       0       0       0
   394 ;;      Temps:          0       0       0       0       0
   395 ;;      Totals:         0       0       0       0       0
   396 ;;Total ram usage:        0 bytes
   397 ;; Hardware stack levels used:    1
   398 ;; Hardware stack levels required when called:    1
   399 ;; This function calls:
   400 ;;		Nothing
   401 ;; This function is called by:
   402 ;;		_main
   403 ;; This function uses a non-reentrant model
   404 ;;
   405                           
   406                           
   407                           ;psect for function _setup
   408  0100                     _setup:	
   409                           
   410                           ;main.c: 45: TRISD = 0b11110000;
   411                           
   412                           ;incstack = 0
   413                           ; Regs used in _setup: [wreg]
   414  0100  30F0               	movlw	240
   415  0101  1683               	bsf	3,5	;RP0=1, select bank1
   416  0102  1303               	bcf	3,6	;RP1=0, select bank1
   417  0103  0088               	movwf	8	;volatile
   418                           
   419                           ;main.c: 47: INTCONbits.GIE = 1;
   420  0104  178B               	bsf	11,7	;volatile
   421                           
   422                           ;main.c: 48: INTCONbits.PEIE = 1;
   423  0105  170B               	bsf	11,6	;volatile
   424                           
   425                           ;main.c: 50: PIE1bits.TMR2IE = 1;
   426  0106  148C               	bsf	12,1	;volatile
   427                           
   428                           ;main.c: 51: PIR1bits.TMR2IF = 0;
   429  0107  1283               	bcf	3,5	;RP0=0, select bank0
   430  0108  1303               	bcf	3,6	;RP1=0, select bank0
   431  0109  108C               	bcf	12,1	;volatile
   432                           
   433                           ;main.c: 52: T2CON = 0b01111110;
   434  010A  307E               	movlw	126
   435  010B  0092               	movwf	18	;volatile
   436                           
   437                           ;main.c: 53: PR2=255;
   438  010C  30FF               	movlw	255
   439  010D  1683               	bsf	3,5	;RP0=1, select bank1
   440  010E  1303               	bcf	3,6	;RP1=0, select bank1
   441  010F  0092               	movwf	18	;volatile
   442  0110  0008               	return
   443  0111                     __end_of_setup:	
   444                           
   445                           	psect	text2
   446  0111                     __ptext2:	
   447 ;; *************** function _abs *****************
   448 ;; Defined at:
   449 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
   450 ;; Parameters:    Size  Location     Type
   451 ;;  a               2    8[BANK0 ] int 
   452 ;; Auto vars:     Size  Location     Type
   453 ;;		None
   454 ;; Return value:  Size  Location     Type
   455 ;;                  2    8[BANK0 ] int 
   456 ;; Registers used:
   457 ;;		wreg, status,2, status,0
   458 ;; Tracked objects:
   459 ;;		On entry : 0/0
   460 ;;		On exit  : 0/0
   461 ;;		Unchanged: 0/0
   462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   463 ;;      Params:         0       2       0       0       0
   464 ;;      Locals:         0       0       0       0       0
   465 ;;      Temps:          0       2       0       0       0
   466 ;;      Totals:         0       4       0       0       0
   467 ;;Total ram usage:        4 bytes
   468 ;; Hardware stack levels used:    1
   469 ;; Hardware stack levels required when called:    1
   470 ;; This function calls:
   471 ;;		Nothing
   472 ;; This function is called by:
   473 ;;		_main
   474 ;; This function uses a non-reentrant model
   475 ;;
   476                           
   477                           
   478                           ;psect for function _abs
   479  0111                     _abs:	
   480                           
   481                           ;incstack = 0
   482                           ; Regs used in _abs: [wreg+status,2+status,0]
   483  0111  1283               	bcf	3,5	;RP0=0, select bank0
   484  0112  1303               	bcf	3,6	;RP1=0, select bank0
   485  0113  1FA9               	btfss	abs@a+1,7
   486  0114  0008               	return
   487  0115  0928               	comf	abs@a,w
   488  0116  00AA               	movwf	??_abs
   489  0117  0929               	comf	abs@a+1,w
   490  0118  00AB               	movwf	??_abs+1
   491  0119  0AAA               	incf	??_abs,f
   492  011A  1903               	skipnz
   493  011B  0AAB               	incf	??_abs+1,f
   494  011C  082A               	movf	??_abs,w
   495  011D  00A8               	movwf	?_abs
   496  011E  082B               	movf	??_abs+1,w
   497  011F  00A9               	movwf	?_abs+1
   498  0120  0008               	return
   499  0121                     __end_of_abs:	
   500                           
   501                           	psect	text3
   502  0026                     __ptext3:	
   503 ;; *************** function _ISR *****************
   504 ;; Defined at:
   505 ;;		line 21 in file "D:\Drive\00_UNIFEI\2022.1\Lab. de Microcontroladores\Projeto\stepper_motor\main.c"
   506 ;; Parameters:    Size  Location     Type
   507 ;;		None
   508 ;; Auto vars:     Size  Location     Type
   509 ;;		None
   510 ;; Return value:  Size  Location     Type
   511 ;;                  1    wreg      void 
   512 ;; Registers used:
   513 ;;		wreg, status,2, status,0
   514 ;; Tracked objects:
   515 ;;		On entry : 0/0
   516 ;;		On exit  : 0/0
   517 ;;		Unchanged: 0/0
   518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   519 ;;      Params:         0       0       0       0       0
   520 ;;      Locals:         0       8       0       0       0
   521 ;;      Temps:          7       0       0       0       0
   522 ;;      Totals:         7       8       0       0       0
   523 ;;Total ram usage:       15 bytes
   524 ;; Hardware stack levels used:    1
   525 ;; This function calls:
   526 ;;		Nothing
   527 ;; This function is called by:
   528 ;;		Interrupt level 1
   529 ;; This function uses a non-reentrant model
   530 ;;
   531                           
   532                           
   533                           ;psect for function _ISR
   534  0026                     _ISR:	
   535                           
   536                           ;main.c: 23: if(poscaler2 >= 10){
   537  0026  300A               	movlw	10
   538  0027  022F               	subwf	_poscaler2,w
   539  0028  1C03               	skipc
   540  0029  28A8               	goto	i1l686
   541                           
   542                           ;main.c: 24: if(error > 0){
   543  002A  0833               	movf	_error,w
   544  002B  3A80               	xorlw	128
   545  002C  3E7F               	addlw	-129
   546  002D  1C03               	skipc
   547  002E  2868               	goto	i1l668
   548                           
   549                           ;main.c: 25: phase = (phase == 8) ? phase >> 3 : phase << 1;
   550  002F  3008               	movlw	8
   551  0030  0632               	xorwf	_phase,w
   552  0031  1903               	btfsc	3,2
   553  0032  283B               	goto	i1l656
   554  0033  0832               	movf	_phase,w
   555  0034  00F0               	movwf	??_ISR
   556  0035  01F1               	clrf	??_ISR+1
   557  0036  1003               	clrc
   558  0037  0D70               	rlf	??_ISR,w
   559  0038  00A0               	movwf	_ISR$136
   560  0039  0D71               	rlf	??_ISR+1,w
   561  003A  2849               	goto	L1
   562  003B                     i1l656:	
   563  003B  0832               	movf	_phase,w
   564  003C  00F0               	movwf	??_ISR
   565  003D  3003               	movlw	3
   566  003E                     u21_25:	
   567  003E  1003               	clrc
   568  003F  0CF0               	rrf	??_ISR,f
   569  0040  3EFF               	addlw	-1
   570  0041  1D03               	skipz
   571  0042  283E               	goto	u21_25
   572  0043  0870               	movf	??_ISR,w
   573  0044  00F1               	movwf	??_ISR+1
   574  0045  01F2               	clrf	??_ISR+2
   575  0046  0871               	movf	??_ISR+1,w
   576  0047  00A0               	movwf	_ISR$136
   577  0048  0872               	movf	??_ISR+2,w
   578  0049                     L1:	
   579  0049  00A1               	movwf	_ISR$136+1
   580  004A  0820               	movf	_ISR$136,w
   581  004B  00F0               	movwf	??_ISR
   582  004C  0870               	movf	??_ISR,w
   583  004D  00B2               	movwf	_phase
   584                           
   585                           ;main.c: 26: position = ((position + 1)== 64) ? 0 : (position + 1);
   586  004E  0830               	movf	_position,w
   587  004F  3E01               	addlw	1
   588  0050  00F0               	movwf	??_ISR
   589  0051  3000               	movlw	0
   590  0052  1803               	skipnc
   591  0053  3001               	movlw	1
   592  0054  00F1               	movwf	??_ISR+1
   593  0055  3040               	movlw	64
   594  0056  0670               	xorwf	??_ISR,w
   595  0057  0471               	iorwf	??_ISR+1,w
   596  0058  1903               	btfsc	3,2
   597  0059  2862               	goto	i1l664
   598  005A  0830               	movf	_position,w
   599  005B  3E01               	addlw	1
   600  005C  00A2               	movwf	_ISR$137
   601  005D  3000               	movlw	0
   602  005E  1803               	skipnc
   603  005F  3001               	movlw	1
   604  0060  00A3               	movwf	_ISR$137+1
   605  0061  2864               	goto	i1l666
   606  0062                     i1l664:	
   607  0062  01A2               	clrf	_ISR$137
   608  0063  01A3               	clrf	_ISR$137+1
   609  0064                     i1l666:	
   610  0064  0822               	movf	_ISR$137,w
   611  0065  00F0               	movwf	??_ISR
   612  0066  0870               	movf	??_ISR,w
   613  0067  00B0               	movwf	_position
   614  0068                     i1l668:	
   615                           
   616                           ;main.c: 27: }
   617                           ;main.c: 29: if(error < 0){
   618  0068  1FB3               	btfss	_error,7
   619  0069  28A7               	goto	i1l684
   620                           
   621                           ;main.c: 30: phase = (phase == 1) ? phase << 3 : phase >> 1;
   622  006A  0332               	decf	_phase,w
   623  006B  1903               	btfsc	3,2
   624  006C  2877               	goto	i1l674
   625  006D  0832               	movf	_phase,w
   626  006E  00F0               	movwf	??_ISR
   627  006F  1003               	clrc
   628  0070  0C70               	rrf	??_ISR,w
   629  0071  00F1               	movwf	??_ISR+1
   630  0072  01F2               	clrf	??_ISR+2
   631  0073  0871               	movf	??_ISR+1,w
   632  0074  00A4               	movwf	_ISR$138
   633  0075  0872               	movf	??_ISR+2,w
   634  0076  2886               	goto	L2
   635  0077                     i1l674:	
   636  0077  0832               	movf	_phase,w
   637  0078  00F0               	movwf	??_ISR
   638  0079  01F1               	clrf	??_ISR+1
   639  007A  1003               	clrc
   640  007B  0DF0               	rlf	??_ISR,f
   641  007C  0DF1               	rlf	??_ISR+1,f
   642  007D  1003               	clrc
   643  007E  0DF0               	rlf	??_ISR,f
   644  007F  0DF1               	rlf	??_ISR+1,f
   645  0080  1003               	clrc
   646  0081  0DF0               	rlf	??_ISR,f
   647  0082  0DF1               	rlf	??_ISR+1,f
   648  0083  0870               	movf	??_ISR,w
   649  0084  00A4               	movwf	_ISR$138
   650  0085  0871               	movf	??_ISR+1,w
   651  0086                     L2:	
   652  0086  00A5               	movwf	_ISR$138+1
   653  0087  0824               	movf	_ISR$138,w
   654  0088  00F0               	movwf	??_ISR
   655  0089  0870               	movf	??_ISR,w
   656  008A  00B2               	movwf	_phase
   657                           
   658                           ;main.c: 31: position = ((position - 1)== -1) ? 63 : (position - 1);
   659  008B  0830               	movf	_position,w
   660  008C  3EFF               	addlw	255
   661  008D  00F0               	movwf	??_ISR
   662  008E  30FF               	movlw	255
   663  008F  1803               	skipnc
   664  0090  3000               	movlw	0
   665  0091  00F1               	movwf	??_ISR+1
   666  0092  0A70               	incf	??_ISR,w
   667  0093  1903               	btfsc	3,2
   668  0094  0A71               	incf	??_ISR+1,w
   669  0095  1903               	btfsc	3,2
   670  0096  289F               	goto	i1l682
   671  0097  0830               	movf	_position,w
   672  0098  3EFF               	addlw	255
   673  0099  00A6               	movwf	_ISR$139
   674  009A  30FF               	movlw	255
   675  009B  1803               	skipnc
   676  009C  3000               	movlw	0
   677  009D  00A7               	movwf	_ISR$139+1
   678  009E  28A3               	goto	i1l63
   679  009F                     i1l682:	
   680  009F  303F               	movlw	63
   681  00A0  00A6               	movwf	_ISR$139
   682  00A1  3000               	movlw	0
   683  00A2  00A7               	movwf	_ISR$139+1
   684  00A3                     i1l63:	
   685  00A3  0826               	movf	_ISR$139,w
   686  00A4  00F0               	movwf	??_ISR
   687  00A5  0870               	movf	??_ISR,w
   688  00A6  00B0               	movwf	_position
   689  00A7                     i1l684:	
   690                           
   691                           ;main.c: 32: }
   692                           ;main.c: 33: poscaler2 = 0;
   693  00A7  01AF               	clrf	_poscaler2
   694  00A8                     i1l686:	
   695                           
   696                           ;main.c: 34: }
   697                           ;main.c: 36: PORTD = phase;
   698  00A8  0832               	movf	_phase,w
   699  00A9  0088               	movwf	8	;volatile
   700                           
   701                           ;main.c: 38: poscaler2++;
   702  00AA  3001               	movlw	1
   703  00AB  00F0               	movwf	??_ISR
   704  00AC  0870               	movf	??_ISR,w
   705  00AD  07AF               	addwf	_poscaler2,f
   706                           
   707                           ;main.c: 40: PIR1bits.TMR2IF = 0;
   708  00AE  108C               	bcf	12,1	;volatile
   709  00AF  0876               	movf	??_ISR+6,w
   710  00B0  00FF               	movwf	127
   711  00B1  0875               	movf	??_ISR+5,w
   712  00B2  008A               	movwf	10
   713  00B3  0874               	movf	??_ISR+4,w
   714  00B4  0084               	movwf	4
   715  00B5  0E73               	swapf	(??_ISR+3)^(0+-128),w
   716  00B6  0083               	movwf	3
   717  00B7  0EFE               	swapf	126,f
   718  00B8  0E7E               	swapf	126,w
   719  00B9  0009               	retfie
   720  00BA                     __end_of_ISR:	
   721  007E                     btemp	set	126	;btemp
   722  007E                     wtemp0	set	126
   723                           
   724                           	psect	intentry
   725  0004                     __pintentry:	
   726                           ;incstack = 0
   727                           ; Regs used in _ISR: [wreg+status,2+status,0]
   728                           
   729  0004                     interrupt_function:	
   730  007E                     saved_w	set	btemp
   731  0004  00FE               	movwf	btemp
   732  0005  0E03               	swapf	3,w
   733  0006  00F3               	movwf	??_ISR+3
   734  0007  0804               	movf	4,w
   735  0008  00F4               	movwf	??_ISR+4
   736  0009  080A               	movf	10,w
   737  000A  00F5               	movwf	??_ISR+5
   738  000B  1283               	bcf	3,5	;RP0=0, select bank0
   739  000C  1303               	bcf	3,6	;RP1=0, select bank0
   740  000D  087F               	movf	btemp+1,w
   741  000E  00F6               	movwf	??_ISR+6
   742  000F  120A  118A  2826   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80     15      20
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_abs

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     119
                                             12 BANK0      3     3      0
                                _abs
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _abs                                                  4     2      2     119
                                              8 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                 15    15      0      96
                                              0 COMMON     7     7      0
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _abs
   _setup

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      F      14       5       25.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       7       1       50.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      1B      12        0.0%
ABS                  0      0      1B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jul 05 20:19:45 2022

             __CFG_CP$OFF 0000                       l702 00C9                       l714 00F4  
                     l706 00CF                       l694 00BF                       _PR2 0092  
            __CFG_CPD$OFF 0000                       _ISR 0026                       _abs 0111  
                     fsr0 0004              __CFG_IESO$ON 0000              __CFG_LVP$OFF 0000  
                    ?_ISR 0070                      ?_abs 0028                      i1l63 00A3  
            __CFG_WRT$OFF 0000             __CFG_FCMEN$ON 0000                      abs@a 0028  
                    _main 00BA                      btemp 007E             __CFG_BOREN$ON 0000  
                    start 0012             __CFG_MCLRE$ON 0000                     ??_ISR 0070  
                   ??_abs 002A                     ?_main 0070             __CFG_WDTE$OFF 0000  
                   _T2CON 0012            __CFG_DEBUG$OFF 0000                     i1l664 0062  
                   i1l656 003B                     i1l682 009F                     i1l674 0077  
                   i1l666 0064                     i1l684 00A7                     i1l668 0068  
                   i1l686 00A8                     u21_25 003E                     _PORTD 0008  
                   _TRISD 0088                     _error 0033                     _phase 0032  
                   _setup 0100                     pclath 000A                     status 0003  
                   wtemp0 007E           __initialization 0015              __end_of_main 0100  
                  ??_main 002C                    ?_setup 0070            __CFG_PWRTE$OFF 0000  
                  saved_w 007E   __end_of__initialization 0022            __pcstackCOMMON 0070  
            __pidataBANK0 0121             __end_of_setup 0111                   ??_setup 0077  
              __pbssBANK0 002F                __pmaintext 00BA                __pintentry 0004  
                 _ISR$136 0020                   _ISR$137 0022                   _ISR$138 0024  
                 _ISR$139 0026                   __ptext1 0100                   __ptext2 0111  
                 __ptext3 0026              __size_of_ISR 0094              __size_of_abs 0010  
    end_of_initialization 0022                 _PORTDbits 0008       start_initialization 0015  
             __end_of_ISR 00BA               __end_of_abs 0121  __CFG_FOSC$INTRC_NOCLKOUT 0000  
             __pdataBANK0 0032                 ___latbits 0002             __pcstackBANK0 0020  
          __size_of_setup 0011         interrupt_function 0004                  _PIE1bits 008C  
                _PIR1bits 000C                 _poscaler2 002F         __CFG_BOR4V$BOR40V 0000  
           __size_of_main 0046                  _setpoint 0031                  _position 0030  
              _INTCONbits 000B                  intlevel1 0000  
