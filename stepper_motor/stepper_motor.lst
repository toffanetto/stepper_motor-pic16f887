

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jul 14 10:58:16 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Version 1.45
    44                           ; Generated 16/11/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F887 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0008                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  000E                     	;# 
    93  000F                     	;# 
    94  0010                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0014                     	;# 
    99  0015                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  001D                     	;# 
   110  001E                     	;# 
   111  001F                     	;# 
   112  0081                     	;# 
   113  0085                     	;# 
   114  0086                     	;# 
   115  0087                     	;# 
   116  0088                     	;# 
   117  0089                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  008F                     	;# 
   122  0090                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0093                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0097                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009E                     	;# 
   139  009F                     	;# 
   140  0105                     	;# 
   141  0107                     	;# 
   142  0108                     	;# 
   143  0109                     	;# 
   144  010C                     	;# 
   145  010C                     	;# 
   146  010D                     	;# 
   147  010E                     	;# 
   148  010F                     	;# 
   149  0185                     	;# 
   150  0187                     	;# 
   151  0188                     	;# 
   152  0189                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  000E                     	;# 
   171  000F                     	;# 
   172  0010                     	;# 
   173  0011                     	;# 
   174  0012                     	;# 
   175  0013                     	;# 
   176  0014                     	;# 
   177  0015                     	;# 
   178  0015                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001B                     	;# 
   186  001C                     	;# 
   187  001D                     	;# 
   188  001E                     	;# 
   189  001F                     	;# 
   190  0081                     	;# 
   191  0085                     	;# 
   192  0086                     	;# 
   193  0087                     	;# 
   194  0088                     	;# 
   195  0089                     	;# 
   196  008C                     	;# 
   197  008D                     	;# 
   198  008E                     	;# 
   199  008F                     	;# 
   200  0090                     	;# 
   201  0091                     	;# 
   202  0092                     	;# 
   203  0093                     	;# 
   204  0093                     	;# 
   205  0093                     	;# 
   206  0094                     	;# 
   207  0095                     	;# 
   208  0096                     	;# 
   209  0097                     	;# 
   210  0098                     	;# 
   211  0099                     	;# 
   212  009A                     	;# 
   213  009B                     	;# 
   214  009C                     	;# 
   215  009D                     	;# 
   216  009E                     	;# 
   217  009F                     	;# 
   218  0105                     	;# 
   219  0107                     	;# 
   220  0108                     	;# 
   221  0109                     	;# 
   222  010C                     	;# 
   223  010C                     	;# 
   224  010D                     	;# 
   225  010E                     	;# 
   226  010F                     	;# 
   227  0185                     	;# 
   228  0187                     	;# 
   229  0188                     	;# 
   230  0189                     	;# 
   231  018C                     	;# 
   232  018D                     	;# 
   233  0000                     	;# 
   234  0001                     	;# 
   235  0002                     	;# 
   236  0003                     	;# 
   237  0004                     	;# 
   238  0005                     	;# 
   239  0006                     	;# 
   240  0007                     	;# 
   241  0008                     	;# 
   242  0009                     	;# 
   243  000A                     	;# 
   244  000B                     	;# 
   245  000C                     	;# 
   246  000D                     	;# 
   247  000E                     	;# 
   248  000E                     	;# 
   249  000F                     	;# 
   250  0010                     	;# 
   251  0011                     	;# 
   252  0012                     	;# 
   253  0013                     	;# 
   254  0014                     	;# 
   255  0015                     	;# 
   256  0015                     	;# 
   257  0016                     	;# 
   258  0017                     	;# 
   259  0018                     	;# 
   260  0019                     	;# 
   261  001A                     	;# 
   262  001B                     	;# 
   263  001B                     	;# 
   264  001C                     	;# 
   265  001D                     	;# 
   266  001E                     	;# 
   267  001F                     	;# 
   268  0081                     	;# 
   269  0085                     	;# 
   270  0086                     	;# 
   271  0087                     	;# 
   272  0088                     	;# 
   273  0089                     	;# 
   274  008C                     	;# 
   275  008D                     	;# 
   276  008E                     	;# 
   277  008F                     	;# 
   278  0090                     	;# 
   279  0091                     	;# 
   280  0092                     	;# 
   281  0093                     	;# 
   282  0093                     	;# 
   283  0093                     	;# 
   284  0094                     	;# 
   285  0095                     	;# 
   286  0096                     	;# 
   287  0097                     	;# 
   288  0098                     	;# 
   289  0099                     	;# 
   290  009A                     	;# 
   291  009B                     	;# 
   292  009C                     	;# 
   293  009D                     	;# 
   294  009E                     	;# 
   295  009F                     	;# 
   296  0105                     	;# 
   297  0107                     	;# 
   298  0108                     	;# 
   299  0109                     	;# 
   300  010C                     	;# 
   301  010C                     	;# 
   302  010D                     	;# 
   303  010E                     	;# 
   304  010F                     	;# 
   305  0185                     	;# 
   306  0187                     	;# 
   307  0188                     	;# 
   308  0189                     	;# 
   309  018C                     	;# 
   310  018D                     	;# 
   311                           
   312                           	psect	idataBANK0
   313  0DF5                     __pidataBANK0:	
   314                           
   315                           ;initializer for _LCD_ShiftDisplay
   316  0DF5  3410               	retlw	16
   317                           
   318                           ;initializer for _LCD_Controle
   319  0DF6  340C               	retlw	12
   320                           
   321                           ;initializer for _LCD_Entrada
   322  0DF7  3403               	retlw	3
   323                           
   324                           ;initializer for _LCD_PORT
   325  0DF8  3406               	retlw	6
   326  0DF9  3400               	retlw	0
   327                           
   328                           	psect	idataBANK1
   329  0017                     __pidataBANK1:	
   330                           
   331                           ;initializer for _LCD_TRIS
   332  0017  3486               	retlw	134
   333  0018  3400               	retlw	0
   334  0008                     _PORTDbits	set	8
   335  0003                     _STATUSbits	set	3
   336  0012                     _T2CON	set	18
   337  000C                     _PIR1bits	set	12
   338  000B                     _INTCONbits	set	11
   339  0008                     _PORTD	set	8
   340  0006                     _PORTB	set	6
   341  008C                     _PIE1bits	set	140
   342  0088                     _TRISD	set	136
   343  0086                     _TRISB	set	134
   344  0092                     _PR2	set	146
   345  0189                     _ANSELH	set	393
   346                           
   347                           	psect	strings
   348  0800                     __pstrings:	
   349  0800                     stringtab:	
   350  0800                     __stringtab:	
   351                           
   352                           ;	String table - string pointers are 1 byte each
   353  0800  1BFF               	btfsc	btemp+1,7
   354  0801  280A               	ljmp	stringcode
   355  0802  1383               	bcf	3,7
   356  0803  187F               	btfsc	btemp+1,0
   357  0804  1783               	bsf	3,7
   358  0805  0800               	movf	0,w
   359  0806  0A84               	incf	4,f
   360  0807  1903               	skipnz
   361  0808  0AFF               	incf	btemp+1,f
   362  0809  0008               	return
   363  080A                     stringcode:	
   364  080A                     stringdir:	
   365  080A  3008               	movlw	high stringdir
   366  080B  008A               	movwf	10
   367  080C  0804               	movf	4,w
   368  080D  0A84               	incf	4,f
   369  080E  0782               	addwf	2,f
   370  080F                     __stringbase:	
   371  080F  3400               	retlw	0
   372  0810                     __end_of__stringtab:	
   373  0810                     STR_3:	
   374  0810  3456               	retlw	86	;'V'
   375  0811  3465               	retlw	101	;'e'
   376  0812  346C               	retlw	108	;'l'
   377  0813  343A               	retlw	58	;':'
   378  0814  3400               	retlw	0
   379  0815                     STR_2:	
   380  0815  3450               	retlw	80	;'P'
   381  0816  3441               	retlw	65	;'A'
   382  0817  343A               	retlw	58	;':'
   383  0818  3400               	retlw	0
   384  0819                     STR_1:	
   385  0819  3450               	retlw	80	;'P'
   386  081A  3446               	retlw	70	;'F'
   387  081B  343A               	retlw	58	;':'
   388  081C  3400               	retlw	0
   389                           
   390                           ; #config settings
   391  0000                     
   392                           	psect	cinit
   393  07C0                     start_initialization:	
   394  07C0                     __initialization:	
   395                           
   396                           ; Initialize objects allocated to BANK1
   397  07C0  1683               	bsf	3,5	;RP0=1, select bank1
   398  07C1  1303               	bcf	3,6	;RP1=0, select bank1
   399  07C2  120A  118A  2017  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   400  07C7  00AC               	movwf	__pdataBANK1& (0+127)
   401  07C8  120A  118A  2018  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   402  07CD  00AD               	movwf	(__pdataBANK1+1)& (0+127)
   403                           
   404                           ; Initialize objects allocated to BANK0
   405  07CE  1283               	bcf	3,5	;RP0=0, select bank0
   406  07CF  1303               	bcf	3,6	;RP1=0, select bank0
   407  07D0  120A  158A  25F5  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   408  07D5  00E2               	movwf	__pdataBANK0& (0+127)
   409  07D6  120A  158A  25F6  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   410  07DB  00E3               	movwf	(__pdataBANK0+1)& (0+127)
   411  07DC  120A  158A  25F7  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   412  07E1  00E4               	movwf	(__pdataBANK0+2)& (0+127)
   413  07E2  120A  158A  25F8  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   414  07E7  00E5               	movwf	(__pdataBANK0+3)& (0+127)
   415  07E8  120A  158A  25F9   	fcall	__pidataBANK0+4	;fetch initializer
   416  07EB  00E6               	movwf	(__pdataBANK0+4)& (0+127)
   417                           
   418                           ; Clear objects allocated to BANK1
   419  07EC  1683               	bsf	3,5	;RP0=1, select bank1
   420  07ED  1303               	bcf	3,6	;RP1=0, select bank1
   421  07EE  01A8               	clrf	__pbssBANK1& (0+127)
   422  07EF  01A9               	clrf	(__pbssBANK1+1)& (0+127)
   423  07F0  01AA               	clrf	(__pbssBANK1+2)& (0+127)
   424  07F1  01AB               	clrf	(__pbssBANK1+3)& (0+127)
   425                           
   426                           ; Clear objects allocated to BANK0
   427  07F2  1283               	bcf	3,5	;RP0=0, select bank0
   428  07F3  1303               	bcf	3,6	;RP1=0, select bank0
   429  07F4  01DA               	clrf	__pbssBANK0& (0+127)
   430  07F5  01DB               	clrf	(__pbssBANK0+1)& (0+127)
   431  07F6  01DC               	clrf	(__pbssBANK0+2)& (0+127)
   432  07F7  01DD               	clrf	(__pbssBANK0+3)& (0+127)
   433  07F8  01DE               	clrf	(__pbssBANK0+4)& (0+127)
   434  07F9  01DF               	clrf	(__pbssBANK0+5)& (0+127)
   435  07FA  01E0               	clrf	(__pbssBANK0+6)& (0+127)
   436  07FB  01E1               	clrf	(__pbssBANK0+7)& (0+127)
   437  07FC                     end_of_initialization:	
   438                           ;End of C runtime variable initialization code
   439                           
   440  07FC                     __end_of__initialization:	
   441  07FC  0183               	clrf	3
   442  07FD  120A  118A  2EB5   	ljmp	_main	;jump to C main() function
   443                           
   444                           	psect	bssBANK0
   445  005A                     __pbssBANK0:	
   446  005A                     _error:	
   447  005A                     	ds	2
   448  005C                     _position:	
   449  005C                     	ds	2
   450  005E                     _setpoint:	
   451  005E                     	ds	2
   452  0060                     _speed_ramp:	
   453  0060                     	ds	1
   454  0061                     _phase:	
   455  0061                     	ds	1
   456                           
   457                           	psect	dataBANK0
   458  0062                     __pdataBANK0:	
   459  0062                     _LCD_ShiftDisplay:	
   460  0062                     	ds	1
   461  0063                     _LCD_Controle:	
   462  0063                     	ds	1
   463  0064                     _LCD_Entrada:	
   464  0064                     	ds	1
   465  0065                     _LCD_PORT:	
   466  0065                     	ds	2
   467                           
   468                           	psect	bssBANK1
   469  00A8                     __pbssBANK1:	
   470  00A8                     _speed:	
   471  00A8                     	ds	2
   472  00AA                     _c_int_value:	
   473  00AA                     	ds	2
   474                           
   475                           	psect	dataBANK1
   476  00AC                     __pdataBANK1:	
   477  00AC                     _LCD_TRIS:	
   478  00AC                     	ds	2
   479                           
   480                           	psect	cstackBANK1
   481  00A0                     __pcstackBANK1:	
   482  00A0                     int2char@int_value0:	
   483                           
   484                           ; 2 bytes @ 0x0
   485  00A0                     	ds	2
   486  00A2                     int2char@int_value1:	
   487                           
   488                           ; 2 bytes @ 0x2
   489  00A2                     	ds	2
   490  00A4                     int2char@int_value2:	
   491                           
   492                           ; 2 bytes @ 0x4
   493  00A4                     	ds	2
   494  00A6                     ??_main:	
   495                           
   496                           ; 1 bytes @ 0x6
   497  00A6                     	ds	2
   498                           
   499                           	psect	cstackCOMMON
   500  0071                     __pcstackCOMMON:	
   501  0071                     ?_LCD_Setup:	
   502  0071                     ?_LCD_SendNb:	
   503                           ; 1 bytes @ 0x0
   504                           
   505  0071                     ?_setupStepper:	
   506                           ; 1 bytes @ 0x0
   507                           
   508  0071                     ?_calculaErro:	
   509                           ; 1 bytes @ 0x0
   510                           
   511  0071                     ?_calculaVelocidade:	
   512                           ; 1 bytes @ 0x0
   513                           
   514  0071                     ?_ISR:	
   515                           ; 1 bytes @ 0x0
   516                           
   517  0071                     ?_setup:	
   518                           ; 1 bytes @ 0x0
   519                           
   520  0071                     ?_main:	
   521                           ; 1 bytes @ 0x0
   522                           
   523  0071                     ?_abs:	
   524                           ; 1 bytes @ 0x0
   525                           
   526  0071                     abs@a:	
   527                           ; 2 bytes @ 0x0
   528                           
   529                           
   530                           ; 2 bytes @ 0x0
   531  0071                     	ds	2
   532  0073                     ??_abs:	
   533                           
   534                           ; 1 bytes @ 0x2
   535  0073                     	ds	2
   536  0075                     ??_calculaErro:	
   537                           
   538                           ; 1 bytes @ 0x4
   539  0075                     	ds	2
   540  0077                     ??_ISR:	
   541                           
   542                           ; 1 bytes @ 0x6
   543  0077                     	ds	7
   544                           
   545                           	psect	cstackBANK0
   546  0020                     __pcstackBANK0:	
   547  0020                     _ISR$251:	
   548                           
   549                           ; 2 bytes @ 0x0
   550  0020                     	ds	2
   551  0022                     _ISR$252:	
   552                           
   553                           ; 2 bytes @ 0x2
   554  0022                     	ds	2
   555  0024                     _ISR$253:	
   556                           
   557                           ; 2 bytes @ 0x4
   558  0024                     	ds	2
   559  0026                     _ISR$254:	
   560                           
   561                           ; 2 bytes @ 0x6
   562  0026                     	ds	2
   563  0028                     ??_LCD_SendNb:	
   564  0028                     ??_setupStepper:	
   565                           ; 1 bytes @ 0x8
   566                           
   567  0028                     ?_getVelocidade:	
   568                           ; 1 bytes @ 0x8
   569                           
   570  0028                     ?___awdiv:	
   571                           ; 2 bytes @ 0x8
   572                           
   573  0028                     ?___lwdiv:	
   574                           ; 2 bytes @ 0x8
   575                           
   576  0028                     ?___ftpack:	
   577                           ; 2 bytes @ 0x8
   578                           
   579  0028                     ___awdiv@divisor:	
   580                           ; 3 bytes @ 0x8
   581                           
   582  0028                     ___lwdiv@divisor:	
   583                           ; 2 bytes @ 0x8
   584                           
   585  0028                     ___ftpack@arg:	
   586                           ; 2 bytes @ 0x8
   587                           
   588                           
   589                           ; 3 bytes @ 0x8
   590  0028                     	ds	2
   591  002A                     ??_getVelocidade:	
   592  002A                     ___awdiv@dividend:	
   593                           ; 1 bytes @ 0xA
   594                           
   595  002A                     ___lwdiv@dividend:	
   596                           ; 2 bytes @ 0xA
   597                           
   598                           
   599                           ; 2 bytes @ 0xA
   600  002A                     	ds	1
   601  002B                     ___ftpack@exp:	
   602                           
   603                           ; 1 bytes @ 0xB
   604  002B                     	ds	1
   605  002C                     ??___awdiv:	
   606  002C                     ??___lwdiv:	
   607                           ; 1 bytes @ 0xC
   608                           
   609  002C                     ___ftpack@sign:	
   610                           ; 1 bytes @ 0xC
   611                           
   612  002C                     _LCD_SendNb$329:	
   613                           ; 1 bytes @ 0xC
   614                           
   615                           
   616                           ; 2 bytes @ 0xC
   617  002C                     	ds	1
   618  002D                     ??___ftpack:	
   619  002D                     ___awdiv@counter:	
   620                           ; 1 bytes @ 0xD
   621                           
   622  002D                     ___lwdiv@counter:	
   623                           ; 1 bytes @ 0xD
   624                           
   625                           
   626                           ; 1 bytes @ 0xD
   627  002D                     	ds	1
   628  002E                     ___awdiv@sign:	
   629  002E                     _LCD_SendNb$330:	
   630                           ; 1 bytes @ 0xE
   631                           
   632  002E                     ___lwdiv@quotient:	
   633                           ; 2 bytes @ 0xE
   634                           
   635                           
   636                           ; 2 bytes @ 0xE
   637  002E                     	ds	1
   638  002F                     ___awdiv@quotient:	
   639                           
   640                           ; 2 bytes @ 0xF
   641  002F                     	ds	1
   642  0030                     ?___lwtoft:	
   643  0030                     _LCD_SendNb$331:	
   644                           ; 3 bytes @ 0x10
   645                           
   646  0030                     ___lwtoft@c:	
   647                           ; 2 bytes @ 0x10
   648                           
   649                           
   650                           ; 2 bytes @ 0x10
   651  0030                     	ds	1
   652  0031                     ?___wmul:	
   653  0031                     ___wmul@multiplier:	
   654                           ; 2 bytes @ 0x11
   655                           
   656                           
   657                           ; 2 bytes @ 0x11
   658  0031                     	ds	1
   659  0032                     _LCD_SendNb$332:	
   660                           
   661                           ; 2 bytes @ 0x12
   662  0032                     	ds	1
   663  0033                     ??___lwtoft:	
   664  0033                     ___wmul@multiplicand:	
   665                           ; 1 bytes @ 0x13
   666                           
   667                           
   668                           ; 2 bytes @ 0x13
   669  0033                     	ds	1
   670  0034                     ?___ftdiv:	
   671  0034                     ?___ftmul:	
   672                           ; 3 bytes @ 0x14
   673                           
   674  0034                     LCD_SendNb@NB:	
   675                           ; 3 bytes @ 0x14
   676                           
   677  0034                     ___ftdiv@f2:	
   678                           ; 1 bytes @ 0x14
   679                           
   680  0034                     ___ftmul@f1:	
   681                           ; 3 bytes @ 0x14
   682                           
   683                           
   684                           ; 3 bytes @ 0x14
   685  0034                     	ds	1
   686  0035                     ?_LCD_SendByte:	
   687  0035                     ??___wmul:	
   688                           ; 1 bytes @ 0x15
   689                           
   690  0035                     LCD_SendByte@byte:	
   691                           ; 1 bytes @ 0x15
   692                           
   693  0035                     ___wmul@product:	
   694                           ; 1 bytes @ 0x15
   695                           
   696                           
   697                           ; 2 bytes @ 0x15
   698  0035                     	ds	1
   699  0036                     ??_LCD_SendByte:	
   700                           
   701                           ; 1 bytes @ 0x16
   702  0036                     	ds	1
   703  0037                     ??_calculaVelocidade:	
   704  0037                     ___ftdiv@f1:	
   705                           ; 1 bytes @ 0x17
   706                           
   707  0037                     ___ftmul@f2:	
   708                           ; 3 bytes @ 0x17
   709                           
   710                           
   711                           ; 3 bytes @ 0x17
   712  0037                     	ds	2
   713  0039                     _calculaVelocidade$785:	
   714                           
   715                           ; 2 bytes @ 0x19
   716  0039                     	ds	1
   717  003A                     ??___ftdiv:	
   718  003A                     ??___ftmul:	
   719                           ; 1 bytes @ 0x1A
   720                           
   721  003A                     LCD_SendByte@reg:	
   722                           ; 1 bytes @ 0x1A
   723                           
   724                           
   725                           ; 1 bytes @ 0x1A
   726  003A                     	ds	1
   727  003B                     _LCD_SendByte$336:	
   728                           
   729                           ; 2 bytes @ 0x1B
   730  003B                     	ds	2
   731  003D                     ??_LCD_Setup:	
   732  003D                     ?_LCD_SetCursor:	
   733                           ; 1 bytes @ 0x1D
   734                           
   735  003D                     LCD_SetCursor@coluna:	
   736                           ; 1 bytes @ 0x1D
   737                           
   738                           
   739                           ; 1 bytes @ 0x1D
   740  003D                     	ds	1
   741  003E                     ??_LCD_SetCursor:	
   742  003E                     ___ftdiv@cntr:	
   743                           ; 1 bytes @ 0x1E
   744                           
   745  003E                     ___ftmul@exp:	
   746                           ; 1 bytes @ 0x1E
   747                           
   748                           
   749                           ; 1 bytes @ 0x1E
   750  003E                     	ds	1
   751  003F                     LCD_SetCursor@linha:	
   752  003F                     ___ftdiv@f3:	
   753                           ; 1 bytes @ 0x1F
   754                           
   755  003F                     ___ftmul@f3_as_product:	
   756                           ; 3 bytes @ 0x1F
   757                           
   758                           
   759                           ; 3 bytes @ 0x1F
   760  003F                     	ds	1
   761  0040                     LCD_SetCursor@aux:	
   762                           
   763                           ; 1 bytes @ 0x20
   764  0040                     	ds	1
   765  0041                     ?_LCD_sendString:	
   766  0041                     LCD_sendString@string:	
   767                           ; 1 bytes @ 0x21
   768                           
   769                           
   770                           ; 2 bytes @ 0x21
   771  0041                     	ds	1
   772  0042                     ___ftdiv@exp:	
   773  0042                     ___ftmul@cntr:	
   774                           ; 1 bytes @ 0x22
   775                           
   776                           
   777                           ; 1 bytes @ 0x22
   778  0042                     	ds	1
   779  0043                     LCD_sendString@linha:	
   780  0043                     ___ftdiv@sign:	
   781                           ; 1 bytes @ 0x23
   782                           
   783  0043                     ___ftmul@sign:	
   784                           ; 1 bytes @ 0x23
   785                           
   786                           
   787                           ; 1 bytes @ 0x23
   788  0043                     	ds	1
   789  0044                     ?___fttol:	
   790  0044                     LCD_sendString@coluna:	
   791                           ; 4 bytes @ 0x24
   792                           
   793  0044                     ___fttol@f1:	
   794                           ; 1 bytes @ 0x24
   795                           
   796                           
   797                           ; 3 bytes @ 0x24
   798  0044                     	ds	1
   799  0045                     ??_LCD_sendString:	
   800                           
   801                           ; 1 bytes @ 0x25
   802  0045                     	ds	1
   803  0046                     LCD_sendString@col:	
   804                           
   805                           ; 1 bytes @ 0x26
   806  0046                     	ds	1
   807  0047                     LCD_sendString@i:	
   808                           
   809                           ; 1 bytes @ 0x27
   810  0047                     	ds	1
   811  0048                     ??___fttol:	
   812  0048                     LCD_sendString@i_352:	
   813                           ; 1 bytes @ 0x28
   814                           
   815                           
   816                           ; 1 bytes @ 0x28
   817  0048                     	ds	4
   818  004C                     ___fttol@sign1:	
   819                           
   820                           ; 1 bytes @ 0x2C
   821  004C                     	ds	1
   822  004D                     ___fttol@lval:	
   823                           
   824                           ; 4 bytes @ 0x2D
   825  004D                     	ds	4
   826  0051                     ___fttol@exp1:	
   827                           
   828                           ; 1 bytes @ 0x31
   829  0051                     	ds	1
   830  0052                     ?_setPosicaoAtual:	
   831  0052                     ?_setPosicaoDesejada:	
   832                           ; 1 bytes @ 0x32
   833                           
   834  0052                     ?_getPosicaoAtual:	
   835                           ; 1 bytes @ 0x32
   836                           
   837  0052                     setPosicaoAtual@posicao_atual:	
   838                           ; 2 bytes @ 0x32
   839                           
   840  0052                     setPosicaoDesejada@posicao_desejada:	
   841                           ; 2 bytes @ 0x32
   842                           
   843                           
   844                           ; 2 bytes @ 0x32
   845  0052                     	ds	2
   846  0054                     ?_int2char:	
   847  0054                     ??_setPosicaoAtual:	
   848                           ; 1 bytes @ 0x34
   849                           
   850  0054                     ??_getPosicaoAtual:	
   851                           ; 1 bytes @ 0x34
   852                           
   853  0054                     ??_setPosicaoDesejada:	
   854                           ; 1 bytes @ 0x34
   855                           
   856  0054                     ??_setup:	
   857                           ; 1 bytes @ 0x34
   858                           
   859  0054                     int2char@int_value:	
   860                           ; 1 bytes @ 0x34
   861                           
   862                           
   863                           ; 2 bytes @ 0x34
   864  0054                     	ds	2
   865  0056                     ??_int2char:	
   866                           
   867                           ; 1 bytes @ 0x36
   868  0056                     	ds	4
   869                           
   870                           	psect	maintext
   871  06B5                     __pmaintext:	
   872 ;;
   873 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   874 ;;
   875 ;; *************** function _main *****************
   876 ;; Defined at:
   877 ;;		line 58 in file "C:\Users\Aluno\Desktop\stepper_motor-pic16f887\stepper_motor\main.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;		None
   880 ;; Auto vars:     Size  Location     Type
   881 ;;		None
   882 ;; Return value:  Size  Location     Type
   883 ;;                  1    wreg      void 
   884 ;; Registers used:
   885 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   886 ;; Tracked objects:
   887 ;;		On entry : B00/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   891 ;;      Params:         0       0       0       0       0
   892 ;;      Locals:         0       0       0       0       0
   893 ;;      Temps:          0       0       2       0       0
   894 ;;      Totals:         0       0       2       0       0
   895 ;;Total ram usage:        2 bytes
   896 ;; Hardware stack levels required when called:    7
   897 ;; This function calls:
   898 ;;		_LCD_sendString
   899 ;;		___ftmul
   900 ;;		___fttol
   901 ;;		___lwtoft
   902 ;;		_calculaVelocidade
   903 ;;		_getPosicaoAtual
   904 ;;		_getVelocidade
   905 ;;		_int2char
   906 ;;		_setPosicaoDesejada
   907 ;;		_setup
   908 ;; This function is called by:
   909 ;;		Startup code after reset
   910 ;; This function uses a non-reentrant model
   911 ;;
   912                           
   913                           
   914                           ;psect for function _main
   915  06B5                     _main:	
   916                           
   917                           ;main.c: 60: setup();
   918                           
   919                           ;incstack = 0
   920                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   921  06B5  120A  158A  2615  120A  118A  	fcall	_setup
   922  06BA                     l1990:	
   923                           ;main.c: 62: while(1){
   924                           
   925                           
   926                           ;main.c: 64: if(PORTDbits.RD4==1)
   927  06BA  1283               	bcf	3,5	;RP0=0, select bank0
   928  06BB  1303               	bcf	3,6	;RP1=0, select bank0
   929  06BC  1E08               	btfss	8,4	;volatile
   930  06BD  2EC6               	goto	l1994
   931                           
   932                           ;main.c: 65: setPosicaoDesejada(0);
   933  06BE  3000               	movlw	0
   934  06BF  00D2               	movwf	setPosicaoDesejada@posicao_desejada
   935  06C0  00D3               	movwf	setPosicaoDesejada@posicao_desejada+1
   936  06C1  120A  158A  26C5  120A  118A  	fcall	_setPosicaoDesejada
   937  06C6                     l1994:	
   938                           
   939                           ;main.c: 66: if(PORTDbits.RD5==1)
   940  06C6  1283               	bcf	3,5	;RP0=0, select bank0
   941  06C7  1303               	bcf	3,6	;RP1=0, select bank0
   942  06C8  1E88               	btfss	8,5	;volatile
   943  06C9  2ED3               	goto	l1998
   944                           
   945                           ;main.c: 67: setPosicaoDesejada(90);
   946  06CA  305A               	movlw	90
   947  06CB  00D2               	movwf	setPosicaoDesejada@posicao_desejada
   948  06CC  3000               	movlw	0
   949  06CD  00D3               	movwf	setPosicaoDesejada@posicao_desejada+1
   950  06CE  120A  158A  26C5  120A  118A  	fcall	_setPosicaoDesejada
   951  06D3                     l1998:	
   952                           
   953                           ;main.c: 68: if(PORTDbits.RD6==1)
   954  06D3  1283               	bcf	3,5	;RP0=0, select bank0
   955  06D4  1303               	bcf	3,6	;RP1=0, select bank0
   956  06D5  1F08               	btfss	8,6	;volatile
   957  06D6  2EE0               	goto	l145
   958                           
   959                           ;main.c: 69: setPosicaoDesejada(180);
   960  06D7  30B4               	movlw	180
   961  06D8  00D2               	movwf	setPosicaoDesejada@posicao_desejada
   962  06D9  3000               	movlw	0
   963  06DA  00D3               	movwf	setPosicaoDesejada@posicao_desejada+1
   964  06DB  120A  158A  26C5  120A  118A  	fcall	_setPosicaoDesejada
   965  06E0                     l145:	
   966                           
   967                           ;main.c: 71: calculaVelocidade();
   968  06E0  120A  118A  2019  120A  118A  	fcall	_calculaVelocidade
   969                           
   970                           ;main.c: 73: LCD_sendString("PF:", 1, 1);
   971  06E5  300A               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   972  06E6  1283               	bcf	3,5	;RP0=0, select bank0
   973  06E7  1303               	bcf	3,6	;RP1=0, select bank0
   974  06E8  00C1               	movwf	LCD_sendString@string
   975  06E9  3080               	movlw	128
   976  06EA  00C2               	movwf	LCD_sendString@string+1
   977  06EB  01C3               	clrf	LCD_sendString@linha
   978  06EC  0AC3               	incf	LCD_sendString@linha,f
   979  06ED  01C4               	clrf	LCD_sendString@coluna
   980  06EE  0AC4               	incf	LCD_sendString@coluna,f
   981  06EF  120A  118A  20C0  120A  118A  	fcall	_LCD_sendString
   982                           
   983                           ;main.c: 74: int2char(setpoint*(5.625/32));
   984  06F4  1283               	bcf	3,5	;RP0=0, select bank0
   985  06F5  1303               	bcf	3,6	;RP1=0, select bank0
   986  06F6  085F               	movf	_setpoint+1,w
   987  06F7  00B1               	movwf	___lwtoft@c+1
   988  06F8  085E               	movf	_setpoint,w
   989  06F9  00B0               	movwf	___lwtoft@c
   990  06FA  120A  158A  263E  120A  118A  	fcall	___lwtoft
   991  06FF  1283               	bcf	3,5	;RP0=0, select bank0
   992  0700  1303               	bcf	3,6	;RP1=0, select bank0
   993  0701  0830               	movf	?___lwtoft,w
   994  0702  00B7               	movwf	___ftmul@f2
   995  0703  0831               	movf	?___lwtoft+1,w
   996  0704  00B8               	movwf	___ftmul@f2+1
   997  0705  0832               	movf	?___lwtoft+2,w
   998  0706  00B9               	movwf	___ftmul@f2+2
   999  0707  3000               	movlw	0
  1000  0708  00B4               	movwf	___ftmul@f1
  1001  0709  3034               	movlw	52
  1002  070A  00B5               	movwf	___ftmul@f1+1
  1003  070B  303E               	movlw	62
  1004  070C  00B6               	movwf	___ftmul@f1+2
  1005  070D  120A  118A  240F  120A  118A  	fcall	___ftmul
  1006  0712  1283               	bcf	3,5	;RP0=0, select bank0
  1007  0713  1303               	bcf	3,6	;RP1=0, select bank0
  1008  0714  0834               	movf	?___ftmul,w
  1009  0715  00C4               	movwf	___fttol@f1
  1010  0716  0835               	movf	?___ftmul+1,w
  1011  0717  00C5               	movwf	___fttol@f1+1
  1012  0718  0836               	movf	?___ftmul+2,w
  1013  0719  00C6               	movwf	___fttol@f1+2
  1014  071A  120A  118A  2206  120A  118A  	fcall	___fttol
  1015  071F  1283               	bcf	3,5	;RP0=0, select bank0
  1016  0720  1303               	bcf	3,6	;RP1=0, select bank0
  1017  0721  0845               	movf	?___fttol+1,w
  1018  0722  00D5               	movwf	int2char@int_value+1
  1019  0723  0844               	movf	?___fttol,w
  1020  0724  00D4               	movwf	int2char@int_value
  1021  0725  120A  118A  234C  120A  118A  	fcall	_int2char
  1022                           
  1023                           ;main.c: 75: LCD_sendString(c_int_value, 1, 4);
  1024  072A  30AA               	movlw	(low (_c_int_value| 0))& (0+255)
  1025  072B  1283               	bcf	3,5	;RP0=0, select bank0
  1026  072C  1303               	bcf	3,6	;RP1=0, select bank0
  1027  072D  00C1               	movwf	LCD_sendString@string
  1028  072E  3000               	movlw	0
  1029  072F  00C2               	movwf	LCD_sendString@string+1
  1030  0730  01C3               	clrf	LCD_sendString@linha
  1031  0731  0AC3               	incf	LCD_sendString@linha,f
  1032  0732  3004               	movlw	4
  1033  0733  1683               	bsf	3,5	;RP0=1, select bank1
  1034  0734  1303               	bcf	3,6	;RP1=0, select bank1
  1035  0735  00A6               	movwf	??_main^(0+128)
  1036  0736  0826               	movf	??_main^(0+128),w
  1037  0737  1283               	bcf	3,5	;RP0=0, select bank0
  1038  0738  1303               	bcf	3,6	;RP1=0, select bank0
  1039  0739  00C4               	movwf	LCD_sendString@coluna
  1040  073A  120A  118A  20C0  120A  118A  	fcall	_LCD_sendString
  1041                           
  1042                           ;main.c: 76: LCD_sendString("PA:", 1, 9);
  1043  073F  3006               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1044  0740  1283               	bcf	3,5	;RP0=0, select bank0
  1045  0741  1303               	bcf	3,6	;RP1=0, select bank0
  1046  0742  00C1               	movwf	LCD_sendString@string
  1047  0743  3080               	movlw	128
  1048  0744  00C2               	movwf	LCD_sendString@string+1
  1049  0745  01C3               	clrf	LCD_sendString@linha
  1050  0746  0AC3               	incf	LCD_sendString@linha,f
  1051  0747  3009               	movlw	9
  1052  0748  1683               	bsf	3,5	;RP0=1, select bank1
  1053  0749  1303               	bcf	3,6	;RP1=0, select bank1
  1054  074A  00A6               	movwf	??_main^(0+128)
  1055  074B  0826               	movf	??_main^(0+128),w
  1056  074C  1283               	bcf	3,5	;RP0=0, select bank0
  1057  074D  1303               	bcf	3,6	;RP1=0, select bank0
  1058  074E  00C4               	movwf	LCD_sendString@coluna
  1059  074F  120A  118A  20C0  120A  118A  	fcall	_LCD_sendString
  1060                           
  1061                           ;main.c: 77: int2char(getPosicaoAtual());
  1062  0754  120A  158A  2695  120A  118A  	fcall	_getPosicaoAtual
  1063  0759  1283               	bcf	3,5	;RP0=0, select bank0
  1064  075A  1303               	bcf	3,6	;RP1=0, select bank0
  1065  075B  0853               	movf	?_getPosicaoAtual+1,w
  1066  075C  00D5               	movwf	int2char@int_value+1
  1067  075D  0852               	movf	?_getPosicaoAtual,w
  1068  075E  00D4               	movwf	int2char@int_value
  1069  075F  120A  118A  234C  120A  118A  	fcall	_int2char
  1070                           
  1071                           ;main.c: 78: LCD_sendString(c_int_value, 1,12);
  1072  0764  30AA               	movlw	(low (_c_int_value| 0))& (0+255)
  1073  0765  1283               	bcf	3,5	;RP0=0, select bank0
  1074  0766  1303               	bcf	3,6	;RP1=0, select bank0
  1075  0767  00C1               	movwf	LCD_sendString@string
  1076  0768  3000               	movlw	0
  1077  0769  00C2               	movwf	LCD_sendString@string+1
  1078  076A  01C3               	clrf	LCD_sendString@linha
  1079  076B  0AC3               	incf	LCD_sendString@linha,f
  1080  076C  300C               	movlw	12
  1081  076D  1683               	bsf	3,5	;RP0=1, select bank1
  1082  076E  1303               	bcf	3,6	;RP1=0, select bank1
  1083  076F  00A6               	movwf	??_main^(0+128)
  1084  0770  0826               	movf	??_main^(0+128),w
  1085  0771  1283               	bcf	3,5	;RP0=0, select bank0
  1086  0772  1303               	bcf	3,6	;RP1=0, select bank0
  1087  0773  00C4               	movwf	LCD_sendString@coluna
  1088  0774  120A  118A  20C0  120A  118A  	fcall	_LCD_sendString
  1089                           
  1090                           ;main.c: 79: LCD_sendString("Vel:", 2, 6);
  1091  0779  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1092  077A  1283               	bcf	3,5	;RP0=0, select bank0
  1093  077B  1303               	bcf	3,6	;RP1=0, select bank0
  1094  077C  00C1               	movwf	LCD_sendString@string
  1095  077D  3080               	movlw	128
  1096  077E  00C2               	movwf	LCD_sendString@string+1
  1097  077F  3002               	movlw	2
  1098  0780  1683               	bsf	3,5	;RP0=1, select bank1
  1099  0781  1303               	bcf	3,6	;RP1=0, select bank1
  1100  0782  00A6               	movwf	??_main^(0+128)
  1101  0783  0826               	movf	??_main^(0+128),w
  1102  0784  1283               	bcf	3,5	;RP0=0, select bank0
  1103  0785  1303               	bcf	3,6	;RP1=0, select bank0
  1104  0786  00C3               	movwf	LCD_sendString@linha
  1105  0787  3006               	movlw	6
  1106  0788  1683               	bsf	3,5	;RP0=1, select bank1
  1107  0789  1303               	bcf	3,6	;RP1=0, select bank1
  1108  078A  00A7               	movwf	(??_main+1)^(0+128)
  1109  078B  0827               	movf	(??_main+1)^(0+128),w
  1110  078C  1283               	bcf	3,5	;RP0=0, select bank0
  1111  078D  1303               	bcf	3,6	;RP1=0, select bank0
  1112  078E  00C4               	movwf	LCD_sendString@coluna
  1113  078F  120A  118A  20C0  120A  118A  	fcall	_LCD_sendString
  1114                           
  1115                           ;main.c: 80: int2char(getVelocidade());
  1116  0794  120A  158A  25FA  120A  118A  	fcall	_getVelocidade
  1117  0799  1283               	bcf	3,5	;RP0=0, select bank0
  1118  079A  1303               	bcf	3,6	;RP1=0, select bank0
  1119  079B  0829               	movf	?_getVelocidade+1,w
  1120  079C  00D5               	movwf	int2char@int_value+1
  1121  079D  0828               	movf	?_getVelocidade,w
  1122  079E  00D4               	movwf	int2char@int_value
  1123  079F  120A  118A  234C  120A  118A  	fcall	_int2char
  1124                           
  1125                           ;main.c: 81: LCD_sendString(c_int_value,2,10);
  1126  07A4  30AA               	movlw	(low (_c_int_value| 0))& (0+255)
  1127  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  1128  07A6  1303               	bcf	3,6	;RP1=0, select bank0
  1129  07A7  00C1               	movwf	LCD_sendString@string
  1130  07A8  3000               	movlw	0
  1131  07A9  00C2               	movwf	LCD_sendString@string+1
  1132  07AA  3002               	movlw	2
  1133  07AB  1683               	bsf	3,5	;RP0=1, select bank1
  1134  07AC  1303               	bcf	3,6	;RP1=0, select bank1
  1135  07AD  00A6               	movwf	??_main^(0+128)
  1136  07AE  0826               	movf	??_main^(0+128),w
  1137  07AF  1283               	bcf	3,5	;RP0=0, select bank0
  1138  07B0  1303               	bcf	3,6	;RP1=0, select bank0
  1139  07B1  00C3               	movwf	LCD_sendString@linha
  1140  07B2  300A               	movlw	10
  1141  07B3  1683               	bsf	3,5	;RP0=1, select bank1
  1142  07B4  1303               	bcf	3,6	;RP1=0, select bank1
  1143  07B5  00A7               	movwf	(??_main+1)^(0+128)
  1144  07B6  0827               	movf	(??_main+1)^(0+128),w
  1145  07B7  1283               	bcf	3,5	;RP0=0, select bank0
  1146  07B8  1303               	bcf	3,6	;RP1=0, select bank0
  1147  07B9  00C4               	movwf	LCD_sendString@coluna
  1148  07BA  120A  118A  20C0  120A  118A  	fcall	_LCD_sendString
  1149  07BF  2EBA               	goto	l1990
  1150  07C0                     __end_of_main:	
  1151                           
  1152                           	psect	text1
  1153  0E15                     __ptext1:	
  1154 ;; *************** function _setup *****************
  1155 ;; Defined at:
  1156 ;;		line 50 in file "C:\Users\Aluno\Desktop\stepper_motor-pic16f887\stepper_motor\main.c"
  1157 ;; Parameters:    Size  Location     Type
  1158 ;;		None
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;		None
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  1    wreg      void 
  1163 ;; Registers used:
  1164 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1170 ;;      Params:         0       0       0       0       0
  1171 ;;      Locals:         0       0       0       0       0
  1172 ;;      Temps:          0       0       0       0       0
  1173 ;;      Totals:         0       0       0       0       0
  1174 ;;Total ram usage:        0 bytes
  1175 ;; Hardware stack levels used:    1
  1176 ;; Hardware stack levels required when called:    6
  1177 ;; This function calls:
  1178 ;;		_LCD_Setup
  1179 ;;		_setPosicaoAtual
  1180 ;;		_setupStepper
  1181 ;; This function is called by:
  1182 ;;		_main
  1183 ;; This function uses a non-reentrant model
  1184 ;;
  1185                           
  1186                           
  1187                           ;psect for function _setup
  1188  0E15                     _setup:	
  1189                           
  1190                           ;main.c: 51: LCD_Setup();
  1191                           
  1192                           ;incstack = 0
  1193                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1194  0E15  120A  118A  212B  120A  158A  	fcall	_LCD_Setup
  1195                           
  1196                           ;main.c: 53: setupStepper();
  1197  0E1A  120A  158A  2628  120A  158A  	fcall	_setupStepper
  1198                           
  1199                           ;main.c: 54: setPosicaoAtual(0);
  1200  0E1F  3000               	movlw	0
  1201  0E20  1283               	bcf	3,5	;RP0=0, select bank0
  1202  0E21  1303               	bcf	3,6	;RP1=0, select bank0
  1203  0E22  00D2               	movwf	setPosicaoAtual@posicao_atual
  1204  0E23  00D3               	movwf	setPosicaoAtual@posicao_atual+1
  1205  0E24  120A  158A  26F5   	fcall	_setPosicaoAtual
  1206  0E27  0008               	return
  1207  0E28                     __end_of_setup:	
  1208                           
  1209                           	psect	text2
  1210  0E28                     __ptext2:	
  1211 ;; *************** function _setupStepper *****************
  1212 ;; Defined at:
  1213 ;;		line 6 in file "C:\Users\Aluno\Desktop\stepper_motor-pic16f887\stepper_motor\stepper.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;		None
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;		None
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      void 
  1220 ;; Registers used:
  1221 ;;		wreg, status,2
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1227 ;;      Params:         0       0       0       0       0
  1228 ;;      Locals:         0       0       0       0       0
  1229 ;;      Temps:          0       0       0       0       0
  1230 ;;      Totals:         0       0       0       0       0
  1231 ;;Total ram usage:        0 bytes
  1232 ;; Hardware stack levels used:    1
  1233 ;; Hardware stack levels required when called:    3
  1234 ;; This function calls:
  1235 ;;		Nothing
  1236 ;; This function is called by:
  1237 ;;		_setup
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240                           
  1241                           
  1242                           ;psect for function _setupStepper
  1243  0E28                     _setupStepper:	
  1244                           
  1245                           ;stepper.c: 8: TRISD = 0b11110000;
  1246                           
  1247                           ;incstack = 0
  1248                           ; Regs used in _setupStepper: [wreg+status,2]
  1249  0E28  30F0               	movlw	240
  1250  0E29  1683               	bsf	3,5	;RP0=1, select bank1
  1251  0E2A  1303               	bcf	3,6	;RP1=0, select bank1
  1252  0E2B  0088               	movwf	8	;volatile
  1253                           
  1254                           ;stepper.c: 9: PORTD = 0;
  1255  0E2C  1283               	bcf	3,5	;RP0=0, select bank0
  1256  0E2D  1303               	bcf	3,6	;RP1=0, select bank0
  1257  0E2E  0188               	clrf	8	;volatile
  1258                           
  1259                           ;stepper.c: 11: INTCONbits.GIE = 1;
  1260  0E2F  178B               	bsf	11,7	;volatile
  1261                           
  1262                           ;stepper.c: 12: INTCONbits.PEIE = 1;
  1263  0E30  170B               	bsf	11,6	;volatile
  1264                           
  1265                           ;stepper.c: 14: PIE1bits.TMR2IE = 1;
  1266  0E31  1683               	bsf	3,5	;RP0=1, select bank1
  1267  0E32  1303               	bcf	3,6	;RP1=0, select bank1
  1268  0E33  148C               	bsf	12,1	;volatile
  1269                           
  1270                           ;stepper.c: 15: PIR1bits.TMR2IF = 0;
  1271  0E34  1283               	bcf	3,5	;RP0=0, select bank0
  1272  0E35  1303               	bcf	3,6	;RP1=0, select bank0
  1273  0E36  108C               	bcf	12,1	;volatile
  1274                           
  1275                           ;stepper.c: 16: T2CON = 0b01111110;
  1276  0E37  307E               	movlw	126
  1277  0E38  0092               	movwf	18	;volatile
  1278                           
  1279                           ;stepper.c: 17: PR2=255;
  1280  0E39  30FF               	movlw	255
  1281  0E3A  1683               	bsf	3,5	;RP0=1, select bank1
  1282  0E3B  1303               	bcf	3,6	;RP1=0, select bank1
  1283  0E3C  0092               	movwf	18	;volatile
  1284  0E3D  0008               	return
  1285  0E3E                     __end_of_setupStepper:	
  1286                           
  1287                           	psect	text3
  1288  0EF5                     __ptext3:	
  1289 ;; *************** function _setPosicaoAtual *****************
  1290 ;; Defined at:
  1291 ;;		line 20 in file "C:\Users\Aluno\Desktop\stepper_motor-pic16f887\stepper_motor\stepper.c"
  1292 ;; Parameters:    Size  Location     Type
  1293 ;;  posicao_atua    2   50[BANK0 ] unsigned int 
  1294 ;; Auto vars:     Size  Location     Type
  1295 ;;		None
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  1    wreg      void 
  1298 ;; Registers used:
  1299 ;;		wreg, status,2, status,0, pclath, cstack
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1305 ;;      Params:         0       2       0       0       0
  1306 ;;      Locals:         0       0       0       0       0
  1307 ;;      Temps:          0       0       0       0       0
  1308 ;;      Totals:         0       2       0       0       0
  1309 ;;Total ram usage:        2 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; Hardware stack levels required when called:    5
  1312 ;; This function calls:
  1313 ;;		___ftdiv
  1314 ;;		___fttol
  1315 ;;		___lwtoft
  1316 ;; This function is called by:
  1317 ;;		_setup
  1318 ;; This function uses a non-reentrant model
  1319 ;;
  1320                           
  1321                           
  1322                           ;psect for function _setPosicaoAtual
  1323  0EF5                     _setPosicaoAtual:	
  1324                           
  1325                           ;stepper.c: 21: position = posicao_atual/(5.625/32);
  1326                           
  1327                           ;incstack = 0
  1328                           ; Regs used in _setPosicaoAtual: [wreg+status,2+status,0+pclath+cstack]
  1329  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  1330  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  1331  0EF7  0853               	movf	setPosicaoAtual@posicao_atual+1,w
  1332  0EF8  00B1               	movwf	___lwtoft@c+1
  1333  0EF9  0852               	movf	setPosicaoAtual@posicao_atual,w
  1334  0EFA  00B0               	movwf	___lwtoft@c
  1335  0EFB  120A  158A  263E  120A  158A  	fcall	___lwtoft
  1336  0F00  1283               	bcf	3,5	;RP0=0, select bank0
  1337  0F01  1303               	bcf	3,6	;RP1=0, select bank0
  1338  0F02  0830               	movf	?___lwtoft,w
  1339  0F03  00B7               	movwf	___ftdiv@f1
  1340  0F04  0831               	movf	?___lwtoft+1,w
  1341  0F05  00B8               	movwf	___ftdiv@f1+1
  1342  0F06  0832               	movf	?___lwtoft+2,w
  1343  0F07  00B9               	movwf	___ftdiv@f1+2
  1344  0F08  3000               	movlw	0
  1345  0F09  00B4               	movwf	___ftdiv@f2
  1346  0F0A  3034               	movlw	52
  1347  0F0B  00B5               	movwf	___ftdiv@f2+1
  1348  0F0C  303E               	movlw	62
  1349  0F0D  00B6               	movwf	___ftdiv@f2+2
  1350  0F0E  120A  118A  2294  120A  158A  	fcall	___ftdiv
  1351  0F13  1283               	bcf	3,5	;RP0=0, select bank0
  1352  0F14  1303               	bcf	3,6	;RP1=0, select bank0
  1353  0F15  0834               	movf	?___ftdiv,w
  1354  0F16  00C4               	movwf	___fttol@f1
  1355  0F17  0835               	movf	?___ftdiv+1,w
  1356  0F18  00C5               	movwf	___fttol@f1+1
  1357  0F19  0836               	movf	?___ftdiv+2,w
  1358  0F1A  00C6               	movwf	___fttol@f1+2
  1359  0F1B  120A  118A  2206   	fcall	___fttol
  1360  0F1E  1283               	bcf	3,5	;RP0=0, select bank0
  1361  0F1F  1303               	bcf	3,6	;RP1=0, select bank0
  1362  0F20  0845               	movf	?___fttol+1,w
  1363  0F21  00DD               	movwf	_position+1
  1364  0F22  0844               	movf	?___fttol,w
  1365  0F23  00DC               	movwf	_position
  1366  0F24  0008               	return
  1367  0F25                     __end_of_setPosicaoAtual:	
  1368                           
  1369                           	psect	text4
  1370  012B                     __ptext4:	
  1371 ;; *************** function _LCD_Setup *****************
  1372 ;; Defined at:
  1373 ;;		line 22 in file "C:\Users\Aluno\Desktop\stepper_motor-pic16f887\stepper_motor\lcd.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;		None
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;		None
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  1    wreg      void 
  1380 ;; Registers used:
  1381 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1387 ;;      Params:         0       0       0       0       0
  1388 ;;      Locals:         0       0       0       0       0
  1389 ;;      Temps:          0       2       0       0       0
  1390 ;;      Totals:         0       2       0       0       0
  1391 ;;Total ram usage:        2 bytes
  1392 ;; Hardware stack levels used:    1
  1393 ;; Hardware stack levels required when called:    5
  1394 ;; This function calls:
  1395 ;;		_LCD_SendByte
  1396 ;;		_LCD_SendNb
  1397 ;; This function is called by:
  1398 ;;		_setup
  1399 ;; This function uses a non-reentrant model
  1400 ;;
  1401                           
  1402                           
  1403                           ;psect for function _LCD_Setup
  1404  012B                     _LCD_Setup:	
  1405                           
  1406                           ;lcd.c: 23: PORTB = 0x00;
  1407                           
  1408                           ;incstack = 0
  1409                           ; Regs used in _LCD_Setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1410  012B  1283               	bcf	3,5	;RP0=0, select bank0
  1411  012C  1303               	bcf	3,6	;RP1=0, select bank0
  1412  012D  0186               	clrf	6	;volatile
  1413                           
  1414                           ;lcd.c: 24: TRISB = 0x00;
  1415  012E  1683               	bsf	3,5	;RP0=1, select bank1
  1416  012F  1303               	bcf	3,6	;RP1=0, select bank1
  1417  0130  0186               	clrf	6	;volatile
  1418                           
  1419                           ;lcd.c: 25: ANSELH = 0x00;
  1420  0131  1683               	bsf	3,5	;RP0=1, select bank3
  1421  0132  1703               	bsf	3,6	;RP1=1, select bank3
  1422  0133  0189               	clrf	9	;volatile
  1423                           
  1424                           ;lcd.c: 26: *LCD_TRIS = 0x00;
  1425  0134  1683               	bsf	3,5	;RP0=1, select bank1
  1426  0135  1303               	bcf	3,6	;RP1=0, select bank1
  1427  0136  082C               	movf	_LCD_TRIS^(0+128),w
  1428  0137  0084               	movwf	4
  1429  0138  1783               	bsf	3,7
  1430  0139  1C2D               	btfss	(_LCD_TRIS+1)^(0+128),0
  1431  013A  1383               	bcf	3,7
  1432  013B  0180               	clrf	0
  1433  013C  0A84               	incf	4,f
  1434  013D  0180               	clrf	0
  1435                           
  1436                           ;lcd.c: 27: *LCD_PORT = 0x00;
  1437  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1438  013F  1303               	bcf	3,6	;RP1=0, select bank0
  1439  0140  0865               	movf	_LCD_PORT,w
  1440  0141  0084               	movwf	4
  1441  0142  1783               	bsf	3,7
  1442  0143  1C66               	btfss	_LCD_PORT+1,0
  1443  0144  1383               	bcf	3,7
  1444  0145  0180               	clrf	0
  1445  0146  0A84               	incf	4,f
  1446  0147  0180               	clrf	0
  1447                           
  1448                           ;lcd.c: 29: _delay((unsigned long)((50)*(4000000/4000.0)));
  1449  0148  3041               	movlw	65
  1450  0149  1283               	bcf	3,5	;RP0=0, select bank0
  1451  014A  1303               	bcf	3,6	;RP1=0, select bank0
  1452  014B  00BE               	movwf	??_LCD_Setup+1
  1453  014C  30ED               	movlw	237
  1454  014D  00BD               	movwf	??_LCD_Setup
  1455  014E                     u2347:	
  1456  014E  0BBD               	decfsz	??_LCD_Setup,f
  1457  014F  294E               	goto	u2347
  1458  0150  0BBE               	decfsz	??_LCD_Setup+1,f
  1459  0151  294E               	goto	u2347
  1460  0152  2953               	nop2
  1461                           
  1462                           ;lcd.c: 32: LCD_SendNb(0x03);
  1463  0153  3003               	movlw	3
  1464  0154  120A  118A  25BB  120A  118A  	fcall	_LCD_SendNb
  1465                           
  1466                           ;lcd.c: 33: LCD_SendNb(0x03);
  1467  0159  3003               	movlw	3
  1468  015A  120A  118A  25BB  120A  118A  	fcall	_LCD_SendNb
  1469                           
  1470                           ;lcd.c: 34: LCD_SendNb(0x03);
  1471  015F  3003               	movlw	3
  1472  0160  120A  118A  25BB  120A  118A  	fcall	_LCD_SendNb
  1473                           
  1474                           ;lcd.c: 35: LCD_SendNb(0x02);
  1475  0165  3002               	movlw	2
  1476  0166  120A  118A  25BB  120A  118A  	fcall	_LCD_SendNb
  1477                           
  1478                           ;lcd.c: 36: LCD_SendByte(0, 0x28);
  1479  016B  3028               	movlw	40
  1480  016C  1283               	bcf	3,5	;RP0=0, select bank0
  1481  016D  1303               	bcf	3,6	;RP1=0, select bank0
  1482  016E  00BD               	movwf	??_LCD_Setup
  1483  016F  083D               	movf	??_LCD_Setup,w
  1484  0170  00B5               	movwf	LCD_SendByte@byte
  1485  0171  3000               	movlw	0
  1486  0172  120A  158A  2763  120A  118A  	fcall	_LCD_SendByte
  1487                           
  1488                           ;lcd.c: 37: LCD_SendByte(0, LCD_Controle);
  1489  0177  1283               	bcf	3,5	;RP0=0, select bank0
  1490  0178  1303               	bcf	3,6	;RP1=0, select bank0
  1491  0179  0863               	movf	_LCD_Controle,w
  1492  017A  00BD               	movwf	??_LCD_Setup
  1493  017B  083D               	movf	??_LCD_Setup,w
  1494  017C  00B5               	movwf	LCD_SendByte@byte
  1495  017D  3000               	movlw	0
  1496  017E  120A  158A  2763  120A  118A  	fcall	_LCD_SendByte
  1497                           
  1498                           ;lcd.c: 38: LCD_SendByte(0, 0x01);
  1499  0183  1283               	bcf	3,5	;RP0=0, select bank0
  1500  0184  1303               	bcf	3,6	;RP1=0, select bank0
  1501  0185  01B5               	clrf	LCD_SendByte@byte
  1502  0186  0AB5               	incf	LCD_SendByte@byte,f
  1503  0187  3000               	movlw	0
  1504  0188  120A  158A  2763  120A  118A  	fcall	_LCD_SendByte
  1505                           
  1506                           ;lcd.c: 39: LCD_SendByte(0, LCD_Entrada);
  1507  018D  1283               	bcf	3,5	;RP0=0, select bank0
  1508  018E  1303               	bcf	3,6	;RP1=0, select bank0
  1509  018F  0864               	movf	_LCD_Entrada,w
  1510  0190  00BD               	movwf	??_LCD_Setup
  1511  0191  083D               	movf	??_LCD_Setup,w
  1512  0192  00B5               	movwf	LCD_SendByte@byte
  1513  0193  3000               	movlw	0
  1514  0194  120A  158A  2763   	fcall	_LCD_SendByte
  1515  0197  0008               	return
  1516  0198                     __end_of_LCD_Setup:	
  1517                           
  1518                           	psect	text5
  1519  0EC5                     __ptext5:	
  1520 ;; *************** function _setPosicaoDesejada *****************
  1521 ;; Defined at:
  1522 ;;		line 28 in file "C:\Users\Aluno\Desktop\stepper_motor-pic16f887\stepper_motor\stepper.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;  posicao_dese    2   50[BANK0 ] unsigned int 
  1525 ;; Auto vars:     Size  Location     Type
  1526 ;;		None
  1527 ;; Return value:  Size  Location     Type
  1528 ;;                  1    wreg      void 
  1529 ;; Registers used:
  1530 ;;		wreg, status,2, status,0, pclath, cstack
  1531 ;; Tracked objects:
  1532 ;;		On entry : 0/0
  1533 ;;		On exit  : 0/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1536 ;;      Params:         0       2       0       0       0
  1537 ;;      Locals:         0       0       0       0       0
  1538 ;;      Temps:          0       0       0       0       0
  1539 ;;      Totals:         0       2       0       0       0
  1540 ;;Total ram usage:        2 bytes
  1541 ;; Hardware stack levels used:    1
  1542 ;; Hardware stack levels required when called:    5
  1543 ;; This function calls:
  1544 ;;		___ftdiv
  1545 ;;		___fttol
  1546 ;;		___lwtoft
  1547 ;; This function is called by:
  1548 ;;		_main
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           
  1553                           ;psect for function _setPosicaoDesejada
  1554  0EC5                     _setPosicaoDesejada:	
  1555                           
  1556                           ;stepper.c: 29: setpoint = posicao_desejada/(5.625/32);
  1557                           
  1558                           ;incstack = 0
  1559                           ; Regs used in _setPosicaoDesejada: [wreg+status,2+status,0+pclath+cstack]
  1560  0EC5  1283               	bcf	3,5	;RP0=0, select bank0
  1561  0EC6  1303               	bcf	3,6	;RP1=0, select bank0
  1562  0EC7  0853               	movf	setPosicaoDesejada@posicao_desejada+1,w
  1563  0EC8  00B1               	movwf	___lwtoft@c+1
  1564  0EC9  0852               	movf	setPosicaoDesejada@posicao_desejada,w
  1565  0ECA  00B0               	movwf	___lwtoft@c
  1566  0ECB  120A  158A  263E  120A  158A  	fcall	___lwtoft
  1567  0ED0  1283               	bcf	3,5	;RP0=0, select bank0
  1568  0ED1  1303               	bcf	3,6	;RP1=0, select bank0
  1569  0ED2  0830               	movf	?___lwtoft,w
  1570  0ED3  00B7               	movwf	___ftdiv@f1
  1571  0ED4  0831               	movf	?___lwtoft+1,w
  1572  0ED5  00B8               	movwf	___ftdiv@f1+1
  1573  0ED6  0832               	movf	?___lwtoft+2,w
  1574  0ED7  00B9               	movwf	___ftdiv@f1+2
  1575  0ED8  3000               	movlw	0
  1576  0ED9  00B4               	movwf	___ftdiv@f2
  1577  0EDA  3034               	movlw	52
  1578  0EDB  00B5               	movwf	___ftdiv@f2+1
  1579  0EDC  303E               	movlw	62
  1580  0EDD  00B6               	movwf	___ftdiv@f2+2
  1581  0EDE  120A  118A  2294  120A  158A  	fcall	___ftdiv
  1582  0EE3  1283               	bcf	3,5	;RP0=0, select bank0
  1583  0EE4  1303               	bcf	3,6	;RP1=0, select bank0
  1584  0EE5  0834               	movf	?___ftdiv,w
  1585  0EE6  00C4               	movwf	___fttol@f1
  1586  0EE7  0835               	movf	?___ftdiv+1,w
  1587  0EE8  00C5               	movwf	___fttol@f1+1
  1588  0EE9  0836               	movf	?___ftdiv+2,w
  1589  0EEA  00C6               	movwf	___fttol@f1+2
  1590  0EEB  120A  118A  2206   	fcall	___fttol
  1591  0EEE  1283               	bcf	3,5	;RP0=0, select bank0
  1592  0EEF  1303               	bcf	3,6	;RP1=0, select bank0
  1593  0EF0  0845               	movf	?___fttol+1,w
  1594  0EF1  00DF               	movwf	_setpoint+1
  1595  0EF2  0844               	movf	?___fttol,w
  1596  0EF3  00DE               	movwf	_setpoint
  1597  0EF4  0008               	return
  1598  0EF5                     __end_of_setPosicaoDesejada:	
  1599                           
  1600                           	psect	text6
  1601  0294                     __ptext6:	
  1602 ;; *************** function ___ftdiv *****************
  1603 ;; Defined at:
  1604 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;  f2              3   20[BANK0 ] float 
  1607 ;;  f1              3   23[BANK0 ] float 
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;  f3              3   31[BANK0 ] float 
  1610 ;;  sign            1   35[BANK0 ] unsigned char 
  1611 ;;  exp             1   34[BANK0 ] unsigned char 
  1612 ;;  cntr            1   30[BANK0 ] unsigned char 
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  3   20[BANK0 ] float 
  1615 ;; Registers used:
  1616 ;;		wreg, status,2, status,0, pclath, cstack
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1622 ;;      Params:         0       6       0       0       0
  1623 ;;      Locals:         0       6       0       0       0
  1624 ;;      Temps:          0       4       0       0       0
  1625 ;;      Totals:         0      16       0       0       0
  1626 ;;Total ram usage:       16 bytes
  1627 ;; Hardware stack levels used:    1
  1628 ;; Hardware stack levels required when called:    4
  1629 ;; This function calls:
  1630 ;;		___ftpack
  1631 ;; This function is called by:
  1632 ;;		_setPosicaoAtual
  1633 ;;		_setPosicaoDesejada
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637                           
  1638                           ;psect for function ___ftdiv
  1639  0294                     ___ftdiv:	
  1640                           
  1641                           ;incstack = 0
  1642                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1643  0294  1283               	bcf	3,5	;RP0=0, select bank0
  1644  0295  1303               	bcf	3,6	;RP1=0, select bank0
  1645  0296  0837               	movf	___ftdiv@f1,w
  1646  0297  00BA               	movwf	??___ftdiv
  1647  0298  0838               	movf	___ftdiv@f1+1,w
  1648  0299  00BB               	movwf	??___ftdiv+1
  1649  029A  0839               	movf	___ftdiv@f1+2,w
  1650  029B  00BC               	movwf	??___ftdiv+2
  1651  029C  1003               	clrc
  1652  029D  0D3B               	rlf	??___ftdiv+1,w
  1653  029E  0D3C               	rlf	??___ftdiv+2,w
  1654  029F  00BD               	movwf	??___ftdiv+3
  1655  02A0  083D               	movf	??___ftdiv+3,w
  1656  02A1  00C2               	movwf	___ftdiv@exp
  1657  02A2  0842               	movf	___ftdiv@exp,w
  1658  02A3  1D03               	btfss	3,2
  1659  02A4  2AAC               	goto	l1406
  1660  02A5  3000               	movlw	0
  1661  02A6  00B4               	movwf	?___ftdiv
  1662  02A7  3000               	movlw	0
  1663  02A8  00B5               	movwf	?___ftdiv+1
  1664  02A9  3000               	movlw	0
  1665  02AA  00B6               	movwf	?___ftdiv+2
  1666  02AB  0008               	return
  1667  02AC                     l1406:	
  1668  02AC  0834               	movf	___ftdiv@f2,w
  1669  02AD  00BA               	movwf	??___ftdiv
  1670  02AE  0835               	movf	___ftdiv@f2+1,w
  1671  02AF  00BB               	movwf	??___ftdiv+1
  1672  02B0  0836               	movf	___ftdiv@f2+2,w
  1673  02B1  00BC               	movwf	??___ftdiv+2
  1674  02B2  1003               	clrc
  1675  02B3  0D3B               	rlf	??___ftdiv+1,w
  1676  02B4  0D3C               	rlf	??___ftdiv+2,w
  1677  02B5  00BD               	movwf	??___ftdiv+3
  1678  02B6  083D               	movf	??___ftdiv+3,w
  1679  02B7  00C3               	movwf	___ftdiv@sign
  1680  02B8  0843               	movf	___ftdiv@sign,w
  1681  02B9  1D03               	btfss	3,2
  1682  02BA  2AC2               	goto	l1412
  1683  02BB  3000               	movlw	0
  1684  02BC  00B4               	movwf	?___ftdiv
  1685  02BD  3000               	movlw	0
  1686  02BE  00B5               	movwf	?___ftdiv+1
  1687  02BF  3000               	movlw	0
  1688  02C0  00B6               	movwf	?___ftdiv+2
  1689  02C1  0008               	return
  1690  02C2                     l1412:	
  1691  02C2  3000               	movlw	0
  1692  02C3  00BF               	movwf	___ftdiv@f3
  1693  02C4  3000               	movlw	0
  1694  02C5  00C0               	movwf	___ftdiv@f3+1
  1695  02C6  3000               	movlw	0
  1696  02C7  00C1               	movwf	___ftdiv@f3+2
  1697  02C8  3089               	movlw	137
  1698  02C9  0743               	addwf	___ftdiv@sign,w
  1699  02CA  00BA               	movwf	??___ftdiv
  1700  02CB  083A               	movf	??___ftdiv,w
  1701  02CC  02C2               	subwf	___ftdiv@exp,f
  1702  02CD  0837               	movf	___ftdiv@f1,w
  1703  02CE  00BA               	movwf	??___ftdiv
  1704  02CF  0838               	movf	___ftdiv@f1+1,w
  1705  02D0  00BB               	movwf	??___ftdiv+1
  1706  02D1  0839               	movf	___ftdiv@f1+2,w
  1707  02D2  00BC               	movwf	??___ftdiv+2
  1708  02D3  3010               	movlw	16
  1709  02D4                     u1335:	
  1710  02D4  1003               	clrc
  1711  02D5  0CBC               	rrf	??___ftdiv+2,f
  1712  02D6  0CBB               	rrf	??___ftdiv+1,f
  1713  02D7  0CBA               	rrf	??___ftdiv,f
  1714  02D8  3EFF               	addlw	-1
  1715  02D9  1D03               	skipz
  1716  02DA  2AD4               	goto	u1335
  1717  02DB  083A               	movf	??___ftdiv,w
  1718  02DC  00BD               	movwf	??___ftdiv+3
  1719  02DD  083D               	movf	??___ftdiv+3,w
  1720  02DE  00C3               	movwf	___ftdiv@sign
  1721  02DF  0834               	movf	___ftdiv@f2,w
  1722  02E0  00BA               	movwf	??___ftdiv
  1723  02E1  0835               	movf	___ftdiv@f2+1,w
  1724  02E2  00BB               	movwf	??___ftdiv+1
  1725  02E3  0836               	movf	___ftdiv@f2+2,w
  1726  02E4  00BC               	movwf	??___ftdiv+2
  1727  02E5  3010               	movlw	16
  1728  02E6                     u1345:	
  1729  02E6  1003               	clrc
  1730  02E7  0CBC               	rrf	??___ftdiv+2,f
  1731  02E8  0CBB               	rrf	??___ftdiv+1,f
  1732  02E9  0CBA               	rrf	??___ftdiv,f
  1733  02EA  3EFF               	addlw	-1
  1734  02EB  1D03               	skipz
  1735  02EC  2AE6               	goto	u1345
  1736  02ED  083A               	movf	??___ftdiv,w
  1737  02EE  00BD               	movwf	??___ftdiv+3
  1738  02EF  083D               	movf	??___ftdiv+3,w
  1739  02F0  06C3               	xorwf	___ftdiv@sign,f
  1740  02F1  3080               	movlw	128
  1741  02F2  00BA               	movwf	??___ftdiv
  1742  02F3  083A               	movf	??___ftdiv,w
  1743  02F4  05C3               	andwf	___ftdiv@sign,f
  1744  02F5  17B8               	bsf	___ftdiv@f1+1,7
  1745  02F6  30FF               	movlw	255
  1746  02F7  05B7               	andwf	___ftdiv@f1,f
  1747  02F8  30FF               	movlw	255
  1748  02F9  05B8               	andwf	___ftdiv@f1+1,f
  1749  02FA  3000               	movlw	0
  1750  02FB  05B9               	andwf	___ftdiv@f1+2,f
  1751  02FC  17B5               	bsf	___ftdiv@f2+1,7
  1752  02FD  30FF               	movlw	255
  1753  02FE  05B4               	andwf	___ftdiv@f2,f
  1754  02FF  30FF               	movlw	255
  1755  0300  05B5               	andwf	___ftdiv@f2+1,f
  1756  0301  3000               	movlw	0
  1757  0302  05B6               	andwf	___ftdiv@f2+2,f
  1758  0303  3018               	movlw	24
  1759  0304  00BA               	movwf	??___ftdiv
  1760  0305  083A               	movf	??___ftdiv,w
  1761  0306  00BE               	movwf	___ftdiv@cntr
  1762  0307                     l1426:	
  1763  0307  3001               	movlw	1
  1764  0308                     u1355:	
  1765  0308  1003               	clrc
  1766  0309  0DBF               	rlf	___ftdiv@f3,f
  1767  030A  0DC0               	rlf	___ftdiv@f3+1,f
  1768  030B  0DC1               	rlf	___ftdiv@f3+2,f
  1769  030C  3EFF               	addlw	-1
  1770  030D  1D03               	skipz
  1771  030E  2B08               	goto	u1355
  1772  030F  0836               	movf	___ftdiv@f2+2,w
  1773  0310  0239               	subwf	___ftdiv@f1+2,w
  1774  0311  1D03               	skipz
  1775  0312  2B19               	goto	u1365
  1776  0313  0835               	movf	___ftdiv@f2+1,w
  1777  0314  0238               	subwf	___ftdiv@f1+1,w
  1778  0315  1D03               	skipz
  1779  0316  2B19               	goto	u1365
  1780  0317  0834               	movf	___ftdiv@f2,w
  1781  0318  0237               	subwf	___ftdiv@f1,w
  1782  0319                     u1365:	
  1783  0319  1C03               	skipc
  1784  031A  2B26               	goto	l1434
  1785  031B  0834               	movf	___ftdiv@f2,w
  1786  031C  02B7               	subwf	___ftdiv@f1,f
  1787  031D  0835               	movf	___ftdiv@f2+1,w
  1788  031E  1C03               	skipc
  1789  031F  0F35               	incfsz	___ftdiv@f2+1,w
  1790  0320  02B8               	subwf	___ftdiv@f1+1,f
  1791  0321  0836               	movf	___ftdiv@f2+2,w
  1792  0322  1C03               	skipc
  1793  0323  0A36               	incf	___ftdiv@f2+2,w
  1794  0324  02B9               	subwf	___ftdiv@f1+2,f
  1795  0325  143F               	bsf	___ftdiv@f3,0
  1796  0326                     l1434:	
  1797  0326  3001               	movlw	1
  1798  0327                     u1375:	
  1799  0327  1003               	clrc
  1800  0328  0DB7               	rlf	___ftdiv@f1,f
  1801  0329  0DB8               	rlf	___ftdiv@f1+1,f
  1802  032A  0DB9               	rlf	___ftdiv@f1+2,f
  1803  032B  3EFF               	addlw	-1
  1804  032C  1D03               	skipz
  1805  032D  2B27               	goto	u1375
  1806  032E  3001               	movlw	1
  1807  032F  02BE               	subwf	___ftdiv@cntr,f
  1808  0330  1D03               	btfss	3,2
  1809  0331  2B07               	goto	l1426
  1810  0332  083F               	movf	___ftdiv@f3,w
  1811  0333  00A8               	movwf	___ftpack@arg
  1812  0334  0840               	movf	___ftdiv@f3+1,w
  1813  0335  00A9               	movwf	___ftpack@arg+1
  1814  0336  0841               	movf	___ftdiv@f3+2,w
  1815  0337  00AA               	movwf	___ftpack@arg+2
  1816  0338  0842               	movf	___ftdiv@exp,w
  1817  0339  00BA               	movwf	??___ftdiv
  1818  033A  083A               	movf	??___ftdiv,w
  1819  033B  00AB               	movwf	___ftpack@exp
  1820  033C  0843               	movf	___ftdiv@sign,w
  1821  033D  00BB               	movwf	??___ftdiv+1
  1822  033E  083B               	movf	??___ftdiv+1,w
  1823  033F  00AC               	movwf	___ftpack@sign
  1824  0340  120A  118A  2198   	fcall	___ftpack
  1825  0343  1283               	bcf	3,5	;RP0=0, select bank0
  1826  0344  1303               	bcf	3,6	;RP1=0, select bank0
  1827  0345  0828               	movf	?___ftpack,w
  1828  0346  00B4               	movwf	?___ftdiv
  1829  0347  0829               	movf	?___ftpack+1,w
  1830  0348  00B5               	movwf	?___ftdiv+1
  1831  0349  082A               	movf	?___ftpack+2,w
  1832  034A  00B6               	movwf	?___ftdiv+2
  1833  034B  0008               	return
  1834  034C                     __end_of___ftdiv:	
  1835                           
  1836                           	psect	text7
  1837  034C                     __ptext7:	
  1838 ;; *************** function _int2char *****************
  1839 ;; Defined at:
  1840 ;;		line 160 in file "C:\Users\Aluno\Desktop\stepper_motor-pic16f887\stepper_motor\lcd.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;  int_value       2   52[BANK0 ] unsigned int 
  1843 ;; Auto vars:     Size  Location     Type
  1844 ;;  int_value2      2    4[BANK1 ] unsigned int 
  1845 ;;  int_value1      2    2[BANK1 ] unsigned int 
  1846 ;;  int_value0      2    0[BANK1 ] unsigned int 
  1847 ;; Return value:  Size  Location     Type
  1848 ;;                  1    wreg      void 
  1849 ;; Registers used:
  1850 ;;		wreg, status,2, status,0, pclath, cstack
  1851 ;; Tracked objects:
  1852 ;;		On entry : 0/0
  1853 ;;		On exit  : 0/0
  1854 ;;		Unchanged: 0/0
  1855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1856 ;;      Params:         0       2       0       0       0
  1857 ;;      Locals:         0       0       6       0       0
  1858 ;;      Temps:          0       4       0       0       0
  1859 ;;      Totals:         0       6       6       0       0
  1860 ;;Total ram usage:       12 bytes
  1861 ;; Hardware stack levels used:    1
  1862 ;; Hardware stack levels required when called:    4
  1863 ;; This function calls:
  1864 ;;		___lwdiv
  1865 ;;		___wmul
  1866 ;; This function is called by:
  1867 ;;		_main
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           
  1872                           ;psect for function _int2char
  1873  034C                     _int2char:	
  1874                           
  1875                           ;lcd.c: 161: uint16_t int_value0 = 0;
  1876                           
  1877                           ;incstack = 0
  1878                           ; Regs used in _int2char: [wreg+status,2+status,0+pclath+cstack]
  1879  034C  1683               	bsf	3,5	;RP0=1, select bank1
  1880  034D  1303               	bcf	3,6	;RP1=0, select bank1
  1881  034E  01A0               	clrf	int2char@int_value0^(0+128)
  1882  034F  01A1               	clrf	(int2char@int_value0+1)^(0+128)
  1883                           
  1884                           ;lcd.c: 162: uint16_t int_value1 = 0;
  1885  0350  01A2               	clrf	int2char@int_value1^(0+128)
  1886  0351  01A3               	clrf	(int2char@int_value1+1)^(0+128)
  1887                           
  1888                           ;lcd.c: 163: uint16_t int_value2 = 0;
  1889  0352  01A4               	clrf	int2char@int_value2^(0+128)
  1890  0353  01A5               	clrf	(int2char@int_value2+1)^(0+128)
  1891                           
  1892                           ;lcd.c: 165: int_value2 = int_value/100;
  1893  0354  3064               	movlw	100
  1894  0355  1283               	bcf	3,5	;RP0=0, select bank0
  1895  0356  1303               	bcf	3,6	;RP1=0, select bank0
  1896  0357  00A8               	movwf	___lwdiv@divisor
  1897  0358  3000               	movlw	0
  1898  0359  00A9               	movwf	___lwdiv@divisor+1
  1899  035A  0855               	movf	int2char@int_value+1,w
  1900  035B  00AB               	movwf	___lwdiv@dividend+1
  1901  035C  0854               	movf	int2char@int_value,w
  1902  035D  00AA               	movwf	___lwdiv@dividend
  1903  035E  120A  158A  2725  120A  118A  	fcall	___lwdiv
  1904  0363  1283               	bcf	3,5	;RP0=0, select bank0
  1905  0364  1303               	bcf	3,6	;RP1=0, select bank0
  1906  0365  0829               	movf	?___lwdiv+1,w
  1907  0366  1683               	bsf	3,5	;RP0=1, select bank1
  1908  0367  1303               	bcf	3,6	;RP1=0, select bank1
  1909  0368  00A5               	movwf	(int2char@int_value2+1)^(0+128)
  1910  0369  1283               	bcf	3,5	;RP0=0, select bank0
  1911  036A  1303               	bcf	3,6	;RP1=0, select bank0
  1912  036B  0828               	movf	?___lwdiv,w
  1913  036C  1683               	bsf	3,5	;RP0=1, select bank1
  1914  036D  1303               	bcf	3,6	;RP1=0, select bank1
  1915  036E  00A4               	movwf	int2char@int_value2^(0+128)
  1916                           
  1917                           ;lcd.c: 166: int_value1 = int_value/10 - int_value2*10;
  1918  036F  0825               	movf	(int2char@int_value2+1)^(0+128),w
  1919  0370  1283               	bcf	3,5	;RP0=0, select bank0
  1920  0371  1303               	bcf	3,6	;RP1=0, select bank0
  1921  0372  00B2               	movwf	___wmul@multiplier+1
  1922  0373  1683               	bsf	3,5	;RP0=1, select bank1
  1923  0374  1303               	bcf	3,6	;RP1=0, select bank1
  1924  0375  0824               	movf	int2char@int_value2^(0+128),w
  1925  0376  1283               	bcf	3,5	;RP0=0, select bank0
  1926  0377  1303               	bcf	3,6	;RP1=0, select bank0
  1927  0378  00B1               	movwf	___wmul@multiplier
  1928  0379  300A               	movlw	10
  1929  037A  00B3               	movwf	___wmul@multiplicand
  1930  037B  3000               	movlw	0
  1931  037C  00B4               	movwf	___wmul@multiplicand+1
  1932  037D  120A  158A  2672  120A  118A  	fcall	___wmul
  1933  0382  1283               	bcf	3,5	;RP0=0, select bank0
  1934  0383  1303               	bcf	3,6	;RP1=0, select bank0
  1935  0384  0931               	comf	?___wmul,w
  1936  0385  00D6               	movwf	??_int2char
  1937  0386  0932               	comf	?___wmul+1,w
  1938  0387  00D7               	movwf	??_int2char+1
  1939  0388  0AD6               	incf	??_int2char,f
  1940  0389  1903               	skipnz
  1941  038A  0AD7               	incf	??_int2char+1,f
  1942  038B  300A               	movlw	10
  1943  038C  00A8               	movwf	___lwdiv@divisor
  1944  038D  3000               	movlw	0
  1945  038E  00A9               	movwf	___lwdiv@divisor+1
  1946  038F  0855               	movf	int2char@int_value+1,w
  1947  0390  00AB               	movwf	___lwdiv@dividend+1
  1948  0391  0854               	movf	int2char@int_value,w
  1949  0392  00AA               	movwf	___lwdiv@dividend
  1950  0393  120A  158A  2725  120A  118A  	fcall	___lwdiv
  1951  0398  1283               	bcf	3,5	;RP0=0, select bank0
  1952  0399  1303               	bcf	3,6	;RP1=0, select bank0
  1953  039A  0856               	movf	??_int2char,w
  1954  039B  0728               	addwf	?___lwdiv,w
  1955  039C  1683               	bsf	3,5	;RP0=1, select bank1
  1956  039D  1303               	bcf	3,6	;RP1=0, select bank1
  1957  039E  00A2               	movwf	int2char@int_value1^(0+128)
  1958  039F  1283               	bcf	3,5	;RP0=0, select bank0
  1959  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  1960  03A1  0857               	movf	??_int2char+1,w
  1961  03A2  1803               	skipnc
  1962  03A3  0A57               	incf	??_int2char+1,w
  1963  03A4  0729               	addwf	?___lwdiv+1,w
  1964  03A5  1683               	bsf	3,5	;RP0=1, select bank1
  1965  03A6  1303               	bcf	3,6	;RP1=0, select bank1
  1966  03A7  00A3               	movwf	(int2char@int_value1+1)^(0+128)
  1967                           
  1968                           ;lcd.c: 167: int_value0 = int_value - int_value2*100 - int_value1*10;
  1969  03A8  0825               	movf	(int2char@int_value2+1)^(0+128),w
  1970  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  1971  03AA  1303               	bcf	3,6	;RP1=0, select bank0
  1972  03AB  00B2               	movwf	___wmul@multiplier+1
  1973  03AC  1683               	bsf	3,5	;RP0=1, select bank1
  1974  03AD  1303               	bcf	3,6	;RP1=0, select bank1
  1975  03AE  0824               	movf	int2char@int_value2^(0+128),w
  1976  03AF  1283               	bcf	3,5	;RP0=0, select bank0
  1977  03B0  1303               	bcf	3,6	;RP1=0, select bank0
  1978  03B1  00B1               	movwf	___wmul@multiplier
  1979  03B2  3064               	movlw	100
  1980  03B3  00B3               	movwf	___wmul@multiplicand
  1981  03B4  3000               	movlw	0
  1982  03B5  00B4               	movwf	___wmul@multiplicand+1
  1983  03B6  120A  158A  2672  120A  118A  	fcall	___wmul
  1984  03BB  1283               	bcf	3,5	;RP0=0, select bank0
  1985  03BC  1303               	bcf	3,6	;RP1=0, select bank0
  1986  03BD  0831               	movf	?___wmul,w
  1987  03BE  00D6               	movwf	??_int2char
  1988  03BF  0832               	movf	?___wmul+1,w
  1989  03C0  00D7               	movwf	??_int2char+1
  1990  03C1  1683               	bsf	3,5	;RP0=1, select bank1
  1991  03C2  1303               	bcf	3,6	;RP1=0, select bank1
  1992  03C3  0823               	movf	(int2char@int_value1+1)^(0+128),w
  1993  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  1994  03C5  1303               	bcf	3,6	;RP1=0, select bank0
  1995  03C6  00B2               	movwf	___wmul@multiplier+1
  1996  03C7  1683               	bsf	3,5	;RP0=1, select bank1
  1997  03C8  1303               	bcf	3,6	;RP1=0, select bank1
  1998  03C9  0822               	movf	int2char@int_value1^(0+128),w
  1999  03CA  1283               	bcf	3,5	;RP0=0, select bank0
  2000  03CB  1303               	bcf	3,6	;RP1=0, select bank0
  2001  03CC  00B1               	movwf	___wmul@multiplier
  2002  03CD  300A               	movlw	10
  2003  03CE  00B3               	movwf	___wmul@multiplicand
  2004  03CF  3000               	movlw	0
  2005  03D0  00B4               	movwf	___wmul@multiplicand+1
  2006  03D1  120A  158A  2672  120A  118A  	fcall	___wmul
  2007  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  2008  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  2009  03D8  0831               	movf	?___wmul,w
  2010  03D9  0756               	addwf	??_int2char,w
  2011  03DA  00D8               	movwf	??_int2char+2
  2012  03DB  0832               	movf	?___wmul+1,w
  2013  03DC  1803               	skipnc
  2014  03DD  0A32               	incf	?___wmul+1,w
  2015  03DE  0757               	addwf	??_int2char+1,w
  2016  03DF  00D9               	movwf	??_int2char+3
  2017  03E0  09D8               	comf	??_int2char+2,f
  2018  03E1  09D9               	comf	??_int2char+3,f
  2019  03E2  0AD8               	incf	??_int2char+2,f
  2020  03E3  1903               	skipnz
  2021  03E4  0AD9               	incf	??_int2char+3,f
  2022  03E5  0854               	movf	int2char@int_value,w
  2023  03E6  0758               	addwf	??_int2char+2,w
  2024  03E7  1683               	bsf	3,5	;RP0=1, select bank1
  2025  03E8  1303               	bcf	3,6	;RP1=0, select bank1
  2026  03E9  00A0               	movwf	int2char@int_value0^(0+128)
  2027  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  2028  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  2029  03EC  0855               	movf	int2char@int_value+1,w
  2030  03ED  1803               	skipnc
  2031  03EE  0A55               	incf	int2char@int_value+1,w
  2032  03EF  0759               	addwf	??_int2char+3,w
  2033  03F0  1683               	bsf	3,5	;RP0=1, select bank1
  2034  03F1  1303               	bcf	3,6	;RP1=0, select bank1
  2035  03F2  00A1               	movwf	(int2char@int_value0+1)^(0+128)
  2036                           
  2037                           ;lcd.c: 169: c_int_value[2] = int_value0 + 48;
  2038  03F3  0820               	movf	int2char@int_value0^(0+128),w
  2039  03F4  3E30               	addlw	48
  2040  03F5  1283               	bcf	3,5	;RP0=0, select bank0
  2041  03F6  1303               	bcf	3,6	;RP1=0, select bank0
  2042  03F7  00D6               	movwf	??_int2char
  2043  03F8  0856               	movf	??_int2char,w
  2044  03F9  1683               	bsf	3,5	;RP0=1, select bank1
  2045  03FA  1303               	bcf	3,6	;RP1=0, select bank1
  2046  03FB  00AC               	movwf	(_c_int_value^(0+128)+2)
  2047                           
  2048                           ;lcd.c: 170: c_int_value[1] = int_value1 + 48;
  2049  03FC  0822               	movf	int2char@int_value1^(0+128),w
  2050  03FD  3E30               	addlw	48
  2051  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  2052  03FF  1303               	bcf	3,6	;RP1=0, select bank0
  2053  0400  00D6               	movwf	??_int2char
  2054  0401  0856               	movf	??_int2char,w
  2055  0402  1683               	bsf	3,5	;RP0=1, select bank1
  2056  0403  1303               	bcf	3,6	;RP1=0, select bank1
  2057  0404  00AB               	movwf	(_c_int_value^(0+128)+1)
  2058                           
  2059                           ;lcd.c: 171: c_int_value[0] = int_value2 + 48;
  2060  0405  0824               	movf	int2char@int_value2^(0+128),w
  2061  0406  3E30               	addlw	48
  2062  0407  1283               	bcf	3,5	;RP0=0, select bank0
  2063  0408  1303               	bcf	3,6	;RP1=0, select bank0
  2064  0409  00D6               	movwf	??_int2char
  2065  040A  0856               	movf	??_int2char,w
  2066  040B  1683               	bsf	3,5	;RP0=1, select bank1
  2067  040C  1303               	bcf	3,6	;RP1=0, select bank1
  2068  040D  00AA               	movwf	_c_int_value^(0+128)
  2069  040E  0008               	return
  2070  040F                     __end_of_int2char:	
  2071                           
  2072                           	psect	text8
  2073  0F25                     __ptext8:	
  2074 ;; *************** function ___lwdiv *****************
  2075 ;; Defined at:
  2076 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;  divisor         2    8[BANK0 ] unsigned int 
  2079 ;;  dividend        2   10[BANK0 ] unsigned int 
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;  quotient        2   14[BANK0 ] unsigned int 
  2082 ;;  counter         1   13[BANK0 ] unsigned char 
  2083 ;; Return value:  Size  Location     Type
  2084 ;;                  2    8[BANK0 ] unsigned int 
  2085 ;; Registers used:
  2086 ;;		wreg, status,2, status,0
  2087 ;; Tracked objects:
  2088 ;;		On entry : 0/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: 0/0
  2091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2092 ;;      Params:         0       4       0       0       0
  2093 ;;      Locals:         0       3       0       0       0
  2094 ;;      Temps:          0       1       0       0       0
  2095 ;;      Totals:         0       8       0       0       0
  2096 ;;Total ram usage:        8 bytes
  2097 ;; Hardware stack levels used:    1
  2098 ;; Hardware stack levels required when called:    3
  2099 ;; This function calls:
  2100 ;;		Nothing
  2101 ;; This function is called by:
  2102 ;;		_int2char
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           
  2107                           ;psect for function ___lwdiv
  2108  0F25                     ___lwdiv:	
  2109                           
  2110                           ;incstack = 0
  2111                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2112  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  2113  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  2114  0F27  01AE               	clrf	___lwdiv@quotient
  2115  0F28  01AF               	clrf	___lwdiv@quotient+1
  2116  0F29  0828               	movf	___lwdiv@divisor,w
  2117  0F2A  0429               	iorwf	___lwdiv@divisor+1,w
  2118  0F2B  1903               	btfsc	3,2
  2119  0F2C  2F5E               	goto	l1964
  2120  0F2D  01AD               	clrf	___lwdiv@counter
  2121  0F2E  0AAD               	incf	___lwdiv@counter,f
  2122  0F2F                     l1952:	
  2123  0F2F  1BA9               	btfsc	___lwdiv@divisor+1,7
  2124  0F30  2F3D               	goto	l1954
  2125  0F31  3001               	movlw	1
  2126  0F32                     u2245:	
  2127  0F32  1003               	clrc
  2128  0F33  0DA8               	rlf	___lwdiv@divisor,f
  2129  0F34  0DA9               	rlf	___lwdiv@divisor+1,f
  2130  0F35  3EFF               	addlw	-1
  2131  0F36  1D03               	skipz
  2132  0F37  2F32               	goto	u2245
  2133  0F38  3001               	movlw	1
  2134  0F39  00AC               	movwf	??___lwdiv
  2135  0F3A  082C               	movf	??___lwdiv,w
  2136  0F3B  07AD               	addwf	___lwdiv@counter,f
  2137  0F3C  2F2F               	goto	l1952
  2138  0F3D                     l1954:	
  2139  0F3D  3001               	movlw	1
  2140  0F3E                     u2265:	
  2141  0F3E  1003               	clrc
  2142  0F3F  0DAE               	rlf	___lwdiv@quotient,f
  2143  0F40  0DAF               	rlf	___lwdiv@quotient+1,f
  2144  0F41  3EFF               	addlw	-1
  2145  0F42  1D03               	skipz
  2146  0F43  2F3E               	goto	u2265
  2147  0F44  0829               	movf	___lwdiv@divisor+1,w
  2148  0F45  022B               	subwf	___lwdiv@dividend+1,w
  2149  0F46  1D03               	skipz
  2150  0F47  2F4A               	goto	u2275
  2151  0F48  0828               	movf	___lwdiv@divisor,w
  2152  0F49  022A               	subwf	___lwdiv@dividend,w
  2153  0F4A                     u2275:	
  2154  0F4A  1C03               	skipc
  2155  0F4B  2F53               	goto	l1960
  2156  0F4C  0828               	movf	___lwdiv@divisor,w
  2157  0F4D  02AA               	subwf	___lwdiv@dividend,f
  2158  0F4E  0829               	movf	___lwdiv@divisor+1,w
  2159  0F4F  1C03               	skipc
  2160  0F50  03AB               	decf	___lwdiv@dividend+1,f
  2161  0F51  02AB               	subwf	___lwdiv@dividend+1,f
  2162  0F52  142E               	bsf	___lwdiv@quotient,0
  2163  0F53                     l1960:	
  2164  0F53  3001               	movlw	1
  2165  0F54                     u2285:	
  2166  0F54  1003               	clrc
  2167  0F55  0CA9               	rrf	___lwdiv@divisor+1,f
  2168  0F56  0CA8               	rrf	___lwdiv@divisor,f
  2169  0F57  3EFF               	addlw	-1
  2170  0F58  1D03               	skipz
  2171  0F59  2F54               	goto	u2285
  2172  0F5A  3001               	movlw	1
  2173  0F5B  02AD               	subwf	___lwdiv@counter,f
  2174  0F5C  1D03               	btfss	3,2
  2175  0F5D  2F3D               	goto	l1954
  2176  0F5E                     l1964:	
  2177  0F5E  082F               	movf	___lwdiv@quotient+1,w
  2178  0F5F  00A9               	movwf	?___lwdiv+1
  2179  0F60  082E               	movf	___lwdiv@quotient,w
  2180  0F61  00A8               	movwf	?___lwdiv
  2181  0F62  0008               	return
  2182  0F63                     __end_of___lwdiv:	
  2183                           
  2184                           	psect	text9
  2185  0DFA                     __ptext9:	
  2186 ;; *************** function _getVelocidade *****************
  2187 ;; Defined at:
  2188 ;;		line 42 in file "C:\Users\Aluno\Desktop\stepper_motor-pic16f887\stepper_motor\stepper.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;		None
  2191 ;; Auto vars:     Size  Location     Type
  2192 ;;		None
  2193 ;; Return value:  Size  Location     Type
  2194 ;;                  2    8[BANK0 ] unsigned int 
  2195 ;; Registers used:
  2196 ;;		wreg
  2197 ;; Tracked objects:
  2198 ;;		On entry : 0/0
  2199 ;;		On exit  : 0/0
  2200 ;;		Unchanged: 0/0
  2201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2202 ;;      Params:         0       2       0       0       0
  2203 ;;      Locals:         0       0       0       0       0
  2204 ;;      Temps:          0       0       0       0       0
  2205 ;;      Totals:         0       2       0       0       0
  2206 ;;Total ram usage:        2 bytes
  2207 ;; Hardware stack levels used:    1
  2208 ;; Hardware stack levels required when called:    3
  2209 ;; This function calls:
  2210 ;;		Nothing
  2211 ;; This function is called by:
  2212 ;;		_main
  2213 ;; This function uses a non-reentrant model
  2214 ;;
  2215                           
  2216                           
  2217                           ;psect for function _getVelocidade
  2218  0DFA                     _getVelocidade:	
  2219                           
  2220                           ;stepper.c: 43: return speed;
  2221                           
  2222                           ;incstack = 0
  2223                           ; Regs used in _getVelocidade: [wreg]
  2224  0DFA  1683               	bsf	3,5	;RP0=1, select bank1
  2225  0DFB  1303               	bcf	3,6	;RP1=0, select bank1
  2226  0DFC  0829               	movf	(_speed+1)^(0+128),w
  2227  0DFD  1283               	bcf	3,5	;RP0=0, select bank0
  2228  0DFE  1303               	bcf	3,6	;RP1=0, select bank0
  2229  0DFF  00A9               	movwf	?_getVelocidade+1
  2230  0E00  1683               	bsf	3,5	;RP0=1, select bank1
  2231  0E01  1303               	bcf	3,6	;RP1=0, select bank1
  2232  0E02  0828               	movf	_speed^(0+128),w
  2233  0E03  1283               	bcf	3,5	;RP0=0, select bank0
  2234  0E04  1303               	bcf	3,6	;RP1=0, select bank0
  2235  0E05  00A8               	movwf	?_getVelocidade
  2236  0E06  0008               	return
  2237  0E07                     __end_of_getVelocidade:	
  2238                           
  2239                           	psect	text10
  2240  0E95                     __ptext10:	
  2241 ;; *************** function _getPosicaoAtual *****************
  2242 ;; Defined at:
  2243 ;;		line 24 in file "C:\Users\Aluno\Desktop\stepper_motor-pic16f887\stepper_motor\stepper.c"
  2244 ;; Parameters:    Size  Location     Type
  2245 ;;		None
  2246 ;; Auto vars:     Size  Location     Type
  2247 ;;		None
  2248 ;; Return value:  Size  Location     Type
  2249 ;;                  2   50[BANK0 ] unsigned int 
  2250 ;; Registers used:
  2251 ;;		wreg, status,2, status,0, pclath, cstack
  2252 ;; Tracked objects:
  2253 ;;		On entry : 0/0
  2254 ;;		On exit  : 0/0
  2255 ;;		Unchanged: 0/0
  2256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2257 ;;      Params:         0       2       0       0       0
  2258 ;;      Locals:         0       0       0       0       0
  2259 ;;      Temps:          0       0       0       0       0
  2260 ;;      Totals:         0       2       0       0       0
  2261 ;;Total ram usage:        2 bytes
  2262 ;; Hardware stack levels used:    1
  2263 ;; Hardware stack levels required when called:    5
  2264 ;; This function calls:
  2265 ;;		___ftmul
  2266 ;;		___fttol
  2267 ;;		___lwtoft
  2268 ;; This function is called by:
  2269 ;;		_main
  2270 ;; This function uses a non-reentrant model
  2271 ;;
  2272                           
  2273                           
  2274                           ;psect for function _getPosicaoAtual
  2275  0E95                     _getPosicaoAtual:	
  2276                           
  2277                           ;stepper.c: 25: return position*(5.625/32);
  2278                           
  2279                           ;incstack = 0
  2280                           ; Regs used in _getPosicaoAtual: [wreg+status,2+status,0+pclath+cstack]
  2281  0E95  1283               	bcf	3,5	;RP0=0, select bank0
  2282  0E96  1303               	bcf	3,6	;RP1=0, select bank0
  2283  0E97  085D               	movf	_position+1,w
  2284  0E98  00B1               	movwf	___lwtoft@c+1
  2285  0E99  085C               	movf	_position,w
  2286  0E9A  00B0               	movwf	___lwtoft@c
  2287  0E9B  120A  158A  263E  120A  158A  	fcall	___lwtoft
  2288  0EA0  1283               	bcf	3,5	;RP0=0, select bank0
  2289  0EA1  1303               	bcf	3,6	;RP1=0, select bank0
  2290  0EA2  0830               	movf	?___lwtoft,w
  2291  0EA3  00B7               	movwf	___ftmul@f2
  2292  0EA4  0831               	movf	?___lwtoft+1,w
  2293  0EA5  00B8               	movwf	___ftmul@f2+1
  2294  0EA6  0832               	movf	?___lwtoft+2,w
  2295  0EA7  00B9               	movwf	___ftmul@f2+2
  2296  0EA8  3000               	movlw	0
  2297  0EA9  00B4               	movwf	___ftmul@f1
  2298  0EAA  3034               	movlw	52
  2299  0EAB  00B5               	movwf	___ftmul@f1+1
  2300  0EAC  303E               	movlw	62
  2301  0EAD  00B6               	movwf	___ftmul@f1+2
  2302  0EAE  120A  118A  240F  120A  158A  	fcall	___ftmul
  2303  0EB3  1283               	bcf	3,5	;RP0=0, select bank0
  2304  0EB4  1303               	bcf	3,6	;RP1=0, select bank0
  2305  0EB5  0834               	movf	?___ftmul,w
  2306  0EB6  00C4               	movwf	___fttol@f1
  2307  0EB7  0835               	movf	?___ftmul+1,w
  2308  0EB8  00C5               	movwf	___fttol@f1+1
  2309  0EB9  0836               	movf	?___ftmul+2,w
  2310  0EBA  00C6               	movwf	___fttol@f1+2
  2311  0EBB  120A  118A  2206   	fcall	___fttol
  2312  0EBE  1283               	bcf	3,5	;RP0=0, select bank0
  2313  0EBF  1303               	bcf	3,6	;RP1=0, select bank0
  2314  0EC0  0845               	movf	?___fttol+1,w
  2315  0EC1  00D3               	movwf	?_getPosicaoAtual+1
  2316  0EC2  0844               	movf	?___fttol,w
  2317  0EC3  00D2               	movwf	?_getPosicaoAtual
  2318  0EC4  0008               	return
  2319  0EC5                     __end_of_getPosicaoAtual:	
  2320                           
  2321                           	psect	text11
  2322  0E3E                     __ptext11:	
  2323 ;; *************** function ___lwtoft *****************
  2324 ;; Defined at:
  2325 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;  c               2   16[BANK0 ] unsigned int 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;		None
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  3   16[BANK0 ] float 
  2332 ;; Registers used:
  2333 ;;		wreg, status,2, status,0, pclath, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2339 ;;      Params:         0       3       0       0       0
  2340 ;;      Locals:         0       0       0       0       0
  2341 ;;      Temps:          0       1       0       0       0
  2342 ;;      Totals:         0       4       0       0       0
  2343 ;;Total ram usage:        4 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    4
  2346 ;; This function calls:
  2347 ;;		___ftpack
  2348 ;; This function is called by:
  2349 ;;		_setPosicaoAtual
  2350 ;;		_getPosicaoAtual
  2351 ;;		_setPosicaoDesejada
  2352 ;;		_main
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           
  2357                           ;psect for function ___lwtoft
  2358  0E3E                     ___lwtoft:	
  2359                           
  2360                           ;incstack = 0
  2361                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2362  0E3E  1283               	bcf	3,5	;RP0=0, select bank0
  2363  0E3F  1303               	bcf	3,6	;RP1=0, select bank0
  2364  0E40  0830               	movf	___lwtoft@c,w
  2365  0E41  00A8               	movwf	___ftpack@arg
  2366  0E42  0831               	movf	___lwtoft@c+1,w
  2367  0E43  00A9               	movwf	___ftpack@arg+1
  2368  0E44  01AA               	clrf	___ftpack@arg+2
  2369  0E45  308E               	movlw	142
  2370  0E46  00B3               	movwf	??___lwtoft
  2371  0E47  0833               	movf	??___lwtoft,w
  2372  0E48  00AB               	movwf	___ftpack@exp
  2373  0E49  01AC               	clrf	___ftpack@sign
  2374  0E4A  120A  118A  2198   	fcall	___ftpack
  2375  0E4D  1283               	bcf	3,5	;RP0=0, select bank0
  2376  0E4E  1303               	bcf	3,6	;RP1=0, select bank0
  2377  0E4F  0828               	movf	?___ftpack,w
  2378  0E50  00B0               	movwf	?___lwtoft
  2379  0E51  0829               	movf	?___ftpack+1,w
  2380  0E52  00B1               	movwf	?___lwtoft+1
  2381  0E53  082A               	movf	?___ftpack+2,w
  2382  0E54  00B2               	movwf	?___lwtoft+2
  2383  0E55  0008               	return
  2384  0E56                     __end_of___lwtoft:	
  2385                           
  2386                           	psect	text12
  2387  0206                     __ptext12:	
  2388 ;; *************** function ___fttol *****************
  2389 ;; Defined at:
  2390 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;  f1              3   36[BANK0 ] float 
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;  lval            4   45[BANK0 ] unsigned long 
  2395 ;;  exp1            1   49[BANK0 ] unsigned char 
  2396 ;;  sign1           1   44[BANK0 ] unsigned char 
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  4   36[BANK0 ] long 
  2399 ;; Registers used:
  2400 ;;		wreg, status,2, status,0
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2406 ;;      Params:         0       4       0       0       0
  2407 ;;      Locals:         0       6       0       0       0
  2408 ;;      Temps:          0       4       0       0       0
  2409 ;;      Totals:         0      14       0       0       0
  2410 ;;Total ram usage:       14 bytes
  2411 ;; Hardware stack levels used:    1
  2412 ;; Hardware stack levels required when called:    3
  2413 ;; This function calls:
  2414 ;;		Nothing
  2415 ;; This function is called by:
  2416 ;;		_setPosicaoAtual
  2417 ;;		_getPosicaoAtual
  2418 ;;		_setPosicaoDesejada
  2419 ;;		_main
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           
  2424                           ;psect for function ___fttol
  2425  0206                     ___fttol:	
  2426                           
  2427                           ;incstack = 0
  2428                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2429  0206  1283               	bcf	3,5	;RP0=0, select bank0
  2430  0207  1303               	bcf	3,6	;RP1=0, select bank0
  2431  0208  0844               	movf	___fttol@f1,w
  2432  0209  00C8               	movwf	??___fttol
  2433  020A  0845               	movf	___fttol@f1+1,w
  2434  020B  00C9               	movwf	??___fttol+1
  2435  020C  0846               	movf	___fttol@f1+2,w
  2436  020D  00CA               	movwf	??___fttol+2
  2437  020E  1003               	clrc
  2438  020F  0D49               	rlf	??___fttol+1,w
  2439  0210  0D4A               	rlf	??___fttol+2,w
  2440  0211  00CB               	movwf	??___fttol+3
  2441  0212  084B               	movf	??___fttol+3,w
  2442  0213  00D1               	movwf	___fttol@exp1
  2443  0214  0851               	movf	___fttol@exp1,w
  2444  0215  1D03               	btfss	3,2
  2445  0216  2A20               	goto	l1448
  2446  0217  3000               	movlw	0
  2447  0218  00C7               	movwf	?___fttol+3
  2448  0219  3000               	movlw	0
  2449  021A  00C6               	movwf	?___fttol+2
  2450  021B  3000               	movlw	0
  2451  021C  00C5               	movwf	?___fttol+1
  2452  021D  3000               	movlw	0
  2453  021E  00C4               	movwf	?___fttol
  2454  021F  0008               	return
  2455  0220                     l1448:	
  2456  0220  0844               	movf	___fttol@f1,w
  2457  0221  00C8               	movwf	??___fttol
  2458  0222  0845               	movf	___fttol@f1+1,w
  2459  0223  00C9               	movwf	??___fttol+1
  2460  0224  0846               	movf	___fttol@f1+2,w
  2461  0225  00CA               	movwf	??___fttol+2
  2462  0226  3017               	movlw	23
  2463  0227                     u1405:	
  2464  0227  1003               	clrc
  2465  0228  0CCA               	rrf	??___fttol+2,f
  2466  0229  0CC9               	rrf	??___fttol+1,f
  2467  022A  0CC8               	rrf	??___fttol,f
  2468  022B  3EFF               	addlw	-1
  2469  022C  1D03               	skipz
  2470  022D  2A27               	goto	u1405
  2471  022E  0848               	movf	??___fttol,w
  2472  022F  00CB               	movwf	??___fttol+3
  2473  0230  084B               	movf	??___fttol+3,w
  2474  0231  00CC               	movwf	___fttol@sign1
  2475  0232  17C5               	bsf	___fttol@f1+1,7
  2476  0233  30FF               	movlw	255
  2477  0234  05C4               	andwf	___fttol@f1,f
  2478  0235  30FF               	movlw	255
  2479  0236  05C5               	andwf	___fttol@f1+1,f
  2480  0237  3000               	movlw	0
  2481  0238  05C6               	andwf	___fttol@f1+2,f
  2482  0239  0844               	movf	___fttol@f1,w
  2483  023A  00CD               	movwf	___fttol@lval
  2484  023B  0845               	movf	___fttol@f1+1,w
  2485  023C  00CE               	movwf	___fttol@lval+1
  2486  023D  0846               	movf	___fttol@f1+2,w
  2487  023E  00CF               	movwf	___fttol@lval+2
  2488  023F  01D0               	clrf	___fttol@lval+3
  2489  0240  308E               	movlw	142
  2490  0241  02D1               	subwf	___fttol@exp1,f
  2491  0242  1FD1               	btfss	___fttol@exp1,7
  2492  0243  2A62               	goto	l1468
  2493  0244  0851               	movf	___fttol@exp1,w
  2494  0245  3A80               	xorlw	128
  2495  0246  3E8F               	addlw	143
  2496  0247  1803               	skipnc
  2497  0248  2A52               	goto	l1466
  2498  0249  3000               	movlw	0
  2499  024A  00C7               	movwf	?___fttol+3
  2500  024B  3000               	movlw	0
  2501  024C  00C6               	movwf	?___fttol+2
  2502  024D  3000               	movlw	0
  2503  024E  00C5               	movwf	?___fttol+1
  2504  024F  3000               	movlw	0
  2505  0250  00C4               	movwf	?___fttol
  2506  0251  0008               	return
  2507  0252                     l1466:	
  2508  0252  3001               	movlw	1
  2509  0253                     u1435:	
  2510  0253  1003               	clrc
  2511  0254  0CD0               	rrf	___fttol@lval+3,f
  2512  0255  0CCF               	rrf	___fttol@lval+2,f
  2513  0256  0CCE               	rrf	___fttol@lval+1,f
  2514  0257  0CCD               	rrf	___fttol@lval,f
  2515  0258  3EFF               	addlw	-1
  2516  0259  1D03               	skipz
  2517  025A  2A53               	goto	u1435
  2518  025B  3001               	movlw	1
  2519  025C  00C8               	movwf	??___fttol
  2520  025D  0848               	movf	??___fttol,w
  2521  025E  07D1               	addwf	___fttol@exp1,f
  2522  025F  1903               	btfsc	3,2
  2523  0260  2A7D               	goto	l1476
  2524  0261  2A52               	goto	l1466
  2525  0262                     l1468:	
  2526  0262  3018               	movlw	24
  2527  0263  0251               	subwf	___fttol@exp1,w
  2528  0264  1C03               	skipc
  2529  0265  2A7A               	goto	l600
  2530  0266  3000               	movlw	0
  2531  0267  00C7               	movwf	?___fttol+3
  2532  0268  3000               	movlw	0
  2533  0269  00C6               	movwf	?___fttol+2
  2534  026A  3000               	movlw	0
  2535  026B  00C5               	movwf	?___fttol+1
  2536  026C  3000               	movlw	0
  2537  026D  00C4               	movwf	?___fttol
  2538  026E  0008               	return
  2539  026F                     l1474:	
  2540  026F  3001               	movlw	1
  2541  0270  00C8               	movwf	??___fttol
  2542  0271                     u1465:	
  2543  0271  1003               	clrc
  2544  0272  0DCD               	rlf	___fttol@lval,f
  2545  0273  0DCE               	rlf	___fttol@lval+1,f
  2546  0274  0DCF               	rlf	___fttol@lval+2,f
  2547  0275  0DD0               	rlf	___fttol@lval+3,f
  2548  0276  0BC8               	decfsz	??___fttol,f
  2549  0277  2A71               	goto	u1465
  2550  0278  3001               	movlw	1
  2551  0279  02D1               	subwf	___fttol@exp1,f
  2552  027A                     l600:	
  2553  027A  0851               	movf	___fttol@exp1,w
  2554  027B  1D03               	btfss	3,2
  2555  027C  2A6F               	goto	l1474
  2556  027D                     l1476:	
  2557  027D  084C               	movf	___fttol@sign1,w
  2558  027E  1903               	btfsc	3,2
  2559  027F  2A8B               	goto	l1480
  2560  0280  09CD               	comf	___fttol@lval,f
  2561  0281  09CE               	comf	___fttol@lval+1,f
  2562  0282  09CF               	comf	___fttol@lval+2,f
  2563  0283  09D0               	comf	___fttol@lval+3,f
  2564  0284  0ACD               	incf	___fttol@lval,f
  2565  0285  1903               	skipnz
  2566  0286  0ACE               	incf	___fttol@lval+1,f
  2567  0287  1903               	skipnz
  2568  0288  0ACF               	incf	___fttol@lval+2,f
  2569  0289  1903               	skipnz
  2570  028A  0AD0               	incf	___fttol@lval+3,f
  2571  028B                     l1480:	
  2572  028B  0850               	movf	___fttol@lval+3,w
  2573  028C  00C7               	movwf	?___fttol+3
  2574  028D  084F               	movf	___fttol@lval+2,w
  2575  028E  00C6               	movwf	?___fttol+2
  2576  028F  084E               	movf	___fttol@lval+1,w
  2577  0290  00C5               	movwf	?___fttol+1
  2578  0291  084D               	movf	___fttol@lval,w
  2579  0292  00C4               	movwf	?___fttol
  2580  0293  0008               	return
  2581  0294                     __end_of___fttol:	
  2582                           
  2583                           	psect	text13
  2584  040F                     __ptext13:	
  2585 ;; *************** function ___ftmul *****************
  2586 ;; Defined at:
  2587 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;  f1              3   20[BANK0 ] float 
  2590 ;;  f2              3   23[BANK0 ] float 
  2591 ;; Auto vars:     Size  Location     Type
  2592 ;;  f3_as_produc    3   31[BANK0 ] unsigned um
  2593 ;;  sign            1   35[BANK0 ] unsigned char 
  2594 ;;  cntr            1   34[BANK0 ] unsigned char 
  2595 ;;  exp             1   30[BANK0 ] unsigned char 
  2596 ;; Return value:  Size  Location     Type
  2597 ;;                  3   20[BANK0 ] float 
  2598 ;; Registers used:
  2599 ;;		wreg, status,2, status,0, pclath, cstack
  2600 ;; Tracked objects:
  2601 ;;		On entry : 0/0
  2602 ;;		On exit  : 0/0
  2603 ;;		Unchanged: 0/0
  2604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2605 ;;      Params:         0       6       0       0       0
  2606 ;;      Locals:         0       6       0       0       0
  2607 ;;      Temps:          0       4       0       0       0
  2608 ;;      Totals:         0      16       0       0       0
  2609 ;;Total ram usage:       16 bytes
  2610 ;; Hardware stack levels used:    1
  2611 ;; Hardware stack levels required when called:    4
  2612 ;; This function calls:
  2613 ;;		___ftpack
  2614 ;; This function is called by:
  2615 ;;		_getPosicaoAtual
  2616 ;;		_main
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           
  2621                           ;psect for function ___ftmul
  2622  040F                     ___ftmul:	
  2623                           
  2624                           ;incstack = 0
  2625                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  2626  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2627  0410  1303               	bcf	3,6	;RP1=0, select bank0
  2628  0411  0834               	movf	___ftmul@f1,w
  2629  0412  00BA               	movwf	??___ftmul
  2630  0413  0835               	movf	___ftmul@f1+1,w
  2631  0414  00BB               	movwf	??___ftmul+1
  2632  0415  0836               	movf	___ftmul@f1+2,w
  2633  0416  00BC               	movwf	??___ftmul+2
  2634  0417  1003               	clrc
  2635  0418  0D3B               	rlf	??___ftmul+1,w
  2636  0419  0D3C               	rlf	??___ftmul+2,w
  2637  041A  00BD               	movwf	??___ftmul+3
  2638  041B  083D               	movf	??___ftmul+3,w
  2639  041C  00BE               	movwf	___ftmul@exp
  2640  041D  083E               	movf	___ftmul@exp,w
  2641  041E  1D03               	btfss	3,2
  2642  041F  2C27               	goto	l1610
  2643  0420  3000               	movlw	0
  2644  0421  00B4               	movwf	?___ftmul
  2645  0422  3000               	movlw	0
  2646  0423  00B5               	movwf	?___ftmul+1
  2647  0424  3000               	movlw	0
  2648  0425  00B6               	movwf	?___ftmul+2
  2649  0426  0008               	return
  2650  0427                     l1610:	
  2651  0427  0837               	movf	___ftmul@f2,w
  2652  0428  00BA               	movwf	??___ftmul
  2653  0429  0838               	movf	___ftmul@f2+1,w
  2654  042A  00BB               	movwf	??___ftmul+1
  2655  042B  0839               	movf	___ftmul@f2+2,w
  2656  042C  00BC               	movwf	??___ftmul+2
  2657  042D  1003               	clrc
  2658  042E  0D3B               	rlf	??___ftmul+1,w
  2659  042F  0D3C               	rlf	??___ftmul+2,w
  2660  0430  00BD               	movwf	??___ftmul+3
  2661  0431  083D               	movf	??___ftmul+3,w
  2662  0432  00C3               	movwf	___ftmul@sign
  2663  0433  0843               	movf	___ftmul@sign,w
  2664  0434  1D03               	btfss	3,2
  2665  0435  2C3D               	goto	l1616
  2666  0436  3000               	movlw	0
  2667  0437  00B4               	movwf	?___ftmul
  2668  0438  3000               	movlw	0
  2669  0439  00B5               	movwf	?___ftmul+1
  2670  043A  3000               	movlw	0
  2671  043B  00B6               	movwf	?___ftmul+2
  2672  043C  0008               	return
  2673  043D                     l1616:	
  2674  043D  0843               	movf	___ftmul@sign,w
  2675  043E  3E7B               	addlw	123
  2676  043F  00BA               	movwf	??___ftmul
  2677  0440  083A               	movf	??___ftmul,w
  2678  0441  07BE               	addwf	___ftmul@exp,f
  2679  0442  0834               	movf	___ftmul@f1,w
  2680  0443  00BA               	movwf	??___ftmul
  2681  0444  0835               	movf	___ftmul@f1+1,w
  2682  0445  00BB               	movwf	??___ftmul+1
  2683  0446  0836               	movf	___ftmul@f1+2,w
  2684  0447  00BC               	movwf	??___ftmul+2
  2685  0448  3010               	movlw	16
  2686  0449                     u1675:	
  2687  0449  1003               	clrc
  2688  044A  0CBC               	rrf	??___ftmul+2,f
  2689  044B  0CBB               	rrf	??___ftmul+1,f
  2690  044C  0CBA               	rrf	??___ftmul,f
  2691  044D  3EFF               	addlw	-1
  2692  044E  1D03               	skipz
  2693  044F  2C49               	goto	u1675
  2694  0450  083A               	movf	??___ftmul,w
  2695  0451  00BD               	movwf	??___ftmul+3
  2696  0452  083D               	movf	??___ftmul+3,w
  2697  0453  00C3               	movwf	___ftmul@sign
  2698  0454  0837               	movf	___ftmul@f2,w
  2699  0455  00BA               	movwf	??___ftmul
  2700  0456  0838               	movf	___ftmul@f2+1,w
  2701  0457  00BB               	movwf	??___ftmul+1
  2702  0458  0839               	movf	___ftmul@f2+2,w
  2703  0459  00BC               	movwf	??___ftmul+2
  2704  045A  3010               	movlw	16
  2705  045B                     u1685:	
  2706  045B  1003               	clrc
  2707  045C  0CBC               	rrf	??___ftmul+2,f
  2708  045D  0CBB               	rrf	??___ftmul+1,f
  2709  045E  0CBA               	rrf	??___ftmul,f
  2710  045F  3EFF               	addlw	-1
  2711  0460  1D03               	skipz
  2712  0461  2C5B               	goto	u1685
  2713  0462  083A               	movf	??___ftmul,w
  2714  0463  00BD               	movwf	??___ftmul+3
  2715  0464  083D               	movf	??___ftmul+3,w
  2716  0465  06C3               	xorwf	___ftmul@sign,f
  2717  0466  3080               	movlw	128
  2718  0467  00BA               	movwf	??___ftmul
  2719  0468  083A               	movf	??___ftmul,w
  2720  0469  05C3               	andwf	___ftmul@sign,f
  2721  046A  17B5               	bsf	___ftmul@f1+1,7
  2722  046B  17B8               	bsf	___ftmul@f2+1,7
  2723  046C  30FF               	movlw	255
  2724  046D  05B7               	andwf	___ftmul@f2,f
  2725  046E  30FF               	movlw	255
  2726  046F  05B8               	andwf	___ftmul@f2+1,f
  2727  0470  3000               	movlw	0
  2728  0471  05B9               	andwf	___ftmul@f2+2,f
  2729  0472  3000               	movlw	0
  2730  0473  00BF               	movwf	___ftmul@f3_as_product
  2731  0474  3000               	movlw	0
  2732  0475  00C0               	movwf	___ftmul@f3_as_product+1
  2733  0476  3000               	movlw	0
  2734  0477  00C1               	movwf	___ftmul@f3_as_product+2
  2735  0478  3007               	movlw	7
  2736  0479  00BA               	movwf	??___ftmul
  2737  047A  083A               	movf	??___ftmul,w
  2738  047B  00C2               	movwf	___ftmul@cntr
  2739  047C                     l1628:	
  2740  047C  1C34               	btfss	___ftmul@f1,0
  2741  047D  2C8C               	goto	l1632
  2742  047E  0837               	movf	___ftmul@f2,w
  2743  047F  07BF               	addwf	___ftmul@f3_as_product,f
  2744  0480  0838               	movf	___ftmul@f2+1,w
  2745  0481  1103               	clrz
  2746  0482  1803               	skipnc
  2747  0483  0A38               	incf	___ftmul@f2+1,w
  2748  0484  1D03               	btfss	3,2
  2749  0485  07C0               	addwf	___ftmul@f3_as_product+1,f
  2750  0486  0839               	movf	___ftmul@f2+2,w
  2751  0487  1103               	clrz
  2752  0488  1803               	skipnc
  2753  0489  0A39               	incf	___ftmul@f2+2,w
  2754  048A  1D03               	btfss	3,2
  2755  048B  07C1               	addwf	___ftmul@f3_as_product+2,f
  2756  048C                     l1632:	
  2757  048C  3001               	movlw	1
  2758  048D                     u1715:	
  2759  048D  1003               	clrc
  2760  048E  0CB6               	rrf	___ftmul@f1+2,f
  2761  048F  0CB5               	rrf	___ftmul@f1+1,f
  2762  0490  0CB4               	rrf	___ftmul@f1,f
  2763  0491  3EFF               	addlw	-1
  2764  0492  1D03               	skipz
  2765  0493  2C8D               	goto	u1715
  2766  0494  3001               	movlw	1
  2767  0495                     u1725:	
  2768  0495  1003               	clrc
  2769  0496  0DB7               	rlf	___ftmul@f2,f
  2770  0497  0DB8               	rlf	___ftmul@f2+1,f
  2771  0498  0DB9               	rlf	___ftmul@f2+2,f
  2772  0499  3EFF               	addlw	-1
  2773  049A  1D03               	skipz
  2774  049B  2C95               	goto	u1725
  2775  049C  3001               	movlw	1
  2776  049D  02C2               	subwf	___ftmul@cntr,f
  2777  049E  1D03               	btfss	3,2
  2778  049F  2C7C               	goto	l1628
  2779  04A0  3009               	movlw	9
  2780  04A1  00BA               	movwf	??___ftmul
  2781  04A2  083A               	movf	??___ftmul,w
  2782  04A3  00C2               	movwf	___ftmul@cntr
  2783  04A4                     l1640:	
  2784  04A4  1C34               	btfss	___ftmul@f1,0
  2785  04A5  2CB4               	goto	l1644
  2786  04A6  0837               	movf	___ftmul@f2,w
  2787  04A7  07BF               	addwf	___ftmul@f3_as_product,f
  2788  04A8  0838               	movf	___ftmul@f2+1,w
  2789  04A9  1103               	clrz
  2790  04AA  1803               	skipnc
  2791  04AB  0A38               	incf	___ftmul@f2+1,w
  2792  04AC  1D03               	btfss	3,2
  2793  04AD  07C0               	addwf	___ftmul@f3_as_product+1,f
  2794  04AE  0839               	movf	___ftmul@f2+2,w
  2795  04AF  1103               	clrz
  2796  04B0  1803               	skipnc
  2797  04B1  0A39               	incf	___ftmul@f2+2,w
  2798  04B2  1D03               	btfss	3,2
  2799  04B3  07C1               	addwf	___ftmul@f3_as_product+2,f
  2800  04B4                     l1644:	
  2801  04B4  3001               	movlw	1
  2802  04B5                     u1765:	
  2803  04B5  1003               	clrc
  2804  04B6  0CB6               	rrf	___ftmul@f1+2,f
  2805  04B7  0CB5               	rrf	___ftmul@f1+1,f
  2806  04B8  0CB4               	rrf	___ftmul@f1,f
  2807  04B9  3EFF               	addlw	-1
  2808  04BA  1D03               	skipz
  2809  04BB  2CB5               	goto	u1765
  2810  04BC  3001               	movlw	1
  2811  04BD                     u1775:	
  2812  04BD  1003               	clrc
  2813  04BE  0CC1               	rrf	___ftmul@f3_as_product+2,f
  2814  04BF  0CC0               	rrf	___ftmul@f3_as_product+1,f
  2815  04C0  0CBF               	rrf	___ftmul@f3_as_product,f
  2816  04C1  3EFF               	addlw	-1
  2817  04C2  1D03               	skipz
  2818  04C3  2CBD               	goto	u1775
  2819  04C4  3001               	movlw	1
  2820  04C5  02C2               	subwf	___ftmul@cntr,f
  2821  04C6  1D03               	btfss	3,2
  2822  04C7  2CA4               	goto	l1640
  2823  04C8  083F               	movf	___ftmul@f3_as_product,w
  2824  04C9  00A8               	movwf	___ftpack@arg
  2825  04CA  0840               	movf	___ftmul@f3_as_product+1,w
  2826  04CB  00A9               	movwf	___ftpack@arg+1
  2827  04CC  0841               	movf	___ftmul@f3_as_product+2,w
  2828  04CD  00AA               	movwf	___ftpack@arg+2
  2829  04CE  083E               	movf	___ftmul@exp,w
  2830  04CF  00BA               	movwf	??___ftmul
  2831  04D0  083A               	movf	??___ftmul,w
  2832  04D1  00AB               	movwf	___ftpack@exp
  2833  04D2  0843               	movf	___ftmul@sign,w
  2834  04D3  00BB               	movwf	??___ftmul+1
  2835  04D4  083B               	movf	??___ftmul+1,w
  2836  04D5  00AC               	movwf	___ftpack@sign
  2837  04D6  120A  118A  2198   	fcall	___ftpack
  2838  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  2839  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  2840  04DB  0828               	movf	?___ftpack,w
  2841  04DC  00B4               	movwf	?___ftmul
  2842  04DD  0829               	movf	?___ftpack+1,w
  2843  04DE  00B5               	movwf	?___ftmul+1
  2844  04DF  082A               	movf	?___ftpack+2,w
  2845  04E0  00B6               	movwf	?___ftmul+2
  2846  04E1  0008               	return
  2847  04E2                     __end_of___ftmul:	
  2848                           
  2849                           	psect	text14
  2850  0198                     __ptext14:	
  2851 ;; *************** function ___ftpack *****************
  2852 ;; Defined at:
  2853 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;  arg             3    8[BANK0 ] unsigned um
  2856 ;;  exp             1   11[BANK0 ] unsigned char 
  2857 ;;  sign            1   12[BANK0 ] unsigned char 
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;		None
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  3    8[BANK0 ] float 
  2862 ;; Registers used:
  2863 ;;		wreg, status,2, status,0
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2869 ;;      Params:         0       5       0       0       0
  2870 ;;      Locals:         0       0       0       0       0
  2871 ;;      Temps:          0       3       0       0       0
  2872 ;;      Totals:         0       8       0       0       0
  2873 ;;Total ram usage:        8 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; Hardware stack levels required when called:    3
  2876 ;; This function calls:
  2877 ;;		Nothing
  2878 ;; This function is called by:
  2879 ;;		___ftdiv
  2880 ;;		___ftmul
  2881 ;;		___lwtoft
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           
  2886                           ;psect for function ___ftpack
  2887  0198                     ___ftpack:	
  2888                           
  2889                           ;incstack = 0
  2890                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2891  0198  1283               	bcf	3,5	;RP0=0, select bank0
  2892  0199  1303               	bcf	3,6	;RP1=0, select bank0
  2893  019A  082B               	movf	___ftpack@exp,w
  2894  019B  1903               	btfsc	3,2
  2895  019C  29A2               	goto	l1362
  2896  019D  082A               	movf	___ftpack@arg+2,w
  2897  019E  0429               	iorwf	___ftpack@arg+1,w
  2898  019F  0428               	iorwf	___ftpack@arg,w
  2899  01A0  1D03               	skipz
  2900  01A1  29B5               	goto	l1368
  2901  01A2                     l1362:	
  2902  01A2  3000               	movlw	0
  2903  01A3  00A8               	movwf	?___ftpack
  2904  01A4  3000               	movlw	0
  2905  01A5  00A9               	movwf	?___ftpack+1
  2906  01A6  3000               	movlw	0
  2907  01A7  00AA               	movwf	?___ftpack+2
  2908  01A8  0008               	return
  2909  01A9                     l1366:	
  2910  01A9  3001               	movlw	1
  2911  01AA  00AD               	movwf	??___ftpack
  2912  01AB  082D               	movf	??___ftpack,w
  2913  01AC  07AB               	addwf	___ftpack@exp,f
  2914  01AD  3001               	movlw	1
  2915  01AE                     u1195:	
  2916  01AE  1003               	clrc
  2917  01AF  0CAA               	rrf	___ftpack@arg+2,f
  2918  01B0  0CA9               	rrf	___ftpack@arg+1,f
  2919  01B1  0CA8               	rrf	___ftpack@arg,f
  2920  01B2  3EFF               	addlw	-1
  2921  01B3  1D03               	skipz
  2922  01B4  29AE               	goto	u1195
  2923  01B5                     l1368:	
  2924  01B5  30FE               	movlw	254
  2925  01B6  052A               	andwf	___ftpack@arg+2,w
  2926  01B7  1903               	btfsc	3,2
  2927  01B8  29D0               	goto	l509
  2928  01B9  29A9               	goto	l1366
  2929  01BA                     l1370:	
  2930  01BA  3001               	movlw	1
  2931  01BB  00AD               	movwf	??___ftpack
  2932  01BC  082D               	movf	??___ftpack,w
  2933  01BD  07AB               	addwf	___ftpack@exp,f
  2934  01BE  3001               	movlw	1
  2935  01BF  07A8               	addwf	___ftpack@arg,f
  2936  01C0  3000               	movlw	0
  2937  01C1  1803               	skipnc
  2938  01C2  3001               	movlw	1
  2939  01C3  07A9               	addwf	___ftpack@arg+1,f
  2940  01C4  3000               	movlw	0
  2941  01C5  1803               	skipnc
  2942  01C6  3001               	movlw	1
  2943  01C7  07AA               	addwf	___ftpack@arg+2,f
  2944  01C8  3001               	movlw	1
  2945  01C9                     u1215:	
  2946  01C9  1003               	clrc
  2947  01CA  0CAA               	rrf	___ftpack@arg+2,f
  2948  01CB  0CA9               	rrf	___ftpack@arg+1,f
  2949  01CC  0CA8               	rrf	___ftpack@arg,f
  2950  01CD  3EFF               	addlw	-1
  2951  01CE  1D03               	skipz
  2952  01CF  29C9               	goto	u1215
  2953  01D0                     l509:	
  2954  01D0  30FF               	movlw	255
  2955  01D1  052A               	andwf	___ftpack@arg+2,w
  2956  01D2  1903               	btfsc	3,2
  2957  01D3  29DF               	goto	l1378
  2958  01D4  29BA               	goto	l1370
  2959  01D5                     l1376:	
  2960  01D5  3001               	movlw	1
  2961  01D6  02AB               	subwf	___ftpack@exp,f
  2962  01D7  3001               	movlw	1
  2963  01D8                     u1235:	
  2964  01D8  1003               	clrc
  2965  01D9  0DA8               	rlf	___ftpack@arg,f
  2966  01DA  0DA9               	rlf	___ftpack@arg+1,f
  2967  01DB  0DAA               	rlf	___ftpack@arg+2,f
  2968  01DC  3EFF               	addlw	-1
  2969  01DD  1D03               	skipz
  2970  01DE  29D8               	goto	u1235
  2971  01DF                     l1378:	
  2972  01DF  1BA9               	btfsc	___ftpack@arg+1,7
  2973  01E0  29E5               	goto	l516
  2974  01E1  3002               	movlw	2
  2975  01E2  022B               	subwf	___ftpack@exp,w
  2976  01E3  1803               	skipnc
  2977  01E4  29D5               	goto	l1376
  2978  01E5                     l516:	
  2979  01E5  182B               	btfsc	___ftpack@exp,0
  2980  01E6  29ED               	goto	l517
  2981  01E7  30FF               	movlw	255
  2982  01E8  05A8               	andwf	___ftpack@arg,f
  2983  01E9  307F               	movlw	127
  2984  01EA  05A9               	andwf	___ftpack@arg+1,f
  2985  01EB  30FF               	movlw	255
  2986  01EC  05AA               	andwf	___ftpack@arg+2,f
  2987  01ED                     l517:	
  2988  01ED  1003               	clrc
  2989  01EE  0CAB               	rrf	___ftpack@exp,f
  2990  01EF  082B               	movf	___ftpack@exp,w
  2991  01F0  00AD               	movwf	??___ftpack
  2992  01F1  01AE               	clrf	??___ftpack+1
  2993  01F2  01AF               	clrf	??___ftpack+2
  2994  01F3  3010               	movlw	16
  2995  01F4                     u1275:	
  2996  01F4  1003               	clrc
  2997  01F5  0DAD               	rlf	??___ftpack,f
  2998  01F6  0DAE               	rlf	??___ftpack+1,f
  2999  01F7  0DAF               	rlf	??___ftpack+2,f
  3000  01F8  3EFF               	addlw	-1
  3001  01F9  1D03               	skipz
  3002  01FA  29F4               	goto	u1275
  3003  01FB  082D               	movf	??___ftpack,w
  3004  01FC  04A8               	iorwf	___ftpack@arg,f
  3005  01FD  082E               	movf	??___ftpack+1,w
  3006  01FE  04A9               	iorwf	___ftpack@arg+1,f
  3007  01FF  082F               	movf	??___ftpack+2,w
  3008  0200  04AA               	iorwf	___ftpack@arg+2,f
  3009  0201  082C               	movf	___ftpack@sign,w
  3010  0202  1903               	btfsc	3,2
  3011  0203  0008               	return
  3012  0204  17AA               	bsf	___ftpack@arg+2,7
  3013  0205  0008               	return
  3014  0206                     __end_of___ftpack:	
  3015                           
  3016                           	psect	text15
  3017  0019                     __ptext15:	
  3018 ;; *************** function _calculaVelocidade *****************
  3019 ;; Defined at:
  3020 ;;		line 46 in file "C:\Users\Aluno\Desktop\stepper_motor-pic16f887\stepper_motor\stepper.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;		None
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;		None
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  1    wreg      void 
  3027 ;; Registers used:
  3028 ;;		wreg, status,2, status,0, pclath, cstack
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3034 ;;      Params:         0       0       0       0       0
  3035 ;;      Locals:         0       2       0       0       0
  3036 ;;      Temps:          0       2       0       0       0
  3037 ;;      Totals:         0       4       0       0       0
  3038 ;;Total ram usage:        4 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    4
  3041 ;; This function calls:
  3042 ;;		___awdiv
  3043 ;;		___wmul
  3044 ;; This function is called by:
  3045 ;;		_main
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           
  3050                           ;psect for function _calculaVelocidade
  3051  0019                     _calculaVelocidade:	
  3052                           
  3053                           ;stepper.c: 47: speed = (error == 0) ? 0 : (4314/PR2)*100/81;
  3054                           
  3055                           ;incstack = 0
  3056                           ; Regs used in _calculaVelocidade: [wreg+status,2+status,0+pclath+cstack]
  3057  0019  1283               	bcf	3,5	;RP0=0, select bank0
  3058  001A  1303               	bcf	3,6	;RP1=0, select bank0
  3059  001B  085A               	movf	_error,w
  3060  001C  045B               	iorwf	_error+1,w
  3061  001D  1903               	btfsc	3,2
  3062  001E  2860               	goto	l1972
  3063  001F  1683               	bsf	3,5	;RP0=1, select bank1
  3064  0020  1303               	bcf	3,6	;RP1=0, select bank1
  3065  0021  0812               	movf	18,w	;volatile
  3066  0022  1283               	bcf	3,5	;RP0=0, select bank0
  3067  0023  1303               	bcf	3,6	;RP1=0, select bank0
  3068  0024  00B7               	movwf	??_calculaVelocidade
  3069  0025  01B8               	clrf	??_calculaVelocidade+1
  3070  0026  0837               	movf	??_calculaVelocidade,w
  3071  0027  00A8               	movwf	___awdiv@divisor
  3072  0028  0838               	movf	??_calculaVelocidade+1,w
  3073  0029  00A9               	movwf	___awdiv@divisor+1
  3074  002A  30DA               	movlw	218
  3075  002B  00AA               	movwf	___awdiv@dividend
  3076  002C  3010               	movlw	16
  3077  002D  00AB               	movwf	___awdiv@dividend+1
  3078  002E  120A  118A  2065  120A  118A  	fcall	___awdiv
  3079  0033  1283               	bcf	3,5	;RP0=0, select bank0
  3080  0034  1303               	bcf	3,6	;RP1=0, select bank0
  3081  0035  0829               	movf	?___awdiv+1,w
  3082  0036  00B2               	movwf	___wmul@multiplier+1
  3083  0037  0828               	movf	?___awdiv,w
  3084  0038  00B1               	movwf	___wmul@multiplier
  3085  0039  3064               	movlw	100
  3086  003A  00B3               	movwf	___wmul@multiplicand
  3087  003B  3000               	movlw	0
  3088  003C  00B4               	movwf	___wmul@multiplicand+1
  3089  003D  120A  158A  2672  120A  118A  	fcall	___wmul
  3090  0042  1283               	bcf	3,5	;RP0=0, select bank0
  3091  0043  1303               	bcf	3,6	;RP1=0, select bank0
  3092  0044  0832               	movf	?___wmul+1,w
  3093  0045  00BA               	movwf	_calculaVelocidade$785+1
  3094  0046  0831               	movf	?___wmul,w
  3095  0047  00B9               	movwf	_calculaVelocidade$785
  3096  0048  3051               	movlw	81
  3097  0049  00A8               	movwf	___awdiv@divisor
  3098  004A  3000               	movlw	0
  3099  004B  00A9               	movwf	___awdiv@divisor+1
  3100  004C  083A               	movf	_calculaVelocidade$785+1,w
  3101  004D  00AB               	movwf	___awdiv@dividend+1
  3102  004E  0839               	movf	_calculaVelocidade$785,w
  3103  004F  00AA               	movwf	___awdiv@dividend
  3104  0050  120A  118A  2065   	fcall	___awdiv
  3105  0053  1283               	bcf	3,5	;RP0=0, select bank0
  3106  0054  1303               	bcf	3,6	;RP1=0, select bank0
  3107  0055  0829               	movf	?___awdiv+1,w
  3108  0056  1683               	bsf	3,5	;RP0=1, select bank1
  3109  0057  1303               	bcf	3,6	;RP1=0, select bank1
  3110  0058  00A9               	movwf	(_speed+1)^(0+128)
  3111  0059  1283               	bcf	3,5	;RP0=0, select bank0
  3112  005A  1303               	bcf	3,6	;RP1=0, select bank0
  3113  005B  0828               	movf	?___awdiv,w
  3114  005C  1683               	bsf	3,5	;RP0=1, select bank1
  3115  005D  1303               	bcf	3,6	;RP1=0, select bank1
  3116  005E  00A8               	movwf	_speed^(0+128)
  3117  005F  0008               	return
  3118  0060                     l1972:	
  3119  0060  1683               	bsf	3,5	;RP0=1, select bank1
  3120  0061  1303               	bcf	3,6	;RP1=0, select bank1
  3121  0062  01A8               	clrf	_speed^(0+128)
  3122  0063  01A9               	clrf	(_speed+1)^(0+128)
  3123  0064  0008               	return
  3124  0065                     __end_of_calculaVelocidade:	
  3125                           
  3126                           	psect	text16
  3127  0E72                     __ptext16:	
  3128 ;; *************** function ___wmul *****************
  3129 ;; Defined at:
  3130 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;  multiplier      2   17[BANK0 ] unsigned int 
  3133 ;;  multiplicand    2   19[BANK0 ] unsigned int 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  product         2   21[BANK0 ] unsigned int 
  3136 ;; Return value:  Size  Location     Type
  3137 ;;                  2   17[BANK0 ] unsigned int 
  3138 ;; Registers used:
  3139 ;;		wreg, status,2, status,0
  3140 ;; Tracked objects:
  3141 ;;		On entry : 0/0
  3142 ;;		On exit  : 0/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3145 ;;      Params:         0       4       0       0       0
  3146 ;;      Locals:         0       2       0       0       0
  3147 ;;      Temps:          0       0       0       0       0
  3148 ;;      Totals:         0       6       0       0       0
  3149 ;;Total ram usage:        6 bytes
  3150 ;; Hardware stack levels used:    1
  3151 ;; Hardware stack levels required when called:    3
  3152 ;; This function calls:
  3153 ;;		Nothing
  3154 ;; This function is called by:
  3155 ;;		_calculaVelocidade
  3156 ;;		_int2char
  3157 ;; This function uses a non-reentrant model
  3158 ;;
  3159                           
  3160                           
  3161                           ;psect for function ___wmul
  3162  0E72                     ___wmul:	
  3163                           
  3164                           ;incstack = 0
  3165                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3166  0E72  1283               	bcf	3,5	;RP0=0, select bank0
  3167  0E73  1303               	bcf	3,6	;RP1=0, select bank0
  3168  0E74  01B5               	clrf	___wmul@product
  3169  0E75  01B6               	clrf	___wmul@product+1
  3170  0E76                     l1930:	
  3171  0E76  1C31               	btfss	___wmul@multiplier,0
  3172  0E77  2E7E               	goto	l344
  3173  0E78  0833               	movf	___wmul@multiplicand,w
  3174  0E79  07B5               	addwf	___wmul@product,f
  3175  0E7A  1803               	skipnc
  3176  0E7B  0AB6               	incf	___wmul@product+1,f
  3177  0E7C  0834               	movf	___wmul@multiplicand+1,w
  3178  0E7D  07B6               	addwf	___wmul@product+1,f
  3179  0E7E                     l344:	
  3180  0E7E  3001               	movlw	1
  3181  0E7F                     u2205:	
  3182  0E7F  1003               	clrc
  3183  0E80  0DB3               	rlf	___wmul@multiplicand,f
  3184  0E81  0DB4               	rlf	___wmul@multiplicand+1,f
  3185  0E82  3EFF               	addlw	-1
  3186  0E83  1D03               	skipz
  3187  0E84  2E7F               	goto	u2205
  3188  0E85  3001               	movlw	1
  3189  0E86                     u2215:	
  3190  0E86  1003               	clrc
  3191  0E87  0CB2               	rrf	___wmul@multiplier+1,f
  3192  0E88  0CB1               	rrf	___wmul@multiplier,f
  3193  0E89  3EFF               	addlw	-1
  3194  0E8A  1D03               	skipz
  3195  0E8B  2E86               	goto	u2215
  3196  0E8C  0831               	movf	___wmul@multiplier,w
  3197  0E8D  0432               	iorwf	___wmul@multiplier+1,w
  3198  0E8E  1D03               	btfss	3,2
  3199  0E8F  2E76               	goto	l1930
  3200  0E90  0836               	movf	___wmul@product+1,w
  3201  0E91  00B2               	movwf	?___wmul+1
  3202  0E92  0835               	movf	___wmul@product,w
  3203  0E93  00B1               	movwf	?___wmul
  3204  0E94  0008               	return
  3205  0E95                     __end_of___wmul:	
  3206                           
  3207                           	psect	text17
  3208  0065                     __ptext17:	
  3209 ;; *************** function ___awdiv *****************
  3210 ;; Defined at:
  3211 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;  divisor         2    8[BANK0 ] int 
  3214 ;;  dividend        2   10[BANK0 ] int 
  3215 ;; Auto vars:     Size  Location     Type
  3216 ;;  quotient        2   15[BANK0 ] int 
  3217 ;;  sign            1   14[BANK0 ] unsigned char 
  3218 ;;  counter         1   13[BANK0 ] unsigned char 
  3219 ;; Return value:  Size  Location     Type
  3220 ;;                  2    8[BANK0 ] int 
  3221 ;; Registers used:
  3222 ;;		wreg, status,2, status,0
  3223 ;; Tracked objects:
  3224 ;;		On entry : 0/0
  3225 ;;		On exit  : 0/0
  3226 ;;		Unchanged: 0/0
  3227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3228 ;;      Params:         0       4       0       0       0
  3229 ;;      Locals:         0       4       0       0       0
  3230 ;;      Temps:          0       1       0       0       0
  3231 ;;      Totals:         0       9       0       0       0
  3232 ;;Total ram usage:        9 bytes
  3233 ;; Hardware stack levels used:    1
  3234 ;; Hardware stack levels required when called:    3
  3235 ;; This function calls:
  3236 ;;		Nothing
  3237 ;; This function is called by:
  3238 ;;		_calculaVelocidade
  3239 ;; This function uses a non-reentrant model
  3240 ;;
  3241                           
  3242                           
  3243                           ;psect for function ___awdiv
  3244  0065                     ___awdiv:	
  3245                           
  3246                           ;incstack = 0
  3247                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3248  0065  1283               	bcf	3,5	;RP0=0, select bank0
  3249  0066  1303               	bcf	3,6	;RP1=0, select bank0
  3250  0067  01AE               	clrf	___awdiv@sign
  3251  0068  1FA9               	btfss	___awdiv@divisor+1,7
  3252  0069  2871               	goto	l1568
  3253  006A  09A8               	comf	___awdiv@divisor,f
  3254  006B  09A9               	comf	___awdiv@divisor+1,f
  3255  006C  0AA8               	incf	___awdiv@divisor,f
  3256  006D  1903               	skipnz
  3257  006E  0AA9               	incf	___awdiv@divisor+1,f
  3258  006F  01AE               	clrf	___awdiv@sign
  3259  0070  0AAE               	incf	___awdiv@sign,f
  3260  0071                     l1568:	
  3261  0071  1FAB               	btfss	___awdiv@dividend+1,7
  3262  0072  287C               	goto	l1574
  3263  0073  09AA               	comf	___awdiv@dividend,f
  3264  0074  09AB               	comf	___awdiv@dividend+1,f
  3265  0075  0AAA               	incf	___awdiv@dividend,f
  3266  0076  1903               	skipnz
  3267  0077  0AAB               	incf	___awdiv@dividend+1,f
  3268  0078  3001               	movlw	1
  3269  0079  00AC               	movwf	??___awdiv
  3270  007A  082C               	movf	??___awdiv,w
  3271  007B  06AE               	xorwf	___awdiv@sign,f
  3272  007C                     l1574:	
  3273  007C  01AF               	clrf	___awdiv@quotient
  3274  007D  01B0               	clrf	___awdiv@quotient+1
  3275  007E  0828               	movf	___awdiv@divisor,w
  3276  007F  0429               	iorwf	___awdiv@divisor+1,w
  3277  0080  1903               	btfsc	3,2
  3278  0081  28B3               	goto	l1596
  3279  0082  01AD               	clrf	___awdiv@counter
  3280  0083  0AAD               	incf	___awdiv@counter,f
  3281  0084                     l1584:	
  3282  0084  1BA9               	btfsc	___awdiv@divisor+1,7
  3283  0085  2892               	goto	l1586
  3284  0086  3001               	movlw	1
  3285  0087                     u1585:	
  3286  0087  1003               	clrc
  3287  0088  0DA8               	rlf	___awdiv@divisor,f
  3288  0089  0DA9               	rlf	___awdiv@divisor+1,f
  3289  008A  3EFF               	addlw	-1
  3290  008B  1D03               	skipz
  3291  008C  2887               	goto	u1585
  3292  008D  3001               	movlw	1
  3293  008E  00AC               	movwf	??___awdiv
  3294  008F  082C               	movf	??___awdiv,w
  3295  0090  07AD               	addwf	___awdiv@counter,f
  3296  0091  2884               	goto	l1584
  3297  0092                     l1586:	
  3298  0092  3001               	movlw	1
  3299  0093                     u1605:	
  3300  0093  1003               	clrc
  3301  0094  0DAF               	rlf	___awdiv@quotient,f
  3302  0095  0DB0               	rlf	___awdiv@quotient+1,f
  3303  0096  3EFF               	addlw	-1
  3304  0097  1D03               	skipz
  3305  0098  2893               	goto	u1605
  3306  0099  0829               	movf	___awdiv@divisor+1,w
  3307  009A  022B               	subwf	___awdiv@dividend+1,w
  3308  009B  1D03               	skipz
  3309  009C  289F               	goto	u1615
  3310  009D  0828               	movf	___awdiv@divisor,w
  3311  009E  022A               	subwf	___awdiv@dividend,w
  3312  009F                     u1615:	
  3313  009F  1C03               	skipc
  3314  00A0  28A8               	goto	l1592
  3315  00A1  0828               	movf	___awdiv@divisor,w
  3316  00A2  02AA               	subwf	___awdiv@dividend,f
  3317  00A3  0829               	movf	___awdiv@divisor+1,w
  3318  00A4  1C03               	skipc
  3319  00A5  03AB               	decf	___awdiv@dividend+1,f
  3320  00A6  02AB               	subwf	___awdiv@dividend+1,f
  3321  00A7  142F               	bsf	___awdiv@quotient,0
  3322  00A8                     l1592:	
  3323  00A8  3001               	movlw	1
  3324  00A9                     u1625:	
  3325  00A9  1003               	clrc
  3326  00AA  0CA9               	rrf	___awdiv@divisor+1,f
  3327  00AB  0CA8               	rrf	___awdiv@divisor,f
  3328  00AC  3EFF               	addlw	-1
  3329  00AD  1D03               	skipz
  3330  00AE  28A9               	goto	u1625
  3331  00AF  3001               	movlw	1
  3332  00B0  02AD               	subwf	___awdiv@counter,f
  3333  00B1  1D03               	btfss	3,2
  3334  00B2  2892               	goto	l1586
  3335  00B3                     l1596:	
  3336  00B3  082E               	movf	___awdiv@sign,w
  3337  00B4  1903               	btfsc	3,2
  3338  00B5  28BB               	goto	l1600
  3339  00B6  09AF               	comf	___awdiv@quotient,f
  3340  00B7  09B0               	comf	___awdiv@quotient+1,f
  3341  00B8  0AAF               	incf	___awdiv@quotient,f
  3342  00B9  1903               	skipnz
  3343  00BA  0AB0               	incf	___awdiv@quotient+1,f
  3344  00BB                     l1600:	
  3345  00BB  0830               	movf	___awdiv@quotient+1,w
  3346  00BC  00A9               	movwf	?___awdiv+1
  3347  00BD  082F               	movf	___awdiv@quotient,w
  3348  00BE  00A8               	movwf	?___awdiv
  3349  00BF  0008               	return
  3350  00C0                     __end_of___awdiv:	
  3351                           
  3352                           	psect	text18
  3353  00C0                     __ptext18:	
  3354 ;; *************** function _LCD_sendString *****************
  3355 ;; Defined at:
  3356 ;;		line 143 in file "C:\Users\Aluno\Desktop\stepper_motor-pic16f887\stepper_motor\lcd.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;  string          2   33[BANK0 ] PTR unsigned char 
  3359 ;;		 -> STR_3(5), STR_2(4), c_int_value(2), STR_1(4), 
  3360 ;;  linha           1   35[BANK0 ] unsigned char 
  3361 ;;  coluna          1   36[BANK0 ] unsigned char 
  3362 ;; Auto vars:     Size  Location     Type
  3363 ;;  i               1   39[BANK0 ] unsigned char 
  3364 ;;  i               1   40[BANK0 ] unsigned char 
  3365 ;;  col             1   38[BANK0 ] unsigned char 
  3366 ;; Return value:  Size  Location     Type
  3367 ;;                  1    wreg      void 
  3368 ;; Registers used:
  3369 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3370 ;; Tracked objects:
  3371 ;;		On entry : 0/0
  3372 ;;		On exit  : 0/0
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3375 ;;      Params:         0       4       0       0       0
  3376 ;;      Locals:         0       3       0       0       0
  3377 ;;      Temps:          0       1       0       0       0
  3378 ;;      Totals:         0       8       0       0       0
  3379 ;;Total ram usage:        8 bytes
  3380 ;; Hardware stack levels used:    1
  3381 ;; Hardware stack levels required when called:    6
  3382 ;; This function calls:
  3383 ;;		_LCD_SendByte
  3384 ;;		_LCD_SetCursor
  3385 ;; This function is called by:
  3386 ;;		_main
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           
  3391                           ;psect for function _LCD_sendString
  3392  00C0                     _LCD_sendString:	
  3393                           
  3394                           ;lcd.c: 144: if(coluna == 0){
  3395                           
  3396                           ;incstack = 0
  3397                           ; Regs used in _LCD_sendString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3398  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  3399  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  3400  00C2  0844               	movf	LCD_sendString@coluna,w
  3401  00C3  1D03               	btfss	3,2
  3402  00C4  28ED               	goto	l1736
  3403                           
  3404                           ;lcd.c: 145: for(uint8_t i = 0; i < 17; i++, coluna++){
  3405  00C5  01C7               	clrf	LCD_sendString@i
  3406  00C6  3011               	movlw	17
  3407  00C7  0247               	subwf	LCD_sendString@i,w
  3408  00C8  1803               	btfsc	3,0
  3409  00C9  28E5               	goto	l1732
  3410  00CA                     l1724:	
  3411                           
  3412                           ;lcd.c: 146: if(string[i] == '\0') break;
  3413  00CA  0847               	movf	LCD_sendString@i,w
  3414  00CB  0741               	addwf	LCD_sendString@string,w
  3415  00CC  0084               	movwf	4
  3416  00CD  0842               	movf	LCD_sendString@string+1,w
  3417  00CE  1803               	skipnc
  3418  00CF  0A42               	incf	LCD_sendString@string+1,w
  3419  00D0  00FF               	movwf	127
  3420  00D1  120A  158A  2000  120A  118A  	fcall	stringtab
  3421  00D6  3A00               	xorlw	0
  3422  00D7  1903               	btfsc	3,2
  3423  00D8  28E5               	goto	l1732
  3424  00D9  3001               	movlw	1
  3425  00DA  00C5               	movwf	??_LCD_sendString
  3426  00DB  0845               	movf	??_LCD_sendString,w
  3427  00DC  07C7               	addwf	LCD_sendString@i,f
  3428  00DD  3001               	movlw	1
  3429  00DE  00C5               	movwf	??_LCD_sendString
  3430  00DF  0845               	movf	??_LCD_sendString,w
  3431  00E0  07C4               	addwf	LCD_sendString@coluna,f
  3432  00E1  3011               	movlw	17
  3433  00E2  0247               	subwf	LCD_sendString@i,w
  3434  00E3  1C03               	skipc
  3435  00E4  28CA               	goto	l1724
  3436  00E5                     l1732:	
  3437                           
  3438                           ;lcd.c: 147: }
  3439                           ;lcd.c: 148: uint8_t col = 18 - coluna;
  3440  00E5  0344               	decf	LCD_sendString@coluna,w
  3441  00E6  3AFF               	xorlw	255
  3442  00E7  3E12               	addlw	18
  3443  00E8  00C5               	movwf	??_LCD_sendString
  3444  00E9  0845               	movf	??_LCD_sendString,w
  3445  00EA  00C6               	movwf	LCD_sendString@col
  3446                           
  3447                           ;lcd.c: 149: LCD_SetCursor(linha, col);
  3448  00EB  0846               	movf	LCD_sendString@col,w
  3449  00EC  28F0               	goto	L1
  3450  00ED                     l1736:	
  3451                           ;lcd.c: 150: } else{
  3452                           
  3453                           
  3454                           ;lcd.c: 151: LCD_SetCursor(linha, coluna);
  3455  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  3456  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  3457  00EF  0844               	movf	LCD_sendString@coluna,w
  3458  00F0                     L1:	
  3459  00F0  00C5               	movwf	??_LCD_sendString
  3460  00F1  0845               	movf	??_LCD_sendString,w
  3461  00F2  00BD               	movwf	LCD_SetCursor@coluna
  3462  00F3  0843               	movf	LCD_sendString@linha,w
  3463  00F4  120A  158A  2656  120A  118A  	fcall	_LCD_SetCursor
  3464                           
  3465                           ;lcd.c: 152: }
  3466                           ;lcd.c: 154: for(uint8_t i = 0; i < 17; i++){
  3467  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  3468  00FA  1303               	bcf	3,6	;RP1=0, select bank0
  3469  00FB  01C8               	clrf	LCD_sendString@i_352
  3470  00FC                     L2:	
  3471  00FC  3011               	movlw	17
  3472  00FD  0248               	subwf	LCD_sendString@i_352,w
  3473  00FE  1803               	btfsc	3,0
  3474  00FF  0008               	return
  3475                           
  3476                           ;lcd.c: 155: if(string[i] == '\0') break;
  3477  0100  0848               	movf	LCD_sendString@i_352,w
  3478  0101  0741               	addwf	LCD_sendString@string,w
  3479  0102  0084               	movwf	4
  3480  0103  0842               	movf	LCD_sendString@string+1,w
  3481  0104  1803               	skipnc
  3482  0105  0A42               	incf	LCD_sendString@string+1,w
  3483  0106  00FF               	movwf	127
  3484  0107  120A  158A  2000  120A  118A  	fcall	stringtab
  3485  010C  3A00               	xorlw	0
  3486  010D  1903               	btfsc	3,2
  3487  010E  0008               	return
  3488                           
  3489                           ;lcd.c: 156: LCD_SendByte(1, string[i]);
  3490  010F  0848               	movf	LCD_sendString@i_352,w
  3491  0110  0741               	addwf	LCD_sendString@string,w
  3492  0111  0084               	movwf	4
  3493  0112  0842               	movf	LCD_sendString@string+1,w
  3494  0113  1803               	skipnc
  3495  0114  0A42               	incf	LCD_sendString@string+1,w
  3496  0115  00FF               	movwf	127
  3497  0116  120A  158A  2000  120A  118A  	fcall	stringtab
  3498  011B  00C5               	movwf	??_LCD_sendString
  3499  011C  0845               	movf	??_LCD_sendString,w
  3500  011D  00B5               	movwf	LCD_SendByte@byte
  3501  011E  3001               	movlw	1
  3502  011F  120A  158A  2763  120A  118A  	fcall	_LCD_SendByte
  3503  0124  3001               	movlw	1
  3504  0125  1283               	bcf	3,5	;RP0=0, select bank0
  3505  0126  1303               	bcf	3,6	;RP1=0, select bank0
  3506  0127  00C5               	movwf	??_LCD_sendString
  3507  0128  0845               	movf	??_LCD_sendString,w
  3508  0129  07C8               	addwf	LCD_sendString@i_352,f
  3509  012A  28FC               	goto	L2
  3510  012B                     __end_of_LCD_sendString:	
  3511                           
  3512                           	psect	text19
  3513  0E56                     __ptext19:	
  3514 ;; *************** function _LCD_SetCursor *****************
  3515 ;; Defined at:
  3516 ;;		line 123 in file "C:\Users\Aluno\Desktop\stepper_motor-pic16f887\stepper_motor\lcd.c"
  3517 ;; Parameters:    Size  Location     Type
  3518 ;;  linha           1    wreg     unsigned char 
  3519 ;;  coluna          1   29[BANK0 ] unsigned char 
  3520 ;; Auto vars:     Size  Location     Type
  3521 ;;  linha           1   31[BANK0 ] unsigned char 
  3522 ;;  aux             1   32[BANK0 ] unsigned char 
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  1    wreg      void 
  3525 ;; Registers used:
  3526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3532 ;;      Params:         0       1       0       0       0
  3533 ;;      Locals:         0       2       0       0       0
  3534 ;;      Temps:          0       1       0       0       0
  3535 ;;      Totals:         0       4       0       0       0
  3536 ;;Total ram usage:        4 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    5
  3539 ;; This function calls:
  3540 ;;		_LCD_SendByte
  3541 ;; This function is called by:
  3542 ;;		_LCD_sendString
  3543 ;;		_LCD_sendChar
  3544 ;; This function uses a non-reentrant model
  3545 ;;
  3546                           
  3547                           
  3548                           ;psect for function _LCD_SetCursor
  3549  0E56                     _LCD_SetCursor:	
  3550                           
  3551                           ;incstack = 0
  3552                           ; Regs used in _LCD_SetCursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3553                           ;LCD_SetCursor@linha stored from wreg
  3554  0E56  1283               	bcf	3,5	;RP0=0, select bank0
  3555  0E57  1303               	bcf	3,6	;RP1=0, select bank0
  3556  0E58  00BF               	movwf	LCD_SetCursor@linha
  3557                           
  3558                           ;lcd.c: 124: uint8_t aux;
  3559                           ;lcd.c: 126: if(linha == 2)
  3560  0E59  3002               	movlw	2
  3561  0E5A  063F               	xorwf	LCD_SetCursor@linha,w
  3562  0E5B  1D03               	btfss	3,2
  3563  0E5C  2E62               	goto	l1540
  3564                           
  3565                           ;lcd.c: 127: aux = 0x40;
  3566  0E5D  3040               	movlw	64
  3567  0E5E  00BE               	movwf	??_LCD_SetCursor
  3568  0E5F  083E               	movf	??_LCD_SetCursor,w
  3569  0E60  00C0               	movwf	LCD_SetCursor@aux
  3570  0E61  2E63               	goto	l1542
  3571  0E62                     l1540:	
  3572                           
  3573                           ;lcd.c: 128: else
  3574                           ;lcd.c: 129: aux = 0;
  3575  0E62  01C0               	clrf	LCD_SetCursor@aux
  3576  0E63                     l1542:	
  3577                           
  3578                           ;lcd.c: 131: aux += coluna - 1;
  3579  0E63  083D               	movf	LCD_SetCursor@coluna,w
  3580  0E64  3EFF               	addlw	255
  3581  0E65  00BE               	movwf	??_LCD_SetCursor
  3582  0E66  083E               	movf	??_LCD_SetCursor,w
  3583  0E67  07C0               	addwf	LCD_SetCursor@aux,f
  3584                           
  3585                           ;lcd.c: 133: LCD_SendByte(0, 0x80 | aux);
  3586  0E68  0840               	movf	LCD_SetCursor@aux,w
  3587  0E69  3880               	iorlw	128
  3588  0E6A  00BE               	movwf	??_LCD_SetCursor
  3589  0E6B  083E               	movf	??_LCD_SetCursor,w
  3590  0E6C  00B5               	movwf	LCD_SendByte@byte
  3591  0E6D  3000               	movlw	0
  3592  0E6E  120A  158A  2763   	fcall	_LCD_SendByte
  3593  0E71  0008               	return
  3594  0E72                     __end_of_LCD_SetCursor:	
  3595                           
  3596                           	psect	text20
  3597  0F63                     __ptext20:	
  3598 ;; *************** function _LCD_SendByte *****************
  3599 ;; Defined at:
  3600 ;;		line 113 in file "C:\Users\Aluno\Desktop\stepper_motor-pic16f887\stepper_motor\lcd.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;  reg             1    wreg     unsigned char 
  3603 ;;  byte            1   21[BANK0 ] unsigned char 
  3604 ;; Auto vars:     Size  Location     Type
  3605 ;;  reg             1   26[BANK0 ] unsigned char 
  3606 ;; Return value:  Size  Location     Type
  3607 ;;                  1    wreg      void 
  3608 ;; Registers used:
  3609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3610 ;; Tracked objects:
  3611 ;;		On entry : 0/0
  3612 ;;		On exit  : 0/0
  3613 ;;		Unchanged: 0/0
  3614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3615 ;;      Params:         0       1       0       0       0
  3616 ;;      Locals:         0       3       0       0       0
  3617 ;;      Temps:          0       4       0       0       0
  3618 ;;      Totals:         0       8       0       0       0
  3619 ;;Total ram usage:        8 bytes
  3620 ;; Hardware stack levels used:    1
  3621 ;; Hardware stack levels required when called:    4
  3622 ;; This function calls:
  3623 ;;		_LCD_SendNb
  3624 ;; This function is called by:
  3625 ;;		_LCD_Setup
  3626 ;;		_LCD_SetCursor
  3627 ;;		_LCD_sendString
  3628 ;;		_LCD_ClearDisplay
  3629 ;;		_LCD_Home
  3630 ;;		_LCD_DisplayOn
  3631 ;;		_LCD_DisplayOff
  3632 ;;		_LCD_CursorOn
  3633 ;;		_LCD_CursorOff
  3634 ;;		_LCD_DisplayRight
  3635 ;;		_LCD_DisplayLeft
  3636 ;;		_LCD_sendChar
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           
  3641                           ;psect for function _LCD_SendByte
  3642  0F63                     _LCD_SendByte:	
  3643                           
  3644                           ;incstack = 0
  3645                           ; Regs used in _LCD_SendByte: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3646                           ;LCD_SendByte@reg stored from wreg
  3647  0F63  1283               	bcf	3,5	;RP0=0, select bank0
  3648  0F64  1303               	bcf	3,6	;RP1=0, select bank0
  3649  0F65  00BA               	movwf	LCD_SendByte@reg
  3650                           
  3651                           ;lcd.c: 114: *LCD_PORT = reg ? (*LCD_PORT | (1 << 4)) : (*LCD_PORT & ~(1 << 4));
  3652  0F66  083A               	movf	LCD_SendByte@reg,w
  3653  0F67  1D03               	btfss	3,2
  3654  0F68  2F79               	goto	l1394
  3655  0F69  0865               	movf	_LCD_PORT,w
  3656  0F6A  0084               	movwf	4
  3657  0F6B  1783               	bsf	3,7
  3658  0F6C  1C66               	btfss	_LCD_PORT+1,0
  3659  0F6D  1383               	bcf	3,7
  3660  0F6E  0800               	movf	0,w
  3661  0F6F  00B6               	movwf	??_LCD_SendByte
  3662  0F70  0A84               	incf	4,f
  3663  0F71  0800               	movf	0,w
  3664  0F72  00B7               	movwf	??_LCD_SendByte+1
  3665  0F73  30EF               	movlw	239
  3666  0F74  0536               	andwf	??_LCD_SendByte,w
  3667  0F75  00B8               	movwf	??_LCD_SendByte+2
  3668  0F76  30FF               	movlw	255
  3669  0F77  0537               	andwf	??_LCD_SendByte+1,w
  3670  0F78  2F88               	goto	L3
  3671  0F79                     l1394:	
  3672  0F79  0865               	movf	_LCD_PORT,w
  3673  0F7A  0084               	movwf	4
  3674  0F7B  1783               	bsf	3,7
  3675  0F7C  1C66               	btfss	_LCD_PORT+1,0
  3676  0F7D  1383               	bcf	3,7
  3677  0F7E  0800               	movf	0,w
  3678  0F7F  00B6               	movwf	??_LCD_SendByte
  3679  0F80  0A84               	incf	4,f
  3680  0F81  0800               	movf	0,w
  3681  0F82  00B7               	movwf	??_LCD_SendByte+1
  3682  0F83  3010               	movlw	16
  3683  0F84  0436               	iorwf	??_LCD_SendByte,w
  3684  0F85  00B8               	movwf	??_LCD_SendByte+2
  3685  0F86  3000               	movlw	0
  3686  0F87  0437               	iorwf	??_LCD_SendByte+1,w
  3687  0F88                     L3:	
  3688  0F88  00B9               	movwf	??_LCD_SendByte+3
  3689  0F89  0838               	movf	??_LCD_SendByte+2,w
  3690  0F8A  00BB               	movwf	_LCD_SendByte$336	;volatile
  3691  0F8B  0839               	movf	??_LCD_SendByte+3,w
  3692  0F8C  00BC               	movwf	_LCD_SendByte$336+1	;volatile
  3693  0F8D  0865               	movf	_LCD_PORT,w
  3694  0F8E  0084               	movwf	4
  3695  0F8F  1783               	bsf	3,7
  3696  0F90  1C66               	btfss	_LCD_PORT+1,0
  3697  0F91  1383               	bcf	3,7
  3698  0F92  083B               	movf	_LCD_SendByte$336,w	;volatile
  3699  0F93  0080               	movwf	0
  3700  0F94  0A84               	incf	4,f
  3701  0F95  083C               	movf	_LCD_SendByte$336+1,w	;volatile
  3702  0F96  0080               	movwf	0
  3703                           
  3704                           ;lcd.c: 118: LCD_SendNb(byte >> 4);
  3705  0F97  0835               	movf	LCD_SendByte@byte,w
  3706  0F98  00B6               	movwf	??_LCD_SendByte
  3707  0F99  3004               	movlw	4
  3708  0F9A                     u1305:	
  3709  0F9A  1003               	clrc
  3710  0F9B  0CB6               	rrf	??_LCD_SendByte,f
  3711  0F9C  3EFF               	addlw	-1
  3712  0F9D  1D03               	skipz
  3713  0F9E  2F9A               	goto	u1305
  3714  0F9F  0836               	movf	??_LCD_SendByte,w
  3715  0FA0  120A  118A  25BB  120A  158A  	fcall	_LCD_SendNb
  3716                           
  3717                           ;lcd.c: 119: LCD_SendNb(byte & 0x0f);
  3718  0FA5  1283               	bcf	3,5	;RP0=0, select bank0
  3719  0FA6  1303               	bcf	3,6	;RP1=0, select bank0
  3720  0FA7  0835               	movf	LCD_SendByte@byte,w
  3721  0FA8  390F               	andlw	15
  3722  0FA9  120A  118A  25BB   	fcall	_LCD_SendNb
  3723  0FAC  0008               	return
  3724  0FAD                     __end_of_LCD_SendByte:	
  3725                           
  3726                           	psect	text21
  3727  05BB                     __ptext21:	
  3728 ;; *************** function _LCD_SendNb *****************
  3729 ;; Defined at:
  3730 ;;		line 98 in file "C:\Users\Aluno\Desktop\stepper_motor-pic16f887\stepper_motor\lcd.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;  NB              1    wreg     unsigned char 
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;  NB              1   20[BANK0 ] unsigned char 
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  1    wreg      void 
  3737 ;; Registers used:
  3738 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3744 ;;      Params:         0       0       0       0       0
  3745 ;;      Locals:         0       9       0       0       0
  3746 ;;      Temps:          0       4       0       0       0
  3747 ;;      Totals:         0      13       0       0       0
  3748 ;;Total ram usage:       13 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    3
  3751 ;; This function calls:
  3752 ;;		Nothing
  3753 ;; This function is called by:
  3754 ;;		_LCD_Setup
  3755 ;;		_LCD_SendByte
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759                           
  3760                           ;psect for function _LCD_SendNb
  3761  05BB                     _LCD_SendNb:	
  3762                           
  3763                           ;incstack = 0
  3764                           ; Regs used in _LCD_SendNb: [wreg-fsr0h+status,2+status,0]
  3765                           ;LCD_SendNb@NB stored from wreg
  3766  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  3767  05BC  1303               	bcf	3,6	;RP1=0, select bank0
  3768  05BD  00B4               	movwf	LCD_SendNb@NB
  3769                           
  3770                           ;lcd.c: 101: *LCD_PORT = (unsigned)((NB & 0b00000001) >> 0) ? (*LCD_PORT | (1 << 0)) : (
      +                          *LCD_PORT & ~(1 << 0));
  3771  05BE  1834               	btfsc	LCD_SendNb@NB,0
  3772  05BF  2DD0               	goto	l1330
  3773  05C0  0865               	movf	_LCD_PORT,w
  3774  05C1  0084               	movwf	4
  3775  05C2  1783               	bsf	3,7
  3776  05C3  1C66               	btfss	_LCD_PORT+1,0
  3777  05C4  1383               	bcf	3,7
  3778  05C5  0800               	movf	0,w
  3779  05C6  00A8               	movwf	??_LCD_SendNb
  3780  05C7  0A84               	incf	4,f
  3781  05C8  0800               	movf	0,w
  3782  05C9  00A9               	movwf	??_LCD_SendNb+1
  3783  05CA  30FE               	movlw	254
  3784  05CB  0528               	andwf	??_LCD_SendNb,w
  3785  05CC  00AA               	movwf	??_LCD_SendNb+2
  3786  05CD  30FF               	movlw	255
  3787  05CE  0529               	andwf	??_LCD_SendNb+1,w
  3788  05CF  2DDF               	goto	L4
  3789  05D0                     l1330:	
  3790  05D0  0865               	movf	_LCD_PORT,w
  3791  05D1  0084               	movwf	4
  3792  05D2  1783               	bsf	3,7
  3793  05D3  1C66               	btfss	_LCD_PORT+1,0
  3794  05D4  1383               	bcf	3,7
  3795  05D5  0800               	movf	0,w
  3796  05D6  00A8               	movwf	??_LCD_SendNb
  3797  05D7  0A84               	incf	4,f
  3798  05D8  0800               	movf	0,w
  3799  05D9  00A9               	movwf	??_LCD_SendNb+1
  3800  05DA  3001               	movlw	1
  3801  05DB  0428               	iorwf	??_LCD_SendNb,w
  3802  05DC  00AA               	movwf	??_LCD_SendNb+2
  3803  05DD  3000               	movlw	0
  3804  05DE  0429               	iorwf	??_LCD_SendNb+1,w
  3805  05DF                     L4:	
  3806  05DF  00AB               	movwf	??_LCD_SendNb+3
  3807  05E0  082A               	movf	??_LCD_SendNb+2,w
  3808  05E1  00AC               	movwf	_LCD_SendNb$329	;volatile
  3809  05E2  082B               	movf	??_LCD_SendNb+3,w
  3810  05E3  00AD               	movwf	_LCD_SendNb$329+1	;volatile
  3811  05E4  0865               	movf	_LCD_PORT,w
  3812  05E5  0084               	movwf	4
  3813  05E6  1783               	bsf	3,7
  3814  05E7  1C66               	btfss	_LCD_PORT+1,0
  3815  05E8  1383               	bcf	3,7
  3816  05E9  082C               	movf	_LCD_SendNb$329,w	;volatile
  3817  05EA  0080               	movwf	0
  3818  05EB  0A84               	incf	4,f
  3819  05EC  082D               	movf	_LCD_SendNb$329+1,w	;volatile
  3820  05ED  0080               	movwf	0
  3821                           
  3822                           ;lcd.c: 102: *LCD_PORT = (unsigned)((NB & 0b00000010) >> 1) ? (*LCD_PORT | (1 << 1)) : (
      +                          *LCD_PORT & ~(1 << 1));
  3823  05EE  0834               	movf	LCD_SendNb@NB,w
  3824  05EF  00A8               	movwf	??_LCD_SendNb
  3825  05F0  3001               	movlw	1
  3826  05F1                     u1115:	
  3827  05F1  1003               	clrc
  3828  05F2  0CA8               	rrf	??_LCD_SendNb,f
  3829  05F3  3EFF               	addlw	-1
  3830  05F4  1D03               	skipz
  3831  05F5  2DF1               	goto	u1115
  3832  05F6  1828               	btfsc	??_LCD_SendNb,0
  3833  05F7  2E08               	goto	l1336
  3834  05F8  0865               	movf	_LCD_PORT,w
  3835  05F9  0084               	movwf	4
  3836  05FA  1783               	bsf	3,7
  3837  05FB  1C66               	btfss	_LCD_PORT+1,0
  3838  05FC  1383               	bcf	3,7
  3839  05FD  0800               	movf	0,w
  3840  05FE  00A8               	movwf	??_LCD_SendNb
  3841  05FF  0A84               	incf	4,f
  3842  0600  0800               	movf	0,w
  3843  0601  00A9               	movwf	??_LCD_SendNb+1
  3844  0602  30FD               	movlw	253
  3845  0603  0528               	andwf	??_LCD_SendNb,w
  3846  0604  00AA               	movwf	??_LCD_SendNb+2
  3847  0605  30FF               	movlw	255
  3848  0606  0529               	andwf	??_LCD_SendNb+1,w
  3849  0607  2E17               	goto	L5
  3850  0608                     l1336:	
  3851  0608  0865               	movf	_LCD_PORT,w
  3852  0609  0084               	movwf	4
  3853  060A  1783               	bsf	3,7
  3854  060B  1C66               	btfss	_LCD_PORT+1,0
  3855  060C  1383               	bcf	3,7
  3856  060D  0800               	movf	0,w
  3857  060E  00A8               	movwf	??_LCD_SendNb
  3858  060F  0A84               	incf	4,f
  3859  0610  0800               	movf	0,w
  3860  0611  00A9               	movwf	??_LCD_SendNb+1
  3861  0612  3002               	movlw	2
  3862  0613  0428               	iorwf	??_LCD_SendNb,w
  3863  0614  00AA               	movwf	??_LCD_SendNb+2
  3864  0615  3000               	movlw	0
  3865  0616  0429               	iorwf	??_LCD_SendNb+1,w
  3866  0617                     L5:	
  3867  0617  00AB               	movwf	??_LCD_SendNb+3
  3868  0618  082A               	movf	??_LCD_SendNb+2,w
  3869  0619  00AE               	movwf	_LCD_SendNb$330	;volatile
  3870  061A  082B               	movf	??_LCD_SendNb+3,w
  3871  061B  00AF               	movwf	_LCD_SendNb$330+1	;volatile
  3872  061C  0865               	movf	_LCD_PORT,w
  3873  061D  0084               	movwf	4
  3874  061E  1783               	bsf	3,7
  3875  061F  1C66               	btfss	_LCD_PORT+1,0
  3876  0620  1383               	bcf	3,7
  3877  0621  082E               	movf	_LCD_SendNb$330,w	;volatile
  3878  0622  0080               	movwf	0
  3879  0623  0A84               	incf	4,f
  3880  0624  082F               	movf	_LCD_SendNb$330+1,w	;volatile
  3881  0625  0080               	movwf	0
  3882                           
  3883                           ;lcd.c: 103: *LCD_PORT = (unsigned)((NB & 0b00000100) >> 2) ? (*LCD_PORT | (1 << 2)) : (
      +                          *LCD_PORT & ~(1 << 2));
  3884  0626  0834               	movf	LCD_SendNb@NB,w
  3885  0627  00A8               	movwf	??_LCD_SendNb
  3886  0628  3002               	movlw	2
  3887  0629                     u1135:	
  3888  0629  1003               	clrc
  3889  062A  0CA8               	rrf	??_LCD_SendNb,f
  3890  062B  3EFF               	addlw	-1
  3891  062C  1D03               	skipz
  3892  062D  2E29               	goto	u1135
  3893  062E  1828               	btfsc	??_LCD_SendNb,0
  3894  062F  2E40               	goto	l1342
  3895  0630  0865               	movf	_LCD_PORT,w
  3896  0631  0084               	movwf	4
  3897  0632  1783               	bsf	3,7
  3898  0633  1C66               	btfss	_LCD_PORT+1,0
  3899  0634  1383               	bcf	3,7
  3900  0635  0800               	movf	0,w
  3901  0636  00A8               	movwf	??_LCD_SendNb
  3902  0637  0A84               	incf	4,f
  3903  0638  0800               	movf	0,w
  3904  0639  00A9               	movwf	??_LCD_SendNb+1
  3905  063A  30FB               	movlw	251
  3906  063B  0528               	andwf	??_LCD_SendNb,w
  3907  063C  00AA               	movwf	??_LCD_SendNb+2
  3908  063D  30FF               	movlw	255
  3909  063E  0529               	andwf	??_LCD_SendNb+1,w
  3910  063F  2E4F               	goto	L6
  3911  0640                     l1342:	
  3912  0640  0865               	movf	_LCD_PORT,w
  3913  0641  0084               	movwf	4
  3914  0642  1783               	bsf	3,7
  3915  0643  1C66               	btfss	_LCD_PORT+1,0
  3916  0644  1383               	bcf	3,7
  3917  0645  0800               	movf	0,w
  3918  0646  00A8               	movwf	??_LCD_SendNb
  3919  0647  0A84               	incf	4,f
  3920  0648  0800               	movf	0,w
  3921  0649  00A9               	movwf	??_LCD_SendNb+1
  3922  064A  3004               	movlw	4
  3923  064B  0428               	iorwf	??_LCD_SendNb,w
  3924  064C  00AA               	movwf	??_LCD_SendNb+2
  3925  064D  3000               	movlw	0
  3926  064E  0429               	iorwf	??_LCD_SendNb+1,w
  3927  064F                     L6:	
  3928  064F  00AB               	movwf	??_LCD_SendNb+3
  3929  0650  082A               	movf	??_LCD_SendNb+2,w
  3930  0651  00B0               	movwf	_LCD_SendNb$331	;volatile
  3931  0652  082B               	movf	??_LCD_SendNb+3,w
  3932  0653  00B1               	movwf	_LCD_SendNb$331+1	;volatile
  3933  0654  0865               	movf	_LCD_PORT,w
  3934  0655  0084               	movwf	4
  3935  0656  1783               	bsf	3,7
  3936  0657  1C66               	btfss	_LCD_PORT+1,0
  3937  0658  1383               	bcf	3,7
  3938  0659  0830               	movf	_LCD_SendNb$331,w	;volatile
  3939  065A  0080               	movwf	0
  3940  065B  0A84               	incf	4,f
  3941  065C  0831               	movf	_LCD_SendNb$331+1,w	;volatile
  3942  065D  0080               	movwf	0
  3943                           
  3944                           ;lcd.c: 104: *LCD_PORT = (unsigned)((NB & 0b00001000) >> 3) ? (*LCD_PORT | (1 << 3)) : (
      +                          *LCD_PORT & ~(1 << 3));
  3945  065E  0834               	movf	LCD_SendNb@NB,w
  3946  065F  00A8               	movwf	??_LCD_SendNb
  3947  0660  3003               	movlw	3
  3948  0661                     u1155:	
  3949  0661  1003               	clrc
  3950  0662  0CA8               	rrf	??_LCD_SendNb,f
  3951  0663  3EFF               	addlw	-1
  3952  0664  1D03               	skipz
  3953  0665  2E61               	goto	u1155
  3954  0666  1828               	btfsc	??_LCD_SendNb,0
  3955  0667  2E78               	goto	l1348
  3956  0668  0865               	movf	_LCD_PORT,w
  3957  0669  0084               	movwf	4
  3958  066A  1783               	bsf	3,7
  3959  066B  1C66               	btfss	_LCD_PORT+1,0
  3960  066C  1383               	bcf	3,7
  3961  066D  0800               	movf	0,w
  3962  066E  00A8               	movwf	??_LCD_SendNb
  3963  066F  0A84               	incf	4,f
  3964  0670  0800               	movf	0,w
  3965  0671  00A9               	movwf	??_LCD_SendNb+1
  3966  0672  30F7               	movlw	247
  3967  0673  0528               	andwf	??_LCD_SendNb,w
  3968  0674  00AA               	movwf	??_LCD_SendNb+2
  3969  0675  30FF               	movlw	255
  3970  0676  0529               	andwf	??_LCD_SendNb+1,w
  3971  0677  2E87               	goto	L7
  3972  0678                     l1348:	
  3973  0678  0865               	movf	_LCD_PORT,w
  3974  0679  0084               	movwf	4
  3975  067A  1783               	bsf	3,7
  3976  067B  1C66               	btfss	_LCD_PORT+1,0
  3977  067C  1383               	bcf	3,7
  3978  067D  0800               	movf	0,w
  3979  067E  00A8               	movwf	??_LCD_SendNb
  3980  067F  0A84               	incf	4,f
  3981  0680  0800               	movf	0,w
  3982  0681  00A9               	movwf	??_LCD_SendNb+1
  3983  0682  3008               	movlw	8
  3984  0683  0428               	iorwf	??_LCD_SendNb,w
  3985  0684  00AA               	movwf	??_LCD_SendNb+2
  3986  0685  3000               	movlw	0
  3987  0686  0429               	iorwf	??_LCD_SendNb+1,w
  3988  0687                     L7:	
  3989  0687  00AB               	movwf	??_LCD_SendNb+3
  3990  0688  082A               	movf	??_LCD_SendNb+2,w
  3991  0689  00B2               	movwf	_LCD_SendNb$332	;volatile
  3992  068A  082B               	movf	??_LCD_SendNb+3,w
  3993  068B  00B3               	movwf	_LCD_SendNb$332+1	;volatile
  3994  068C  0865               	movf	_LCD_PORT,w
  3995  068D  0084               	movwf	4
  3996  068E  1783               	bsf	3,7
  3997  068F  1C66               	btfss	_LCD_PORT+1,0
  3998  0690  1383               	bcf	3,7
  3999  0691  0832               	movf	_LCD_SendNb$332,w	;volatile
  4000  0692  0080               	movwf	0
  4001  0693  0A84               	incf	4,f
  4002  0694  0833               	movf	_LCD_SendNb$332+1,w	;volatile
  4003  0695  0080               	movwf	0
  4004                           
  4005                           ;lcd.c: 106: *LCD_PORT |= 1 << 5;
  4006  0696  0865               	movf	_LCD_PORT,w
  4007  0697  0084               	movwf	4
  4008  0698  1783               	bsf	3,7
  4009  0699  1C66               	btfss	_LCD_PORT+1,0
  4010  069A  1383               	bcf	3,7
  4011  069B  3020               	movlw	32
  4012  069C  0480               	iorwf	0,f
  4013  069D  0A84               	incf	4,f
  4014  069E  3000               	movlw	0
  4015  069F  0480               	iorwf	0,f
  4016                           
  4017                           ;lcd.c: 107: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4018  06A0  0000               	nop
  4019                           
  4020                           ;lcd.c: 108: *LCD_PORT &= ~(1 << 5);
  4021  06A1  1283               	bcf	3,5	;RP0=0, select bank0
  4022  06A2  1303               	bcf	3,6	;RP1=0, select bank0
  4023  06A3  0865               	movf	_LCD_PORT,w
  4024  06A4  0084               	movwf	4
  4025  06A5  1783               	bsf	3,7
  4026  06A6  1C66               	btfss	_LCD_PORT+1,0
  4027  06A7  1383               	bcf	3,7
  4028  06A8  30DF               	movlw	223
  4029  06A9  0580               	andwf	0,f
  4030  06AA  0A84               	incf	4,f
  4031  06AB  30FF               	movlw	255
  4032  06AC  0580               	andwf	0,f
  4033                           
  4034                           ;lcd.c: 109: _delay((unsigned long)((50)*(4000000/4000000.0)));
  4035  06AD  300F               	movlw	15
  4036  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  4037  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  4038  06B0  00A8               	movwf	??_LCD_SendNb
  4039  06B1                     u2357:	
  4040  06B1  0BA8               	decfsz	??_LCD_SendNb,f
  4041  06B2  2EB1               	goto	u2357
  4042  06B3  2EB4               	nop2
  4043  06B4  0008               	return
  4044  06B5                     __end_of_LCD_SendNb:	
  4045                           
  4046                           	psect	text22
  4047  04E2                     __ptext22:	
  4048 ;; *************** function _ISR *****************
  4049 ;; Defined at:
  4050 ;;		line 17 in file "C:\Users\Aluno\Desktop\stepper_motor-pic16f887\stepper_motor\main.c"
  4051 ;; Parameters:    Size  Location     Type
  4052 ;;		None
  4053 ;; Auto vars:     Size  Location     Type
  4054 ;;		None
  4055 ;; Return value:  Size  Location     Type
  4056 ;;                  1    wreg      void 
  4057 ;; Registers used:
  4058 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4059 ;; Tracked objects:
  4060 ;;		On entry : 0/0
  4061 ;;		On exit  : 0/0
  4062 ;;		Unchanged: 0/0
  4063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4064 ;;      Params:         0       0       0       0       0
  4065 ;;      Locals:         0       8       0       0       0
  4066 ;;      Temps:          7       0       0       0       0
  4067 ;;      Totals:         7       8       0       0       0
  4068 ;;Total ram usage:       15 bytes
  4069 ;; Hardware stack levels used:    1
  4070 ;; Hardware stack levels required when called:    2
  4071 ;; This function calls:
  4072 ;;		_calculaErro
  4073 ;; This function is called by:
  4074 ;;		Interrupt level 1
  4075 ;; This function uses a non-reentrant model
  4076 ;;
  4077                           
  4078                           
  4079                           ;psect for function _ISR
  4080  04E2                     _ISR:	
  4081                           
  4082                           ;main.c: 19: calculaErro();
  4083  04E2  120A  158A  27AD  120A  118A  	fcall	_calculaErro
  4084                           
  4085                           ;main.c: 21: if(speed_ramp <= 100 && error !=0){
  4086  04E7  3065               	movlw	101
  4087  04E8  1283               	bcf	3,5	;RP0=0, select bank0
  4088  04E9  1303               	bcf	3,6	;RP1=0, select bank0
  4089  04EA  0260               	subwf	_speed_ramp,w
  4090  04EB  1803               	skipnc
  4091  04EC  2CFB               	goto	i1l106
  4092  04ED  085A               	movf	_error,w
  4093  04EE  045B               	iorwf	_error+1,w
  4094  04EF  1903               	btfsc	3,2
  4095  04F0  2CFB               	goto	i1l106
  4096                           
  4097                           ;main.c: 22: PR2-= 2;
  4098  04F1  3002               	movlw	2
  4099  04F2  1683               	bsf	3,5	;RP0=1, select bank1
  4100  04F3  1303               	bcf	3,6	;RP1=0, select bank1
  4101  04F4  0292               	subwf	18,f	;volatile
  4102                           
  4103                           ;main.c: 23: speed_ramp++;
  4104  04F5  3001               	movlw	1
  4105  04F6  00F7               	movwf	??_ISR
  4106  04F7  0877               	movf	??_ISR,w
  4107  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  4108  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  4109  04FA  07E0               	addwf	_speed_ramp,f
  4110  04FB                     i1l106:	
  4111                           
  4112                           ;main.c: 24: }
  4113                           ;main.c: 26: if(error == 0){
  4114  04FB  085A               	movf	_error,w
  4115  04FC  045B               	iorwf	_error+1,w
  4116  04FD  1D03               	btfss	3,2
  4117  04FE  2D04               	goto	i1l1780
  4118                           
  4119                           ;main.c: 27: speed_ramp=0;
  4120  04FF  01E0               	clrf	_speed_ramp
  4121                           
  4122                           ;main.c: 28: PR2 = 255;
  4123  0500  30FF               	movlw	255
  4124  0501  1683               	bsf	3,5	;RP0=1, select bank1
  4125  0502  1303               	bcf	3,6	;RP1=0, select bank1
  4126  0503  0092               	movwf	18	;volatile
  4127  0504                     i1l1780:	
  4128                           
  4129                           ;main.c: 29: }
  4130                           ;main.c: 31: if(error > 0){
  4131  0504  1283               	bcf	3,5	;RP0=0, select bank0
  4132  0505  085B               	movf	_error+1,w
  4133  0506  3A80               	xorlw	128
  4134  0507  00FF               	movwf	127
  4135  0508  3080               	movlw	128
  4136  0509  027F               	subwf	127,w
  4137  050A  1D03               	skipz
  4138  050B  2D0E               	goto	u201_25
  4139  050C  3001               	movlw	1
  4140  050D  025A               	subwf	_error,w
  4141  050E                     u201_25:	
  4142  050E  1C03               	skipc
  4143  050F  2D5C               	goto	i1l1804
  4144                           
  4145                           ;main.c: 32: STATUSbits.C = 0;
  4146  0510  1283               	bcf	3,5	;RP0=0, select bank0
  4147  0511  1303               	bcf	3,6	;RP1=0, select bank0
  4148  0512  1003               	bcf	3,0	;volatile
  4149                           
  4150                           ;main.c: 33: phase = (phase == 0) ? 1 : phase;
  4151  0513  0861               	movf	_phase,w
  4152  0514  1903               	btfsc	3,2
  4153  0515  2D1D               	goto	i1l1788
  4154  0516  0861               	movf	_phase,w
  4155  0517  00F7               	movwf	??_ISR
  4156  0518  01F8               	clrf	??_ISR+1
  4157  0519  0877               	movf	??_ISR,w
  4158  051A  00A0               	movwf	_ISR$251
  4159  051B  0878               	movf	??_ISR+1,w
  4160  051C  2D20               	goto	L8
  4161  051D                     i1l1788:	
  4162  051D  3001               	movlw	1
  4163  051E  00A0               	movwf	_ISR$251
  4164  051F  3000               	movlw	0
  4165  0520                     L8:	
  4166  0520  00A1               	movwf	_ISR$251+1
  4167  0521  0820               	movf	_ISR$251,w
  4168  0522  00F7               	movwf	??_ISR
  4169  0523  0877               	movf	??_ISR,w
  4170  0524  00E1               	movwf	_phase
  4171                           
  4172                           ;main.c: 34: phase = (phase == 8) ? phase >> 3 : phase << 1;
  4173  0525  3008               	movlw	8
  4174  0526  0661               	xorwf	_phase,w
  4175  0527  1903               	btfsc	3,2
  4176  0528  2D31               	goto	i1l1794
  4177  0529  0861               	movf	_phase,w
  4178  052A  00F7               	movwf	??_ISR
  4179  052B  01F8               	clrf	??_ISR+1
  4180  052C  1003               	clrc
  4181  052D  0D77               	rlf	??_ISR,w
  4182  052E  00A2               	movwf	_ISR$252
  4183  052F  0D78               	rlf	??_ISR+1,w
  4184  0530  2D3F               	goto	L9
  4185  0531                     i1l1794:	
  4186  0531  0861               	movf	_phase,w
  4187  0532  00F7               	movwf	??_ISR
  4188  0533  3003               	movlw	3
  4189  0534                     u204_25:	
  4190  0534  1003               	clrc
  4191  0535  0CF7               	rrf	??_ISR,f
  4192  0536  3EFF               	addlw	-1
  4193  0537  1D03               	skipz
  4194  0538  2D34               	goto	u204_25
  4195  0539  0877               	movf	??_ISR,w
  4196  053A  00F8               	movwf	??_ISR+1
  4197  053B  01F9               	clrf	??_ISR+2
  4198  053C  0878               	movf	??_ISR+1,w
  4199  053D  00A2               	movwf	_ISR$252
  4200  053E  0879               	movf	??_ISR+2,w
  4201  053F                     L9:	
  4202  053F  00A3               	movwf	_ISR$252+1
  4203  0540  0822               	movf	_ISR$252,w
  4204  0541  00F7               	movwf	??_ISR
  4205  0542  0877               	movf	??_ISR,w
  4206  0543  00E1               	movwf	_phase
  4207                           
  4208                           ;main.c: 35: position = ((position + 1)== 2048) ? 0 : (position + 1);
  4209  0544  085C               	movf	_position,w
  4210  0545  3E01               	addlw	1
  4211  0546  00F7               	movwf	??_ISR
  4212  0547  085D               	movf	_position+1,w
  4213  0548  1803               	skipnc
  4214  0549  3E01               	addlw	1
  4215  054A  3E00               	addlw	0
  4216  054B  00F8               	movwf	??_ISR+1
  4217  054C  3008               	movlw	8
  4218  054D  0678               	xorwf	??_ISR+1,w
  4219  054E  0477               	iorwf	??_ISR,w
  4220  054F  1903               	btfsc	3,2
  4221  0550  2D5A               	goto	i1l1802
  4222  0551  085C               	movf	_position,w
  4223  0552  3E01               	addlw	1
  4224  0553  00DC               	movwf	_position
  4225  0554  085D               	movf	_position+1,w
  4226  0555  1803               	skipnc
  4227  0556  3E01               	addlw	1
  4228  0557  3E00               	addlw	0
  4229  0558  00DD               	movwf	_position+1
  4230  0559  2D5C               	goto	i1l1804
  4231  055A                     i1l1802:	
  4232  055A  01DC               	clrf	_position
  4233  055B  01DD               	clrf	_position+1
  4234  055C                     i1l1804:	
  4235                           
  4236                           ;main.c: 36: }
  4237                           ;main.c: 38: if(error < 0){
  4238  055C  1283               	bcf	3,5	;RP0=0, select bank0
  4239  055D  1303               	bcf	3,6	;RP1=0, select bank0
  4240  055E  1FDB               	btfss	_error+1,7
  4241  055F  2DAD               	goto	i1l121
  4242                           
  4243                           ;main.c: 39: STATUSbits.C = 0;
  4244  0560  1003               	bcf	3,0	;volatile
  4245                           
  4246                           ;main.c: 40: phase = (phase == 0) ? 8 : phase;
  4247  0561  0861               	movf	_phase,w
  4248  0562  1903               	btfsc	3,2
  4249  0563  2D6B               	goto	i1l1812
  4250  0564  0861               	movf	_phase,w
  4251  0565  00F7               	movwf	??_ISR
  4252  0566  01F8               	clrf	??_ISR+1
  4253  0567  0877               	movf	??_ISR,w
  4254  0568  00A4               	movwf	_ISR$253
  4255  0569  0878               	movf	??_ISR+1,w
  4256  056A  2D6E               	goto	L10
  4257  056B                     i1l1812:	
  4258  056B  3008               	movlw	8
  4259  056C  00A4               	movwf	_ISR$253
  4260  056D  3000               	movlw	0
  4261  056E                     L10:	
  4262  056E  00A5               	movwf	_ISR$253+1
  4263  056F  0824               	movf	_ISR$253,w
  4264  0570  00F7               	movwf	??_ISR
  4265  0571  0877               	movf	??_ISR,w
  4266  0572  00E1               	movwf	_phase
  4267                           
  4268                           ;main.c: 41: phase = (phase == 1) ? phase << 3 : phase >> 1;
  4269  0573  0361               	decf	_phase,w
  4270  0574  1903               	btfsc	3,2
  4271  0575  2D80               	goto	i1l1818
  4272  0576  0861               	movf	_phase,w
  4273  0577  00F7               	movwf	??_ISR
  4274  0578  1003               	clrc
  4275  0579  0C77               	rrf	??_ISR,w
  4276  057A  00F8               	movwf	??_ISR+1
  4277  057B  01F9               	clrf	??_ISR+2
  4278  057C  0878               	movf	??_ISR+1,w
  4279  057D  00A6               	movwf	_ISR$254
  4280  057E  0879               	movf	??_ISR+2,w
  4281  057F  2D8F               	goto	L11
  4282  0580                     i1l1818:	
  4283  0580  0861               	movf	_phase,w
  4284  0581  00F7               	movwf	??_ISR
  4285  0582  01F8               	clrf	??_ISR+1
  4286  0583  1003               	clrc
  4287  0584  0DF7               	rlf	??_ISR,f
  4288  0585  0DF8               	rlf	??_ISR+1,f
  4289  0586  1003               	clrc
  4290  0587  0DF7               	rlf	??_ISR,f
  4291  0588  0DF8               	rlf	??_ISR+1,f
  4292  0589  1003               	clrc
  4293  058A  0DF7               	rlf	??_ISR,f
  4294  058B  0DF8               	rlf	??_ISR+1,f
  4295  058C  0877               	movf	??_ISR,w
  4296  058D  00A6               	movwf	_ISR$254
  4297  058E  0878               	movf	??_ISR+1,w
  4298  058F                     L11:	
  4299  058F  00A7               	movwf	_ISR$254+1
  4300  0590  0826               	movf	_ISR$254,w
  4301  0591  00F7               	movwf	??_ISR
  4302  0592  0877               	movf	??_ISR,w
  4303  0593  00E1               	movwf	_phase
  4304                           
  4305                           ;main.c: 42: position = ((position - 1)== -1) ? 2047 : (position - 1);
  4306  0594  085C               	movf	_position,w
  4307  0595  3EFF               	addlw	255
  4308  0596  00F7               	movwf	??_ISR
  4309  0597  085D               	movf	_position+1,w
  4310  0598  1803               	skipnc
  4311  0599  3E01               	addlw	1
  4312  059A  3EFF               	addlw	255
  4313  059B  00F8               	movwf	??_ISR+1
  4314  059C  0A77               	incf	??_ISR,w
  4315  059D  1903               	btfsc	3,2
  4316  059E  0A78               	incf	??_ISR+1,w
  4317  059F  1903               	btfsc	3,2
  4318  05A0  2DA9               	goto	i1l1826
  4319  05A1  085C               	movf	_position,w
  4320  05A2  3EFF               	addlw	255
  4321  05A3  00DC               	movwf	_position
  4322  05A4  085D               	movf	_position+1,w
  4323  05A5  1803               	skipnc
  4324  05A6  3E01               	addlw	1
  4325  05A7  3EFF               	addlw	255
  4326  05A8  2DAC               	goto	L12
  4327  05A9                     i1l1826:	
  4328  05A9  30FF               	movlw	255
  4329  05AA  00DC               	movwf	_position
  4330  05AB  3007               	movlw	7
  4331  05AC                     L12:	
  4332  05AC  00DD               	movwf	_position+1
  4333  05AD                     i1l121:	
  4334                           
  4335                           ;main.c: 43: }
  4336                           ;main.c: 45: PORTD = phase;
  4337  05AD  0861               	movf	_phase,w
  4338  05AE  0088               	movwf	8	;volatile
  4339                           
  4340                           ;main.c: 47: PIR1bits.TMR2IF = 0;
  4341  05AF  108C               	bcf	12,1	;volatile
  4342  05B0  087D               	movf	??_ISR+6,w
  4343  05B1  00FF               	movwf	127
  4344  05B2  087C               	movf	??_ISR+5,w
  4345  05B3  008A               	movwf	10
  4346  05B4  087B               	movf	??_ISR+4,w
  4347  05B5  0084               	movwf	4
  4348  05B6  0E7A               	swapf	(??_ISR+3)^(0+-128),w
  4349  05B7  0083               	movwf	3
  4350  05B8  0EFE               	swapf	126,f
  4351  05B9  0E7E               	swapf	126,w
  4352  05BA  0009               	retfie
  4353  05BB                     __end_of_ISR:	
  4354                           
  4355                           	psect	intentry
  4356  0004                     __pintentry:	
  4357                           ;incstack = 0
  4358                           ; Regs used in _ISR: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4359                           
  4360  0004                     interrupt_function:	
  4361  007E                     saved_w	set	btemp
  4362  0004  00FE               	movwf	btemp
  4363  0005  0E03               	swapf	3,w
  4364  0006  00FA               	movwf	??_ISR+3
  4365  0007  0804               	movf	4,w
  4366  0008  00FB               	movwf	??_ISR+4
  4367  0009  080A               	movf	10,w
  4368  000A  00FC               	movwf	??_ISR+5
  4369  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4370  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4371  000D  087F               	movf	btemp+1,w
  4372  000E  00FD               	movwf	??_ISR+6
  4373  000F  120A  118A  2CE2   	ljmp	_ISR
  4374                           
  4375                           	psect	text23
  4376  0FAD                     __ptext23:	
  4377 ;; *************** function _calculaErro *****************
  4378 ;; Defined at:
  4379 ;;		line 32 in file "C:\Users\Aluno\Desktop\stepper_motor-pic16f887\stepper_motor\stepper.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;		None
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;		None
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  1    wreg      void 
  4386 ;; Registers used:
  4387 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4393 ;;      Params:         0       0       0       0       0
  4394 ;;      Locals:         0       0       0       0       0
  4395 ;;      Temps:          2       0       0       0       0
  4396 ;;      Totals:         2       0       0       0       0
  4397 ;;Total ram usage:        2 bytes
  4398 ;; Hardware stack levels used:    1
  4399 ;; Hardware stack levels required when called:    1
  4400 ;; This function calls:
  4401 ;;		_abs
  4402 ;; This function is called by:
  4403 ;;		_ISR
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           
  4408                           ;psect for function _calculaErro
  4409  0FAD                     _calculaErro:	
  4410                           
  4411                           ;stepper.c: 33: error = abs(position - setpoint);
  4412                           
  4413                           ;incstack = 0
  4414                           ; Regs used in _calculaErro: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4415  0FAD  1283               	bcf	3,5	;RP0=0, select bank0
  4416  0FAE  1303               	bcf	3,6	;RP1=0, select bank0
  4417  0FAF  095E               	comf	_setpoint,w
  4418  0FB0  00F5               	movwf	??_calculaErro
  4419  0FB1  095F               	comf	_setpoint+1,w
  4420  0FB2  00F6               	movwf	??_calculaErro+1
  4421  0FB3  0AF5               	incf	??_calculaErro,f
  4422  0FB4  1903               	skipnz
  4423  0FB5  0AF6               	incf	??_calculaErro+1,f
  4424  0FB6  085C               	movf	_position,w
  4425  0FB7  0775               	addwf	??_calculaErro,w
  4426  0FB8  00F1               	movwf	abs@a
  4427  0FB9  085D               	movf	_position+1,w
  4428  0FBA  1803               	skipnc
  4429  0FBB  0A5D               	incf	_position+1,w
  4430  0FBC  0776               	addwf	??_calculaErro+1,w
  4431  0FBD  00F2               	movwf	abs@a+1
  4432  0FBE  120A  158A  2607  120A  158A  	fcall	_abs
  4433  0FC3  0872               	movf	?_abs+1,w
  4434  0FC4  1283               	bcf	3,5	;RP0=0, select bank0
  4435  0FC5  1303               	bcf	3,6	;RP1=0, select bank0
  4436  0FC6  00DB               	movwf	_error+1
  4437  0FC7  0871               	movf	?_abs,w
  4438  0FC8  00DA               	movwf	_error
  4439                           
  4440                           ;stepper.c: 35: if(setpoint > position && error > 2048)
  4441  0FC9  085F               	movf	_setpoint+1,w
  4442  0FCA  025D               	subwf	_position+1,w
  4443  0FCB  1D03               	skipz
  4444  0FCC  2FCF               	goto	u186_25
  4445  0FCD  085E               	movf	_setpoint,w
  4446  0FCE  025C               	subwf	_position,w
  4447  0FCF                     u186_25:	
  4448  0FCF  1803               	skipnc
  4449  0FD0  2FE3               	goto	i1l1694
  4450  0FD1  085B               	movf	_error+1,w
  4451  0FD2  3A80               	xorlw	128
  4452  0FD3  00FF               	movwf	127
  4453  0FD4  3088               	movlw	136
  4454  0FD5  027F               	subwf	127,w
  4455  0FD6  1D03               	skipz
  4456  0FD7  2FDA               	goto	u187_25
  4457  0FD8  3001               	movlw	1
  4458  0FD9  025A               	subwf	_error,w
  4459  0FDA                     u187_25:	
  4460  0FDA  1C03               	skipc
  4461  0FDB  2FE3               	goto	i1l1694
  4462                           
  4463                           ;stepper.c: 36: error = -error;
  4464  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  4465  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  4466  0FDE  09DA               	comf	_error,f
  4467  0FDF  09DB               	comf	_error+1,f
  4468  0FE0  0ADA               	incf	_error,f
  4469  0FE1  1903               	skipnz
  4470  0FE2  0ADB               	incf	_error+1,f
  4471  0FE3                     i1l1694:	
  4472                           
  4473                           ;stepper.c: 38: if(setpoint < position && error < 2048)
  4474  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  4475  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  4476  0FE5  085D               	movf	_position+1,w
  4477  0FE6  025F               	subwf	_setpoint+1,w
  4478  0FE7  1D03               	skipz
  4479  0FE8  2FEB               	goto	u188_25
  4480  0FE9  085C               	movf	_position,w
  4481  0FEA  025E               	subwf	_setpoint,w
  4482  0FEB                     u188_25:	
  4483  0FEB  1803               	skipnc
  4484  0FEC  0008               	return
  4485  0FED  085B               	movf	_error+1,w
  4486  0FEE  3A80               	xorlw	128
  4487  0FEF  00FF               	movwf	127
  4488  0FF0  3088               	movlw	136
  4489  0FF1  027F               	subwf	127,w
  4490  0FF2  1D03               	skipz
  4491  0FF3  2FF6               	goto	u189_25
  4492  0FF4  3000               	movlw	0
  4493  0FF5  025A               	subwf	_error,w
  4494  0FF6                     u189_25:	
  4495  0FF6  1803               	skipnc
  4496  0FF7  0008               	return
  4497                           
  4498                           ;stepper.c: 39: error = -error;
  4499  0FF8  1283               	bcf	3,5	;RP0=0, select bank0
  4500  0FF9  1303               	bcf	3,6	;RP1=0, select bank0
  4501  0FFA  09DA               	comf	_error,f
  4502  0FFB  09DB               	comf	_error+1,f
  4503  0FFC  0ADA               	incf	_error,f
  4504  0FFD  1903               	skipnz
  4505  0FFE  0ADB               	incf	_error+1,f
  4506  0FFF  0008               	return
  4507  1000                     __end_of_calculaErro:	
  4508                           
  4509                           	psect	text24
  4510  0E07                     __ptext24:	
  4511 ;; *************** function _abs *****************
  4512 ;; Defined at:
  4513 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  a               2    0[COMMON] int 
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;		None
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  2    0[COMMON] int 
  4520 ;; Registers used:
  4521 ;;		wreg, status,2, status,0
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4527 ;;      Params:         2       0       0       0       0
  4528 ;;      Locals:         0       0       0       0       0
  4529 ;;      Temps:          2       0       0       0       0
  4530 ;;      Totals:         4       0       0       0       0
  4531 ;;Total ram usage:        4 bytes
  4532 ;; Hardware stack levels used:    1
  4533 ;; This function calls:
  4534 ;;		Nothing
  4535 ;; This function is called by:
  4536 ;;		_calculaErro
  4537 ;; This function uses a non-reentrant model
  4538 ;;
  4539                           
  4540                           
  4541                           ;psect for function _abs
  4542  0E07                     _abs:	
  4543                           
  4544                           ;incstack = 0
  4545                           ; Regs used in _abs: [wreg+status,2+status,0]
  4546  0E07  1FF2               	btfss	abs@a+1,7
  4547  0E08  0008               	return
  4548  0E09  0971               	comf	abs@a,w
  4549  0E0A  00F3               	movwf	??_abs
  4550  0E0B  0972               	comf	abs@a+1,w
  4551  0E0C  00F4               	movwf	??_abs+1
  4552  0E0D  0AF3               	incf	??_abs,f
  4553  0E0E  1903               	skipnz
  4554  0E0F  0AF4               	incf	??_abs+1,f
  4555  0E10  0873               	movf	??_abs,w
  4556  0E11  00F1               	movwf	?_abs
  4557  0E12  0874               	movf	??_abs+1,w
  4558  0E13  00F2               	movwf	?_abs+1
  4559  0E14  0008               	return
  4560  0E15                     __end_of_abs:	
  4561  007E                     btemp	set	126	;btemp
  4562  007E                     wtemp0	set	126


Data Sizes:
    Strings     13
    Constant    0
    Data        7
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     58      71
    BANK1            80      8      14
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_sendString@string	PTR unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[4]), c_int_value(BANK1[2]), STR_1(CODE[4]), 

    LCD_TRIS	PTR volatile unsigned int  size(2) Largest target is 1
		 -> TRISB(SFR1[1]), 

    LCD_PORT	PTR volatile unsigned int  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_calculaErro
    _calculaErro->_abs

Critical Paths under _main in BANK0

    _main->_int2char
    _setup->_setPosicaoAtual
    _setPosicaoAtual->___fttol
    _LCD_Setup->_LCD_SendByte
    _setPosicaoDesejada->___fttol
    ___ftdiv->___lwtoft
    _int2char->_getPosicaoAtual
    _getPosicaoAtual->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    _calculaVelocidade->___wmul
    ___wmul->___awdiv
    _LCD_sendString->_LCD_SetCursor
    _LCD_SetCursor->_LCD_SendByte
    _LCD_SendByte->_LCD_SendNb

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_int2char

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   26234
                                              6 BANK1      2     2      0
                     _LCD_sendString
                            ___ftmul
                            ___fttol
                           ___lwtoft
                  _calculaVelocidade
                    _getPosicaoAtual
                      _getVelocidade
                           _int2char
                 _setPosicaoDesejada
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    5854
                          _LCD_Setup
                    _setPosicaoAtual
                       _setupStepper
 ---------------------------------------------------------------------------------
 (2) _setupStepper                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setPosicaoAtual                                      2     0      2    4601
                                             50 BANK0      2     0      2
                            ___ftdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) _LCD_Setup                                            2     2      0    1253
                                             29 BANK0      2     2      0
                       _LCD_SendByte
                         _LCD_SendNb
 ---------------------------------------------------------------------------------
 (1) _setPosicaoDesejada                                   2     0      2    4707
                                             50 BANK0      2     0      2
                            ___ftdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    2160
                                             20 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _int2char                                            12    10      2    1649
                                             52 BANK0      6     4      2
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
                            ___fttol (ARG)
                            ___lwdiv
                           ___lwtoft (ARG)
                             ___wmul
                    _getPosicaoAtual (ARG)
                      _getVelocidade (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     501
                                              8 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _getVelocidade                                        2     0      2       0
                                              8 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _getPosicaoAtual                                      2     0      2    4572
                                             50 BANK0      2     0      2
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             4     1      3    1902
                                             16 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     464
                                             36 BANK0     14    10      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2206
                                             20 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1668
                                              8 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _calculaVelocidade                                    4     4      0    1202
                                             23 BANK0      4     4      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     656
                                             17 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     512
                                              8 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _LCD_sendString                                       8     4      4    3678
                                             33 BANK0      8     4      4
                       _LCD_SendByte
                      _LCD_SetCursor
 ---------------------------------------------------------------------------------
 (2) _LCD_SetCursor                                        4     3      1    1297
                                             29 BANK0      4     3      1
                       _LCD_SendByte
 ---------------------------------------------------------------------------------
 (3) _LCD_SendByte                                         8     7      1    1069
                                             21 BANK0      8     7      1
                         _LCD_SendNb
 ---------------------------------------------------------------------------------
 (3) _LCD_SendNb                                          13    13      0     184
                                              8 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 15    15      0     215
                                              6 COMMON     7     7      0
                                              0 BANK0      8     8      0
                        _calculaErro
 ---------------------------------------------------------------------------------
 (6) _calculaErro                                          2     2      0     119
                                              4 COMMON     2     2      0
                                _abs
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     119
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_sendString
     _LCD_SendByte
       _LCD_SendNb
     _LCD_SetCursor
       _LCD_SendByte
         _LCD_SendNb
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _calculaVelocidade
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _getPosicaoAtual
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _getVelocidade
   _int2char
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwdiv (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
     _getPosicaoAtual (ARG)
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _getVelocidade (ARG)
   _setPosicaoDesejada
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _setup
     _LCD_Setup
       _LCD_SendByte
         _LCD_SendNb
       _LCD_SendNb
     _setPosicaoAtual
       ___ftdiv
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _setupStepper

 _ISR (ROOT)
   _calculaErro
     _abs

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               55      0       0       9        0.0%
BITBANK3            55      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      8       E       7       17.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3A      47       5       88.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               D      D       D       1      100.0%
BITCOMMON            D      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      62      12        0.0%
ABS                  0      0      62       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jul 14 10:58:16 2022

                                 pc 0002                         ?_LCD_SendNb 0071  
                       __CFG_CP$OFF 0000                        ___awdiv@sign 002E  
                                fsr 0004                 ___wmul@multiplicand 0033  
                    _LCD_SendNb$330 002E                      _LCD_SendNb$331 0030  
                    _LCD_SendNb$332 0032                      _LCD_SendNb$329 002C  
                     _LCD_SetCursor 0E56                     ??_getVelocidade 002A  
                               l145 06E0                                 l344 0E7E  
                               l600 027A                                 l516 01E5  
                               l517 01ED                                 l509 01D0  
                               _PR2 0092                        __CFG_CPD$OFF 0000  
                               _ISR 04E2                                 _abs 0E07  
                               fsr0 0004                                 indf 0000  
                      __CFG_IESO$ON 0000                        __CFG_LVP$OFF 0000  
                     ?_LCD_SendByte 0035                                ?_ISR 0071  
                      ___ftdiv@cntr 003E                        ___ftdiv@sign 0043  
                              ?_abs 0071                                l1330 05D0  
                              l1412 02C2                                l1342 0640  
                              l1406 02AC                                l1336 0608  
                              l1600 00BB                                l1370 01BA  
                              l1362 01A2                                l1610 0427  
                              l1434 0326                                l1426 0307  
                              l1348 0678                                l1540 0E62  
                              l1542 0E63                                l1366 01A9  
                              l1376 01D5                                l1368 01B5  
                              l1640 04A4                                l1632 048C  
                              l1616 043D                                l1480 028B  
                              l1448 0220                                l1394 0F79  
                              l1378 01DF                                l1474 026F  
                              l1466 0252                                l1732 00E5  
                              l1724 00CA                                l1644 04B4  
                              l1628 047C                                l1476 027D  
                              l1468 0262                                l1574 007C  
                              l1736 00ED                                l1592 00A8  
                              l1584 0084                                l1568 0071  
                              l1586 0092                                l1930 0E76  
                              l1596 00B3                                l1960 0F53  
                              l1952 0F2F                                l1954 0F3D  
                              l1972 0060                                l1964 0F5E  
                              l1990 06BA                                l1994 06C6  
                              l1998 06D3                                STR_1 0819  
                              STR_2 0815                                STR_3 0810  
                              u1115 05F1                                u1135 0629  
                              u1215 01C9                                u1305 0F9A  
                              u1155 0661                                u1235 01D8  
                              u2205 0E7F                                u1405 0227  
                              u2215 0E86                                u1335 02D4  
                              u1345 02E6                                u1275 01F4  
                              u1195 01AE                                u1435 0253  
                              u1355 0308                                u1605 0093  
                              u2245 0F32                                u1365 0319  
                              u1615 009F                                u1375 0327  
                              u1625 00A9                                u1465 0271  
                              u2265 0F3E                                u1715 048D  
                              u2275 0F4A                                u2347 014E  
                              u2357 06B1                                u1725 0495  
                              u2285 0F54                                u1585 0087  
                              u1675 0449                                u1765 04B5  
                              u1685 045B                                u1775 04BD  
                      __CFG_WRT$OFF 0000                       __CFG_FCMEN$ON 0000  
                              abs@a 0071                                _main 06B5  
                      ___ftpack@arg 0028                        ___ftpack@exp 002B  
                              btemp 007E                       __CFG_BOREN$ON 0000  
                __size_of_LCD_Setup 006D                                start 0012  
                     __CFG_MCLRE$ON 0000                   ??_getPosicaoAtual 0054  
                      ___ftmul@cntr 0042                        ___ftmul@sign 0043  
                             ??_ISR 0077                        ___fttol@exp1 0051  
                             ??_abs 0073                        ___fttol@lval 004D  
                    ?_LCD_SetCursor 003D                __size_of_calculaErro 0053  
                             ?_main 0071                     __end_of___awdiv 00C0  
                     __CFG_WDTE$OFF 0000                     __end_of___ftdiv 034C  
                   __end_of___ftmul 04E2                     ___awdiv@divisor 0028  
                   __end_of___fttol 0294                               _T2CON 0012  
                    __CFG_DEBUG$OFF 0000                     __end_of___lwdiv 0F63  
                             i1l121 05AD                               i1l106 04FB  
                   ___awdiv@counter 002D                               _PORTB 0006  
                             _PORTD 0008                               _TRISB 0086  
                             _TRISD 0088                      ??_LCD_SendByte 0036  
                             _error 005A                               _phase 0061  
                     ___ftpack@sign 002C                               _speed 00A8  
                             _setup 0E15                               pclath 000A  
           __size_of_LCD_sendString 006B                 __size_of_LCD_SendNb 00FA  
                  _LCD_SendByte$336 003B                               status 0003  
                             wtemp0 007E                   _calculaVelocidade 0019  
                ?_calculaVelocidade 0071                     __initialization 07C0  
                      __end_of_main 07C0                 ??_calculaVelocidade 0037  
                      LCD_SendNb@NB 0034                              ??_main 00A6  
                     ___fttol@sign1 004C                   __end_of_LCD_Setup 0198  
                 int2char@int_value 0054            __size_of_setPosicaoAtual 0030  
                  ___awdiv@dividend 002A                              ?_setup 0071  
                  __end_of___ftpack 0206                              _ANSELH 0189  
         __end_of_calculaVelocidade 0065                              i1l1802 055A  
                            i1l1812 056B                              i1l1804 055C  
                            u201_25 050E                              i1l1826 05A9  
                            i1l1818 0580                              i1l1780 0504  
                            i1l1694 0FE3                              i1l1794 0531  
                            i1l1788 051D                              u204_25 0534  
                  __end_of___lwtoft 0E56                              u186_25 0FCF  
                            u187_25 0FDA                              u188_25 0FEB  
                            u189_25 0FF6          __end_of_setPosicaoDesejada 0EF5  
                    __CFG_PWRTE$OFF 0000                    _LCD_ShiftDisplay 0062  
                  __end_of_int2char 040F                              ___wmul 0E72  
                         ??___awdiv 002C                 LCD_sendString@i_352 0048  
                   ??_LCD_SetCursor 003E                           ??___ftdiv 003A  
                   LCD_SendByte@reg 003A                           ??___ftmul 003A  
                         ??___fttol 0048                           ??___lwdiv 002C  
                  ___awdiv@quotient 002F                 LCD_sendString@linha 0043  
             ___ftmul@f3_as_product 003F                              saved_w 007E  
           __end_of__initialization 07FC                          ___ftdiv@f1 0037  
                        ___ftdiv@f2 0034                          ___ftdiv@f3 003F  
                        ___ftmul@f1 0034                          ___ftmul@f2 0037  
                        ___fttol@f1 0044                      __pcstackCOMMON 0071  
                      __pidataBANK0 0DF5                        __pidataBANK1 0017  
              __end_of_LCD_SendByte 0FAD                        ??_LCD_SendNb 0028  
                     __end_of_setup 0E28                          ___lwtoft@c 0030  
                 LCD_sendString@col 0046                             ??_setup 0054  
                   _getPosicaoAtual 0E95                      _LCD_sendString 00C0  
                        __pbssBANK0 005A                          __pbssBANK1 00A8  
        __size_of_calculaVelocidade 004C                   ??_setPosicaoAtual 0054  
                __end_of_LCD_SendNb 06B5                     LCD_sendString@i 0047  
                int2char@int_value0 00A0                  int2char@int_value1 00A2  
                int2char@int_value2 00A4                          __pmaintext 06B5  
                           ?___wmul 0031                          __pintentry 0004  
                         ?___ftpack 0028                           ?___lwtoft 0030  
                           _ISR$251 0020                             _ISR$252 0022  
                           _ISR$253 0024                             _ISR$254 0026  
             __end_of_getVelocidade 0E07              __end_of_LCD_sendString 012B  
                         ?_int2char 0054                          __stringtab 0800  
                           ___awdiv 0065                       ??_calculaErro 0075  
                           ___ftdiv 0294                     __size_of___wmul 0023  
                           ___ftmul 040F                             ___fttol 0206  
                           ___lwdiv 0F25                    LCD_SendByte@byte 0035  
                        ??___ftpack 002D                             __ptext1 0E15  
                           __ptext2 0E28                             __ptext3 0EF5  
                           __ptext4 012B                             __ptext5 0EC5  
                           __ptext6 0294                             __ptext7 034C  
                           __ptext8 0F25                             __ptext9 0DFA  
setPosicaoDesejada@posicao_desejada 0052                          ??___lwtoft 0033  
                      __size_of_ISR 00D9                        __size_of_abs 000E  
           __end_of_getPosicaoAtual 0EC5                LCD_sendString@coluna 0044  
                   ?_LCD_sendString 0041                LCD_sendString@string 0041  
                         _LCD_Setup 012B                          ??_int2char 0056  
              end_of_initialization 07FC                    LCD_SetCursor@aux 0040  
             __size_of_LCD_SendByte 004A                  _setPosicaoDesejada 0EC5  
                        _speed_ramp 0060                       ?_setupStepper 0071  
                         _PORTDbits 0008                 __end_of_calculaErro 1000  
                      _LCD_Controle 0063                 ?_setPosicaoDesejada 0052  
                        ?_LCD_Setup 0071                        _LCD_SendByte 0F63  
                       ___ftdiv@exp 0042                ??_setPosicaoDesejada 0054  
                       ___ftmul@exp 003E                      __end_of___wmul 0E95  
             __end_of_LCD_SetCursor 0E72                      ??_setupStepper 0028  
                   _setPosicaoAtual 0EF5                 start_initialization 07C0  
                  ?_getPosicaoAtual 0052                         __end_of_ISR 05BB  
                       __end_of_abs 0E15            __CFG_FOSC$INTRC_NOCLKOUT 0000  
               LCD_SetCursor@coluna 003D                         _c_int_value 00AA  
                          ??___wmul 0035                         _calculaErro 0FAD  
                       __pdataBANK0 0062                         __pdataBANK1 00AC  
                 __size_of___ftpack 006E                           ___latbits 0002  
                 __size_of___lwtoft 0018                       __pcstackBANK0 0020  
                     __pcstackBANK1 00A0                         ??_LCD_Setup 003D  
                 __size_of_int2char 00C3                    ___lwdiv@dividend 002A  
                          ?___awdiv 0028                            ?___ftdiv 0034  
                          ?___ftmul 0034                            ?___fttol 0044  
                          ?___lwdiv 0028             __end_of_setPosicaoAtual 0F25  
                         __pstrings 0800                    ??_LCD_sendString 0045  
                  ___lwdiv@quotient 002E                      __size_of_setup 0013  
                          _LCD_PORT 0065                            _LCD_TRIS 00AC  
                 interrupt_function 0004                __end_of_setupStepper 0E3E  
                    ___wmul@product 0035                            _PIE1bits 008C  
            __size_of_getVelocidade 000D                            _PIR1bits 000C  
                       _LCD_Entrada 0064                         __stringbase 080F  
                 ___wmul@multiplier 0031                  LCD_SetCursor@linha 003F  
                  __size_of___awdiv 005B                    __size_of___ftdiv 00B8  
                  ?_setPosicaoAtual 0052                    __size_of___ftmul 00D3  
                  __size_of___fttol 008E                    __size_of___lwdiv 003E  
                          ___ftpack 0198                  __end_of__stringtab 0810  
                          ___lwtoft 0E3E                       _getVelocidade 0DFA  
                   ___lwdiv@divisor 0028                     ___lwdiv@counter 002D  
                          __ptext10 0E95                            __ptext11 0E3E  
                          __ptext20 0F63                            __ptext12 0206  
                          __ptext21 05BB                            __ptext13 040F  
                          __ptext22 04E2                            __ptext14 0198  
                          __ptext23 0FAD                            __ptext15 0019  
                          __ptext24 0E07                            __ptext16 0E72  
                          __ptext17 0065                            __ptext18 00C0  
                          __ptext19 0E56                   __CFG_BOR4V$BOR40V 0000  
                          _int2char 034C                       __size_of_main 010B  
       __size_of_setPosicaoDesejada 0030                            _setpoint 005E  
                          _position 005C                        ?_calculaErro 0071  
                        _LCD_SendNb 05BB        setPosicaoAtual@posicao_atual 0052  
                    ?_getVelocidade 0028                          _INTCONbits 000B  
             __size_of_setupStepper 0016                            intlevel1 0000  
          __size_of_getPosicaoAtual 0030              __size_of_LCD_SetCursor 001C  
             _calculaVelocidade$785 0039                           stringcode 080A  
                      _setupStepper 0E28                            stringdir 080A  
                          stringtab 0800                          _STATUSbits 0003  
